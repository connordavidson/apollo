{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar invariant_1 = tslib_1.__importDefault(require(\"invariant\"));\n\nvar registered = [];\n\nfunction create(schema) {\n  // There's no need for an extra wrapper.\n  if (isBridge(schema)) {\n    return schema;\n  }\n\n  var Bridge = registered.find(function (bridge) {\n    return bridge.check(schema);\n  });\n  invariant_1[\"default\"](Bridge, 'Unrecognised schema: %s', schema);\n  return new Bridge(schema);\n}\n\nfunction isBridge(schema) {\n  return !!(schema && schema.getError && schema.getErrorMessage && schema.getErrorMessages && schema.getField && schema.getInitialValue && schema.getProps && schema.getSubfields && schema.getType && schema.getValidator);\n}\n\nfunction register(bridge) {\n  registered.unshift(bridge);\n}\n\nexports[\"default\"] = Object.assign(create, {\n  register: register,\n  registered: registered\n});","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo_blog/apollo-blog/node_modules/uniforms/createSchemaBridge.js"],"names":["exports","__esModule","tslib_1","require","invariant_1","__importDefault","registered","create","schema","isBridge","Bridge","find","bridge","check","getError","getErrorMessage","getErrorMessages","getField","getInitialValue","getProps","getSubfields","getType","getValidator","register","unshift","Object","assign"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,WAAW,GAAGF,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,WAAD,CAA/B,CAAlB;;AACA,IAAIG,UAAU,GAAG,EAAjB;;AACA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpB;AACA,MAAIC,QAAQ,CAACD,MAAD,CAAZ,EAAsB;AAClB,WAAOA,MAAP;AACH;;AACD,MAAIE,MAAM,GAAGJ,UAAU,CAACK,IAAX,CAAgB,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,KAAP,CAAaL,MAAb,CAAP;AAA8B,GAAlE,CAAb;AACAJ,EAAAA,WAAW,CAAC,SAAD,CAAX,CAAuBM,MAAvB,EAA+B,yBAA/B,EAA0DF,MAA1D;AACA,SAAO,IAAIE,MAAJ,CAAWF,MAAX,CAAP;AACH;;AACD,SAASC,QAAT,CAAkBD,MAAlB,EAA0B;AACtB,SAAO,CAAC,EAAEA,MAAM,IACZA,MAAM,CAACM,QADD,IAENN,MAAM,CAACO,eAFD,IAGNP,MAAM,CAACQ,gBAHD,IAINR,MAAM,CAACS,QAJD,IAKNT,MAAM,CAACU,eALD,IAMNV,MAAM,CAACW,QAND,IAONX,MAAM,CAACY,YAPD,IAQNZ,MAAM,CAACa,OARD,IASNb,MAAM,CAACc,YATH,CAAR;AAUH;;AACD,SAASC,QAAT,CAAkBX,MAAlB,EAA0B;AACtBN,EAAAA,UAAU,CAACkB,OAAX,CAAmBZ,MAAnB;AACH;;AACDZ,OAAO,CAAC,SAAD,CAAP,GAAqByB,MAAM,CAACC,MAAP,CAAcnB,MAAd,EAAsB;AAAEgB,EAAAA,QAAQ,EAAEA,QAAZ;AAAsBjB,EAAAA,UAAU,EAAEA;AAAlC,CAAtB,CAArB","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar invariant_1 = tslib_1.__importDefault(require(\"invariant\"));\nvar registered = [];\nfunction create(schema) {\n    // There's no need for an extra wrapper.\n    if (isBridge(schema)) {\n        return schema;\n    }\n    var Bridge = registered.find(function (bridge) { return bridge.check(schema); });\n    invariant_1[\"default\"](Bridge, 'Unrecognised schema: %s', schema);\n    return new Bridge(schema);\n}\nfunction isBridge(schema) {\n    return !!(schema &&\n        schema.getError &&\n        schema.getErrorMessage &&\n        schema.getErrorMessages &&\n        schema.getField &&\n        schema.getInitialValue &&\n        schema.getProps &&\n        schema.getSubfields &&\n        schema.getType &&\n        schema.getValidator);\n}\nfunction register(bridge) {\n    registered.unshift(bridge);\n}\nexports[\"default\"] = Object.assign(create, { register: register, registered: registered });\n"]},"metadata":{},"sourceType":"script"}