{"ast":null,"code":"/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { UPDATE_SETTING } from '../../actions/setting';\nexport var settings = function (state, action) {\n  var _a;\n\n  if (state === void 0) {\n    state = {};\n  }\n\n  switch (action.type) {\n    case UPDATE_SETTING:\n      return __assign(__assign({}, state), (_a = {}, _a[action.key] = action.value, _a));\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["../../../src/reducer/settings/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,cAAT,QAA+B,uBAA/B;AAEA,OAAO,IAAM,QAAQ,GAAG,UACtB,KADsB,EAEtB,MAFsB,EAOrB;;;AAND,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAAkB;;AAQlB,UAAQ,MAAM,CAAC,IAAf;AACE,SAAK,cAAL;AACE,aAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,GACU,EAAA,GAAA,EAAA,EAAA,EAAA,CACP,MAAM,CAAC,GADA,CAAA,GACM,MAAM,CAAC,KADb,EACkB,EAF5B,EAAA;;AAIF;AACE,aAAO,KAAP;AAPJ;AASD,CAlBM","sourceRoot":"","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { UPDATE_SETTING } from '../../actions/setting';\nexport var settings = function (state, action) {\n    var _a;\n    if (state === void 0) { state = {}; }\n    switch (action.type) {\n        case UPDATE_SETTING:\n            return __assign(__assign({}, state), (_a = {}, _a[action.key] = action.value, _a));\n        default:\n            return state;\n    }\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}