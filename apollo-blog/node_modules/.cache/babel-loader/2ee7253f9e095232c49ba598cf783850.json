{"ast":null,"code":"/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport semver, { satisfies } from 'semver';\nimport { v4 } from 'uuid';\nimport { ContentPlugin, LayoutPlugin, NativePlugin } from './classes';\nimport defaultPlugin from './default';\nimport { contentMissing, layoutMissing } from './missing';\n\nvar find = function (name, version) {\n  if (version === void 0) {\n    version = '*';\n  }\n\n  return function (plugin) {\n    return plugin.name === name && satisfies(plugin.version, version);\n  };\n};\n/**\n * Iterate through an editable content tree and generate ids where missing.\n */\n\n\nexport var generateMissingIds = function (props) {\n  var rows = props.rows,\n      cells = props.cells,\n      id = props.id;\n\n  if ((rows || []).length > 0) {\n    props.rows = rows.map(generateMissingIds);\n  } else if ((cells || []).length > 0) {\n    props.cells = cells.map(generateMissingIds);\n  }\n\n  return __assign(__assign({}, props), {\n    id: id || v4()\n  });\n};\n/**\n * PluginService is a registry of all content and layout plugins known to the editor.\n */\n\nvar PluginService =\n/** @class */\nfunction () {\n  /**\n   * Instantiate a new PluginService instance. You can provide your own set of content and layout plugins here.\n   */\n  function PluginService(_a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.content,\n        content = _c === void 0 ? [] : _c,\n        _d = _b.layout,\n        layout = _d === void 0 ? [] : _d,\n        native = _b.native;\n\n    this.hasNativePlugin = function () {\n      return Boolean(_this.plugins.native);\n    };\n\n    this.getNativePlugin = function () {\n      return _this.plugins.native;\n    };\n\n    this.createNativePlugin = function ( // tslint:disable-next-line:no-any\n    hover, // tslint:disable-next-line:no-any\n    monitor, // tslint:disable-next-line:no-any\n    component) {\n      var native = _this.plugins.native;\n\n      if (!native) {\n        var insert_1 = new NativePlugin({}); // tslint:disable-next-line:no-any\n\n        var cell = {\n          node: insert_1,\n          rawNode: function () {\n            return insert_1;\n          }\n        };\n        return cell;\n      } else {\n        var plugin = new NativePlugin(native(hover, monitor, component));\n        var initialState = plugin.createInitialState(); // tslint:disable-next-line:no-any\n\n        var insert_2 = {\n          content: {\n            plugin: plugin,\n            state: initialState\n          }\n        };\n        /*if (plugin === 'layout') {\n          insert = { layout: { plugin, state: initialState } };\n        }*/\n        // tslint:disable-next-line:no-any\n\n        var cell = {\n          node: insert_2,\n          rawNode: function () {\n            return insert_2;\n          }\n        };\n        return cell;\n      }\n    };\n\n    this.setLayoutPlugins = function (plugins) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      _this.plugins.layout = [];\n      plugins.forEach(function (plugin) {\n        return _this.addLayoutPlugin(plugin);\n      });\n    };\n\n    this.addLayoutPlugin = function (config) {\n      _this.plugins.layout.push(new LayoutPlugin(config));\n    };\n\n    this.removeLayoutPlugin = function (name) {\n      _this.plugins.layout = _this.plugins.layout.filter(function (plugin) {\n        return plugin.name !== name;\n      });\n    };\n\n    this.setContentPlugins = function (plugins) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      _this.plugins.content = []; // semicolon is required to avoid syntax error\n\n      __spread([defaultPlugin], plugins).forEach(function (plugin) {\n        return _this.addContentPlugin(plugin);\n      });\n    };\n\n    this.addContentPlugin = function (config) {\n      _this.plugins.content.push(new ContentPlugin(config));\n    };\n\n    this.removeContentPlugin = function (name) {\n      _this.plugins.content = _this.plugins.content.filter(function (plugin) {\n        return plugin.name !== name;\n      });\n    };\n    /**\n     * Finds a layout plugin based on its name and version.\n     */\n\n\n    this.findLayoutPlugin = function (name, version) {\n      var plugin = _this.plugins.layout.find(find(name, version));\n\n      var pluginWrongVersion = undefined;\n\n      if (!plugin) {\n        pluginWrongVersion = _this.plugins.layout.find(find(name, '*'));\n      }\n\n      return {\n        plugin: plugin || new LayoutPlugin(layoutMissing({\n          name: name,\n          version: version\n        })),\n        pluginWrongVersion: pluginWrongVersion\n      };\n    };\n    /**\n     * Finds a content plugin based on its name and version.\n     */\n\n\n    this.findContentPlugin = function (name, version) {\n      var plugin = _this.plugins.content.find(find(name, version));\n\n      var pluginWrongVersion = undefined;\n\n      if (!plugin) {\n        pluginWrongVersion = _this.plugins.content.find(find(name, '*'));\n      }\n\n      return {\n        plugin: plugin || new ContentPlugin(contentMissing({\n          name: name,\n          version: version\n        })),\n        pluginWrongVersion: pluginWrongVersion\n      };\n    };\n    /**\n     * Returns a list of all known plugin names.\n     */\n\n\n    this.getRegisteredNames = function () {\n      return __spread(_this.plugins.content.map(function (_a) {\n        var name = _a.name;\n        return name;\n      }), _this.plugins.layout.map(function (_a) {\n        var name = _a.name;\n        return name;\n      }));\n    };\n\n    this.migratePluginState = function ( // tslint:disable-next-line:no-any\n    state, plugin, dataVersion // tslint:disable-next-line:no-any\n    ) {\n      if (!plugin || !dataVersion || semver.valid(dataVersion) === null) {\n        return state;\n      }\n\n      var currentDataVersion = dataVersion;\n      var migrations = plugin.migrations ? plugin.migrations : [];\n\n      while (true) {\n        var migration = migrations.find(function (m) {\n          return semver.satisfies(currentDataVersion, m.fromVersionRange);\n        });\n        migrations = migrations.filter(function (m) {\n          return !semver.satisfies(currentDataVersion, m.fromVersionRange);\n        });\n\n        if (!migration) {\n          // We assume all migrations necessary for the current version of plugin to work are provided\n          // Therefore if we don't find any, that means we are done and state is up to date\n          break;\n        }\n\n        currentDataVersion = migration.toVersion;\n        state = migration.migrate(state);\n      }\n\n      return state;\n    };\n\n    this.getNewPluginState = function (found, // tslint:disable-next-line:no-any\n    state, version) {\n      if (!found.pluginWrongVersion || semver.lt(found.pluginWrongVersion.version, version)) {\n        // Standard case\n        return {\n          plugin: found.plugin,\n          state: found.plugin.unserialize(state)\n        };\n      } else {\n        // Attempt to migrate\n        var migratedState = _this.migratePluginState(state, found.pluginWrongVersion, version);\n\n        if (found.pluginWrongVersion && migratedState) {\n          return {\n            plugin: found.pluginWrongVersion,\n            state: found.pluginWrongVersion.unserialize(migratedState)\n          };\n        } else {\n          // Unable to migrate, fallback to missing plugin\n          return {\n            plugin: found.plugin,\n            state: found.plugin.unserialize(state)\n          };\n        }\n      }\n    }; // tslint:disable-next-line:no-any\n\n\n    this.unserialize = function (state) {\n      var _a = state.rows,\n          rows = _a === void 0 ? [] : _a,\n          _b = state.cells,\n          cells = _b === void 0 ? [] : _b,\n          _c = state.content,\n          content = _c === void 0 ? {} : _c,\n          _d = state.layout,\n          layout = _d === void 0 ? {} : _d,\n          inline = state.inline,\n          size = state.size,\n          isDraft = state.isDraft,\n          id = state.id;\n      var newState = {\n        id: id,\n        inline: inline,\n        size: size,\n        isDraft: isDraft\n      };\n\n      var _e = content || {},\n          _f = _e.plugin,\n          _g = _f === void 0 ? {} : _f,\n          _h = _g.name,\n          contentName = _h === void 0 ? null : _h,\n          _j = _g.version,\n          contentVersion = _j === void 0 ? '*' : _j,\n          _k = _e.state,\n          contentState = _k === void 0 ? {} : _k;\n\n      var _l = layout || {},\n          _m = _l.plugin,\n          _o = _m === void 0 ? {} : _m,\n          _p = _o.name,\n          layoutName = _p === void 0 ? null : _p,\n          _q = _o.version,\n          layoutVersion = _q === void 0 ? '*' : _q,\n          _r = _l.state,\n          layoutState = _r === void 0 ? {} : _r;\n\n      if (contentName) {\n        var found = _this.findContentPlugin(contentName, contentVersion);\n\n        var newContentState = _this.getNewPluginState(found, contentState, contentVersion);\n\n        newState.content = newContentState;\n      }\n\n      if (layoutName) {\n        var found = _this.findLayoutPlugin(layoutName, layoutVersion);\n\n        var newLayoutState = _this.getNewPluginState(found, layoutState, layoutVersion);\n\n        newState.layout = newLayoutState;\n      }\n\n      if ((rows || []).length) {\n        newState.rows = rows.map(_this.unserialize);\n      }\n\n      if ((cells || []).length) {\n        newState.cells = cells.map(_this.unserialize);\n      }\n\n      return generateMissingIds(newState);\n    }; // tslint:disable-next-line:no-any\n\n\n    this.serialize = function (state) {\n      var _a = state.rows,\n          rows = _a === void 0 ? [] : _a,\n          _b = state.cells,\n          cells = _b === void 0 ? [] : _b,\n          content = state.content,\n          layout = state.layout,\n          inline = state.inline,\n          isDraft = state.isDraft,\n          size = state.size,\n          id = state.id; // tslint:disable-next-line:no-any\n\n      var newState = {\n        id: id,\n        inline: inline,\n        size: size,\n        isDraft: isDraft\n      };\n\n      if (content && content.plugin) {\n        newState.content = {\n          plugin: {\n            name: content.plugin.name,\n            version: content.plugin.version\n          },\n          state: content.plugin.serialize(content.state)\n        };\n      }\n\n      if (layout && layout.plugin) {\n        newState.layout = {\n          plugin: {\n            name: layout.plugin.name,\n            version: layout.plugin.version\n          },\n          state: layout.plugin.serialize(layout.state)\n        };\n      }\n\n      if (rows.length) {\n        newState.rows = rows.map(_this.serialize);\n      }\n\n      if (cells.length) {\n        newState.cells = cells.map(_this.serialize);\n      }\n\n      return newState;\n    };\n\n    this.plugins = {\n      content: __spread([defaultPlugin], content).map( // tslint:disable-next-line:no-any\n      function (config) {\n        return new ContentPlugin(config);\n      }),\n      // tslint:disable-next-line:no-any\n      layout: layout.map(function (config) {\n        return new LayoutPlugin(config);\n      }),\n      native: native\n    };\n  }\n\n  return PluginService;\n}();\n\nexport default PluginService;","map":{"version":3,"sources":["../../../src/service/plugin/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport semver, { satisfies } from 'semver';\nimport { v4 } from 'uuid';\nimport { ContentPlugin, LayoutPlugin, NativePlugin } from './classes';\nimport defaultPlugin from './default';\nimport { contentMissing, layoutMissing } from './missing';\nvar find = function (name, version) {\n    if (version === void 0) { version = '*'; }\n    return function (plugin) { return plugin.name === name && satisfies(plugin.version, version); };\n};\n/**\n * Iterate through an editable content tree and generate ids where missing.\n */\nexport var generateMissingIds = function (props) {\n    var rows = props.rows, cells = props.cells, id = props.id;\n    if ((rows || []).length > 0) {\n        props.rows = rows.map(generateMissingIds);\n    }\n    else if ((cells || []).length > 0) {\n        props.cells = cells.map(generateMissingIds);\n    }\n    return __assign(__assign({}, props), { id: id || v4() });\n};\n/**\n * PluginService is a registry of all content and layout plugins known to the editor.\n */\nvar PluginService = /** @class */ (function () {\n    /**\n     * Instantiate a new PluginService instance. You can provide your own set of content and layout plugins here.\n     */\n    function PluginService(_a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.content, content = _c === void 0 ? [] : _c, _d = _b.layout, layout = _d === void 0 ? [] : _d, native = _b.native;\n        this.hasNativePlugin = function () { return Boolean(_this.plugins.native); };\n        this.getNativePlugin = function () { return _this.plugins.native; };\n        this.createNativePlugin = function (\n        // tslint:disable-next-line:no-any\n        hover, \n        // tslint:disable-next-line:no-any\n        monitor, \n        // tslint:disable-next-line:no-any\n        component) {\n            var native = _this.plugins.native;\n            if (!native) {\n                var insert_1 = new NativePlugin({});\n                // tslint:disable-next-line:no-any\n                var cell = { node: insert_1, rawNode: function () { return insert_1; } };\n                return cell;\n            }\n            else {\n                var plugin = new NativePlugin(native(hover, monitor, component));\n                var initialState = plugin.createInitialState();\n                // tslint:disable-next-line:no-any\n                var insert_2 = { content: { plugin: plugin, state: initialState } };\n                /*if (plugin === 'layout') {\n                  insert = { layout: { plugin, state: initialState } };\n                }*/\n                // tslint:disable-next-line:no-any\n                var cell = { node: insert_2, rawNode: function () { return insert_2; } };\n                return cell;\n            }\n        };\n        this.setLayoutPlugins = function (plugins) {\n            if (plugins === void 0) { plugins = []; }\n            _this.plugins.layout = [];\n            plugins.forEach(function (plugin) { return _this.addLayoutPlugin(plugin); });\n        };\n        this.addLayoutPlugin = function (config) {\n            _this.plugins.layout.push(new LayoutPlugin(config));\n        };\n        this.removeLayoutPlugin = function (name) {\n            _this.plugins.layout = _this.plugins.layout.filter(function (plugin) { return plugin.name !== name; });\n        };\n        this.setContentPlugins = function (plugins) {\n            if (plugins === void 0) { plugins = []; }\n            _this.plugins.content = [];\n            // semicolon is required to avoid syntax error\n            __spread([defaultPlugin], plugins).forEach(function (plugin) {\n                return _this.addContentPlugin(plugin);\n            });\n        };\n        this.addContentPlugin = function (config) {\n            _this.plugins.content.push(new ContentPlugin(config));\n        };\n        this.removeContentPlugin = function (name) {\n            _this.plugins.content = _this.plugins.content.filter(function (plugin) { return plugin.name !== name; });\n        };\n        /**\n         * Finds a layout plugin based on its name and version.\n         */\n        this.findLayoutPlugin = function (name, version) {\n            var plugin = _this.plugins.layout.find(find(name, version));\n            var pluginWrongVersion = undefined;\n            if (!plugin) {\n                pluginWrongVersion = _this.plugins.layout.find(find(name, '*'));\n            }\n            return {\n                plugin: plugin || new LayoutPlugin(layoutMissing({ name: name, version: version })),\n                pluginWrongVersion: pluginWrongVersion,\n            };\n        };\n        /**\n         * Finds a content plugin based on its name and version.\n         */\n        this.findContentPlugin = function (name, version) {\n            var plugin = _this.plugins.content.find(find(name, version));\n            var pluginWrongVersion = undefined;\n            if (!plugin) {\n                pluginWrongVersion = _this.plugins.content.find(find(name, '*'));\n            }\n            return {\n                plugin: plugin || new ContentPlugin(contentMissing({ name: name, version: version })),\n                pluginWrongVersion: pluginWrongVersion,\n            };\n        };\n        /**\n         * Returns a list of all known plugin names.\n         */\n        this.getRegisteredNames = function () { return __spread(_this.plugins.content.map(function (_a) {\n            var name = _a.name;\n            return name;\n        }), _this.plugins.layout.map(function (_a) {\n            var name = _a.name;\n            return name;\n        })); };\n        this.migratePluginState = function (\n        // tslint:disable-next-line:no-any\n        state, plugin, dataVersion\n        // tslint:disable-next-line:no-any\n        ) {\n            if (!plugin || !dataVersion || semver.valid(dataVersion) === null) {\n                return state;\n            }\n            var currentDataVersion = dataVersion;\n            var migrations = plugin.migrations ? plugin.migrations : [];\n            while (true) {\n                var migration = migrations.find(function (m) {\n                    return semver.satisfies(currentDataVersion, m.fromVersionRange);\n                });\n                migrations = migrations.filter(function (m) { return !semver.satisfies(currentDataVersion, m.fromVersionRange); });\n                if (!migration) {\n                    // We assume all migrations necessary for the current version of plugin to work are provided\n                    // Therefore if we don't find any, that means we are done and state is up to date\n                    break;\n                }\n                currentDataVersion = migration.toVersion;\n                state = migration.migrate(state);\n            }\n            return state;\n        };\n        this.getNewPluginState = function (found, \n        // tslint:disable-next-line:no-any\n        state, version) {\n            if (!found.pluginWrongVersion ||\n                semver.lt(found.pluginWrongVersion.version, version)) {\n                // Standard case\n                return {\n                    plugin: found.plugin,\n                    state: found.plugin.unserialize(state),\n                };\n            }\n            else {\n                // Attempt to migrate\n                var migratedState = _this.migratePluginState(state, found.pluginWrongVersion, version);\n                if (found.pluginWrongVersion && migratedState) {\n                    return {\n                        plugin: found.pluginWrongVersion,\n                        state: found.pluginWrongVersion.unserialize(migratedState),\n                    };\n                }\n                else {\n                    // Unable to migrate, fallback to missing plugin\n                    return {\n                        plugin: found.plugin,\n                        state: found.plugin.unserialize(state),\n                    };\n                }\n            }\n        };\n        // tslint:disable-next-line:no-any\n        this.unserialize = function (state) {\n            var _a = state.rows, rows = _a === void 0 ? [] : _a, _b = state.cells, cells = _b === void 0 ? [] : _b, _c = state.content, content = _c === void 0 ? {} : _c, _d = state.layout, layout = _d === void 0 ? {} : _d, inline = state.inline, size = state.size, isDraft = state.isDraft, id = state.id;\n            var newState = { id: id, inline: inline, size: size, isDraft: isDraft };\n            var _e = content || {}, _f = _e.plugin, _g = _f === void 0 ? {} : _f, _h = _g.name, contentName = _h === void 0 ? null : _h, _j = _g.version, contentVersion = _j === void 0 ? '*' : _j, _k = _e.state, contentState = _k === void 0 ? {} : _k;\n            var _l = layout || {}, _m = _l.plugin, _o = _m === void 0 ? {} : _m, _p = _o.name, layoutName = _p === void 0 ? null : _p, _q = _o.version, layoutVersion = _q === void 0 ? '*' : _q, _r = _l.state, layoutState = _r === void 0 ? {} : _r;\n            if (contentName) {\n                var found = _this.findContentPlugin(contentName, contentVersion);\n                var newContentState = _this.getNewPluginState(found, contentState, contentVersion);\n                newState.content = newContentState;\n            }\n            if (layoutName) {\n                var found = _this.findLayoutPlugin(layoutName, layoutVersion);\n                var newLayoutState = _this.getNewPluginState(found, layoutState, layoutVersion);\n                newState.layout = newLayoutState;\n            }\n            if ((rows || []).length) {\n                newState.rows = rows.map(_this.unserialize);\n            }\n            if ((cells || []).length) {\n                newState.cells = cells.map(_this.unserialize);\n            }\n            return generateMissingIds(newState);\n        };\n        // tslint:disable-next-line:no-any\n        this.serialize = function (state) {\n            var _a = state.rows, rows = _a === void 0 ? [] : _a, _b = state.cells, cells = _b === void 0 ? [] : _b, content = state.content, layout = state.layout, inline = state.inline, isDraft = state.isDraft, size = state.size, id = state.id;\n            // tslint:disable-next-line:no-any\n            var newState = { id: id, inline: inline, size: size, isDraft: isDraft };\n            if (content && content.plugin) {\n                newState.content = {\n                    plugin: { name: content.plugin.name, version: content.plugin.version },\n                    state: content.plugin.serialize(content.state),\n                };\n            }\n            if (layout && layout.plugin) {\n                newState.layout = {\n                    plugin: { name: layout.plugin.name, version: layout.plugin.version },\n                    state: layout.plugin.serialize(layout.state),\n                };\n            }\n            if (rows.length) {\n                newState.rows = rows.map(_this.serialize);\n            }\n            if (cells.length) {\n                newState.cells = cells.map(_this.serialize);\n            }\n            return newState;\n        };\n        this.plugins = {\n            content: __spread([defaultPlugin], content).map(\n            // tslint:disable-next-line:no-any\n            function (config) { return new ContentPlugin(config); }),\n            // tslint:disable-next-line:no-any\n            layout: layout.map(function (config) { return new LayoutPlugin(config); }),\n            native: native,\n        };\n    }\n    return PluginService;\n}());\nexport default PluginService;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}