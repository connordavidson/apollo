{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { CELL_BLUR, CELL_BLUR_ALL, CELL_DRAG_HOVER, CELL_FOCUS, CELL_INSERT_ABOVE, CELL_INSERT_BELOW, CELL_INSERT_INLINE_LEFT, CELL_INSERT_INLINE_RIGHT, CELL_INSERT_LEFT_OF, CELL_INSERT_RIGHT_OF, CELL_REMOVE, CELL_RESIZE, CELL_UPDATE_CONTENT, CELL_UPDATE_IS_DRAFT, CELL_UPDATE_LAYOUT } from '../../actions/cell';\nimport { createCell, createRow } from '../../types/editable';\nimport { isHoveringThis } from './helper/hover';\nimport { computeRow } from './helper/inline';\nimport { flatten, optimizeCell, optimizeCells, optimizeRow, optimizeRows } from './helper/optimize';\nimport { resizeCells } from './helper/sizing';\n\nvar inner = function (cb, action) {\n  return function (state) {\n    return cb(state, action);\n  };\n};\n\nvar identity = function (state) {\n  return state;\n};\n\nexport var cell = function (s, a) {\n  return optimizeCell(function (state, action) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var reduce = function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      var content = (_d = (_c = (_b = (_a = state) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.plugin) === null || _c === void 0 ? void 0 : _c.reducer, _d !== null && _d !== void 0 ? _d : identity);\n      var layout = (_h = (_g = (_f = (_e = state) === null || _e === void 0 ? void 0 : _e.layout) === null || _f === void 0 ? void 0 : _f.plugin) === null || _g === void 0 ? void 0 : _g.reducer, _h !== null && _h !== void 0 ? _h : identity);\n      return content(layout(__assign(__assign({}, state), {\n        hover: null,\n        rows: rows(state.rows, action)\n      }), action), action);\n    };\n\n    switch (action.type) {\n      case CELL_UPDATE_IS_DRAFT:\n        if (action.id === state.id) {\n          // If this cell is being focused, set the data\n          return __assign(__assign({}, reduce()), {\n            isDraft: action.isDraft\n          });\n        }\n\n        return __assign(__assign({}, reduce()), {\n          focused: false,\n          focusSource: null\n        });\n\n      case CELL_UPDATE_CONTENT:\n        if (action.id === state.id) {\n          // If this cell is being updated, set the data\n          var reduced = reduce();\n          return __assign(__assign({}, reduced), {\n            content: __assign(__assign({}, state.content || {}), {\n              state: __assign(__assign({}, (_c = (_b = (_a = reduced) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.state, _c !== null && _c !== void 0 ? _c : {})), action.state)\n            })\n          });\n        }\n\n        return reduce();\n\n      case CELL_UPDATE_LAYOUT:\n        if (action.id === state.id) {\n          // If this cell is being updated, set the data\n          var reduced = reduce();\n          return __assign(__assign({}, reduced), {\n            layout: __assign(__assign({}, state.layout || {}), {\n              state: __assign(__assign({}, (_f = (_e = (_d = reduced) === null || _d === void 0 ? void 0 : _d.layout) === null || _e === void 0 ? void 0 : _e.state, _f !== null && _f !== void 0 ? _f : {})), action.state)\n            })\n          });\n        }\n\n        return reduce();\n\n      case CELL_FOCUS:\n        if (action.id === state.id) {\n          // If this cell is being focused, set the data\n          return __assign(__assign({}, reduce()), {\n            focused: true,\n            focusSource: action.source\n          });\n        }\n\n        return __assign(__assign({}, reduce()), {\n          focused: false,\n          focusSource: null\n        });\n\n      case CELL_BLUR:\n        if (action.id === state.id) {\n          // If this cell is being blurred, set the data\n          return __assign(__assign({}, reduce()), {\n            focused: false,\n            focusSource: null\n          });\n        }\n\n        return reduce();\n\n      case CELL_BLUR_ALL:\n        return __assign(__assign({}, reduce()), {\n          focused: false\n        });\n\n      case CELL_DRAG_HOVER:\n        if (isHoveringThis(state, action)) {\n          // if this is the cell we're hovering, set the hover attribute\n          return __assign(__assign({}, reduce()), {\n            hover: action.position\n          });\n        } // or remove it if not\n\n\n        return reduce();\n\n      case CELL_INSERT_ABOVE:\n        if (isHoveringThis(state, action)) {\n          return __assign(__assign({}, createCell()), {\n            id: action.ids.cell,\n            hover: null,\n            rows: rows([__assign(__assign({}, createRow()), {\n              id: action.ids.others[0],\n              cells: [__assign(__assign({}, action.item), {\n                id: action.ids.item,\n                inline: null\n              })]\n            }), __assign(__assign({}, createRow()), {\n              id: action.ids.others[1],\n              cells: [__assign(__assign({}, reduce()), {\n                id: action.ids.others[2]\n              })]\n            })], __assign(__assign({}, action), {\n              hover: null\n            }))\n          });\n        }\n\n        return reduce();\n\n      case CELL_INSERT_BELOW:\n        if (isHoveringThis(state, action)) {\n          return __assign(__assign({}, createCell()), {\n            id: action.ids.cell,\n            hover: null,\n            rows: rows([__assign(__assign({}, createRow()), {\n              id: action.ids.others[0],\n              cells: [__assign(__assign({}, reduce()), {\n                id: action.ids.others[1]\n              })]\n            }), __assign(__assign({}, createRow()), {\n              id: action.ids.others[2],\n              cells: [__assign(__assign({}, action.item), {\n                id: action.ids.item,\n                inline: null\n              })]\n            })], __assign(__assign({}, action), {\n              hover: null\n            }))\n          });\n        }\n\n        return reduce();\n\n      default:\n        return reduce();\n    }\n  }(s, a));\n};\nexport var cells = function (s, a) {\n  if (s === void 0) {\n    s = [];\n  }\n\n  return optimizeCells(function (state, action) {\n    switch (action.type) {\n      case CELL_RESIZE:\n        // tslint:disable-next-line:no-any\n        return resizeCells(state.map(inner(cell, action)), action);\n\n      case CELL_INSERT_BELOW:\n      case CELL_INSERT_ABOVE:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(inner(cell, action));\n\n      case CELL_INSERT_LEFT_OF:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(function (c) {\n          return isHoveringThis(c, action) ? [__assign(__assign({}, action.item), {\n            id: action.ids.item,\n            inline: null\n          }), __assign(__assign({}, c), {\n            id: action.ids.others[0]\n          })] : [c];\n        }).reduce(flatten, []).map(inner(cell, action));\n\n      case CELL_INSERT_RIGHT_OF:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(function (c) {\n          return isHoveringThis(c, action) ? [__assign(__assign({}, c), {\n            id: action.ids.others[0]\n          }), __assign(__assign({}, action.item), {\n            id: action.ids.item,\n            inline: null\n          })] : [c];\n        }).reduce(flatten, []).map(inner(cell, action));\n\n      case CELL_INSERT_INLINE_RIGHT:\n      case CELL_INSERT_INLINE_LEFT:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(function (c) {\n          if (isHoveringThis(c, action)) {\n            return [__assign(__assign({}, createCell()), {\n              id: action.ids.cell,\n              rows: [__assign(__assign({}, createRow()), {\n                id: action.ids.others[0],\n                cells: [__assign(__assign({}, action.item), {\n                  inline: action.type === CELL_INSERT_INLINE_RIGHT ? 'right' : 'left',\n                  id: action.ids.item,\n                  size: 0\n                }), __assign(__assign({}, c), {\n                  id: action.ids.others[1],\n                  inline: null,\n                  hasInlineNeighbour: action.ids.item,\n                  size: 0\n                })]\n              })]\n            })];\n          }\n\n          return [c];\n        }).reduce(flatten, []).map(inner(cell, action));\n\n      case CELL_REMOVE:\n        return state.filter(function (_a) {\n          var id = _a.id;\n          return id !== action.id;\n        }).map(inner(cell, action));\n\n      default:\n        return state.map(inner(cell, action));\n    }\n  }(s, a));\n};\nexport var row = function (s, a) {\n  return computeRow(optimizeRow(function (state, action) {\n    var reduce = function () {\n      return __assign(__assign({}, state), {\n        hover: null,\n        cells: cells(state.cells, action)\n      });\n    };\n\n    switch (action.type) {\n      case CELL_INSERT_LEFT_OF:\n        if (!isHoveringThis(state, action)) {\n          return reduce();\n        }\n\n        return __assign(__assign({}, state), {\n          hover: null,\n          cells: cells(__spread([__assign(__assign({}, action.item), {\n            id: action.ids.item,\n            inline: null\n          })], state.cells), __assign(__assign({}, action), {\n            hover: null\n          }))\n        });\n\n      case CELL_INSERT_RIGHT_OF:\n        if (!isHoveringThis(state, action)) {\n          return reduce();\n        }\n\n        return __assign(__assign({}, state), {\n          hover: null,\n          cells: cells(__spread(state.cells, [__assign(__assign({}, action.item), {\n            id: action.ids.item,\n            inline: null\n          })]), __assign(__assign({}, action), {\n            hover: null\n          }))\n        });\n\n      case CELL_DRAG_HOVER:\n        if (isHoveringThis(state, action)) {\n          return __assign(__assign({}, reduce()), {\n            hover: action.position\n          });\n        }\n\n        return reduce();\n\n      default:\n        return reduce();\n    }\n  }(s, a)));\n};\nexport var rows = function (s, a) {\n  if (s === void 0) {\n    s = [];\n  }\n\n  return optimizeRows( // tslint:disable-next-line:no-any\n  function (state, action) {\n    var reduce = function () {\n      return state.map(inner(row, action));\n    };\n\n    switch (action.type) {\n      case CELL_INSERT_ABOVE:\n        return state.map(function (r) {\n          return isHoveringThis(r, action) ? [__assign(__assign({}, createRow()), {\n            cells: [__assign(__assign({}, action.item), {\n              id: action.ids.item,\n              inline: null\n            })],\n            id: action.ids.others[0]\n          }), __assign(__assign({}, r), {\n            id: action.ids.others[1]\n          })] : [r];\n        }).reduce(flatten, []).map(inner(row, action));\n\n      case CELL_INSERT_BELOW:\n        return state.map(function (r) {\n          return isHoveringThis(r, action) ? [__assign(__assign({}, r), {\n            id: action.ids.others[0]\n          }), __assign(__assign({}, createRow()), {\n            cells: [__assign(__assign({}, action.item), {\n              id: action.ids.item,\n              inline: null\n            })],\n            id: action.ids.others[1]\n          })] : [r];\n        }).reduce(flatten, []).map(inner(row, action));\n\n      default:\n        return reduce();\n    }\n  }(s, a));\n};","map":{"version":3,"sources":["../../../src/reducer/editable/tree.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { CELL_BLUR, CELL_BLUR_ALL, CELL_DRAG_HOVER, CELL_FOCUS, CELL_INSERT_ABOVE, CELL_INSERT_BELOW, CELL_INSERT_INLINE_LEFT, CELL_INSERT_INLINE_RIGHT, CELL_INSERT_LEFT_OF, CELL_INSERT_RIGHT_OF, CELL_REMOVE, CELL_RESIZE, CELL_UPDATE_CONTENT, CELL_UPDATE_IS_DRAFT, CELL_UPDATE_LAYOUT } from '../../actions/cell';\nimport { createCell, createRow } from '../../types/editable';\nimport { isHoveringThis } from './helper/hover';\nimport { computeRow } from './helper/inline';\nimport { flatten, optimizeCell, optimizeCells, optimizeRow, optimizeRows } from './helper/optimize';\nimport { resizeCells } from './helper/sizing';\nvar inner = function (cb, action) { return function (state) {\n    return cb(state, action);\n}; };\nvar identity = function (state) { return state; };\nexport var cell = function (s, a) {\n    return optimizeCell((function (state, action) {\n        var _a, _b, _c, _d, _e, _f;\n        var reduce = function () {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            var content = (_d = (_c = (_b = (_a = state) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.plugin) === null || _c === void 0 ? void 0 : _c.reducer, (_d !== null && _d !== void 0 ? _d : identity));\n            var layout = (_h = (_g = (_f = (_e = state) === null || _e === void 0 ? void 0 : _e.layout) === null || _f === void 0 ? void 0 : _f.plugin) === null || _g === void 0 ? void 0 : _g.reducer, (_h !== null && _h !== void 0 ? _h : identity));\n            return content(layout(__assign(__assign({}, state), { hover: null, rows: rows(state.rows, action) }), action), action);\n        };\n        switch (action.type) {\n            case CELL_UPDATE_IS_DRAFT:\n                if (action.id === state.id) {\n                    // If this cell is being focused, set the data\n                    return __assign(__assign({}, reduce()), { isDraft: action.isDraft });\n                }\n                return __assign(__assign({}, reduce()), { focused: false, focusSource: null });\n            case CELL_UPDATE_CONTENT:\n                if (action.id === state.id) {\n                    // If this cell is being updated, set the data\n                    var reduced = reduce();\n                    return __assign(__assign({}, reduced), { content: __assign(__assign({}, (state.content || {})), { state: __assign(__assign({}, (_c = (_b = (_a = reduced) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.state, (_c !== null && _c !== void 0 ? _c : {}))), action.state) }) });\n                }\n                return reduce();\n            case CELL_UPDATE_LAYOUT:\n                if (action.id === state.id) {\n                    // If this cell is being updated, set the data\n                    var reduced = reduce();\n                    return __assign(__assign({}, reduced), { layout: __assign(__assign({}, (state.layout || {})), { state: __assign(__assign({}, (_f = (_e = (_d = reduced) === null || _d === void 0 ? void 0 : _d.layout) === null || _e === void 0 ? void 0 : _e.state, (_f !== null && _f !== void 0 ? _f : {}))), action.state) }) });\n                }\n                return reduce();\n            case CELL_FOCUS:\n                if (action.id === state.id) {\n                    // If this cell is being focused, set the data\n                    return __assign(__assign({}, reduce()), { focused: true, focusSource: action.source });\n                }\n                return __assign(__assign({}, reduce()), { focused: false, focusSource: null });\n            case CELL_BLUR:\n                if (action.id === state.id) {\n                    // If this cell is being blurred, set the data\n                    return __assign(__assign({}, reduce()), { focused: false, focusSource: null });\n                }\n                return reduce();\n            case CELL_BLUR_ALL:\n                return __assign(__assign({}, reduce()), { focused: false });\n            case CELL_DRAG_HOVER:\n                if (isHoveringThis(state, action)) {\n                    // if this is the cell we're hovering, set the hover attribute\n                    return __assign(__assign({}, reduce()), { hover: action.position });\n                }\n                // or remove it if not\n                return reduce();\n            case CELL_INSERT_ABOVE:\n                if (isHoveringThis(state, action)) {\n                    return __assign(__assign({}, createCell()), { id: action.ids.cell, hover: null, rows: rows([\n                            __assign(__assign({}, createRow()), { id: action.ids.others[0], cells: [\n                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),\n                                ] }),\n                            __assign(__assign({}, createRow()), { id: action.ids.others[1], cells: [__assign(__assign({}, reduce()), { id: action.ids.others[2] })] }),\n                        ], __assign(__assign({}, action), { hover: null })) });\n                }\n                return reduce();\n            case CELL_INSERT_BELOW:\n                if (isHoveringThis(state, action)) {\n                    return __assign(__assign({}, createCell()), { id: action.ids.cell, hover: null, rows: rows([\n                            __assign(__assign({}, createRow()), { id: action.ids.others[0], cells: [__assign(__assign({}, reduce()), { id: action.ids.others[1] })] }),\n                            __assign(__assign({}, createRow()), { id: action.ids.others[2], cells: [\n                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),\n                                ] }),\n                        ], __assign(__assign({}, action), { hover: null })) });\n                }\n                return reduce();\n            default:\n                return reduce();\n        }\n    })(s, a));\n};\nexport var cells = function (s, a) {\n    if (s === void 0) { s = []; }\n    return optimizeCells((function (state, action) {\n        switch (action.type) {\n            case CELL_RESIZE:\n                // tslint:disable-next-line:no-any\n                return resizeCells(state.map(inner(cell, action)), action);\n            case CELL_INSERT_BELOW:\n            case CELL_INSERT_ABOVE:\n                return state\n                    .filter(function (c) { return c.id !== action.item.id; })\n                    .map(inner(cell, action));\n            case CELL_INSERT_LEFT_OF:\n                return state\n                    .filter(function (c) { return c.id !== action.item.id; })\n                    .map(function (c) {\n                    return isHoveringThis(c, action)\n                        ? [\n                            __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),\n                            __assign(__assign({}, c), { id: action.ids.others[0] }),\n                        ]\n                        : [c];\n                })\n                    .reduce(flatten, [])\n                    .map(inner(cell, action));\n            case CELL_INSERT_RIGHT_OF:\n                return state\n                    .filter(function (c) { return c.id !== action.item.id; })\n                    .map(function (c) {\n                    return isHoveringThis(c, action)\n                        ? [\n                            __assign(__assign({}, c), { id: action.ids.others[0] }),\n                            __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),\n                        ]\n                        : [c];\n                })\n                    .reduce(flatten, [])\n                    .map(inner(cell, action));\n            case CELL_INSERT_INLINE_RIGHT:\n            case CELL_INSERT_INLINE_LEFT:\n                return state\n                    .filter(function (c) { return c.id !== action.item.id; })\n                    .map(function (c) {\n                    if (isHoveringThis(c, action)) {\n                        return [\n                            __assign(__assign({}, createCell()), { id: action.ids.cell, rows: [\n                                    __assign(__assign({}, createRow()), { id: action.ids.others[0], cells: [\n                                            __assign(__assign({}, action.item), { inline: action.type === CELL_INSERT_INLINE_RIGHT\n                                                    ? 'right'\n                                                    : 'left', id: action.ids.item, size: 0 }),\n                                            __assign(__assign({}, c), { id: action.ids.others[1], inline: null, hasInlineNeighbour: action.ids.item, size: 0 }),\n                                        ] }),\n                                ] }),\n                        ];\n                    }\n                    return [c];\n                })\n                    .reduce(flatten, [])\n                    .map(inner(cell, action));\n            case CELL_REMOVE:\n                return state\n                    .filter(function (_a) {\n                    var id = _a.id;\n                    return id !== action.id;\n                })\n                    .map(inner(cell, action));\n            default:\n                return state.map(inner(cell, action));\n        }\n    })(s, a));\n};\nexport var row = function (s, a) {\n    return computeRow(optimizeRow((function (state, action) {\n        var reduce = function () { return (__assign(__assign({}, state), { hover: null, cells: cells(state.cells, action) })); };\n        switch (action.type) {\n            case CELL_INSERT_LEFT_OF:\n                if (!isHoveringThis(state, action)) {\n                    return reduce();\n                }\n                return __assign(__assign({}, state), { hover: null, cells: cells(__spread([\n                        __assign(__assign({}, action.item), { id: action.ids.item, inline: null })\n                    ], state.cells), __assign(__assign({}, action), { hover: null })) });\n            case CELL_INSERT_RIGHT_OF:\n                if (!isHoveringThis(state, action)) {\n                    return reduce();\n                }\n                return __assign(__assign({}, state), { hover: null, cells: cells(__spread(state.cells, [\n                        __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),\n                    ]), __assign(__assign({}, action), { hover: null })) });\n            case CELL_DRAG_HOVER:\n                if (isHoveringThis(state, action)) {\n                    return __assign(__assign({}, reduce()), { hover: action.position });\n                }\n                return reduce();\n            default:\n                return reduce();\n        }\n    })(s, a)));\n};\nexport var rows = function (s, a) {\n    if (s === void 0) { s = []; }\n    return optimizeRows(\n    // tslint:disable-next-line:no-any\n    (function (state, action) {\n        var reduce = function () { return state.map(inner(row, action)); };\n        switch (action.type) {\n            case CELL_INSERT_ABOVE:\n                return state\n                    .map(function (r) {\n                    return isHoveringThis(r, action)\n                        ? [\n                            __assign(__assign({}, createRow()), { cells: [\n                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),\n                                ], id: action.ids.others[0] }),\n                            __assign(__assign({}, r), { id: action.ids.others[1] }),\n                        ]\n                        : [r];\n                })\n                    .reduce(flatten, [])\n                    .map(inner(row, action));\n            case CELL_INSERT_BELOW:\n                return state\n                    .map(function (r) {\n                    return isHoveringThis(r, action)\n                        ? [\n                            __assign(__assign({}, r), { id: action.ids.others[0] }),\n                            __assign(__assign({}, createRow()), { cells: [\n                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),\n                                ], id: action.ids.others[1] }),\n                        ]\n                        : [r];\n                })\n                    .reduce(flatten, [])\n                    .map(inner(row, action));\n            default:\n                return reduce();\n        }\n    })(s, a));\n};\n//# sourceMappingURL=tree.js.map"]},"metadata":{},"sourceType":"module"}