{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { v4 } from 'uuid';\nimport { actions } from './actions';\nimport { isProduction } from './const';\nimport { selectors } from './selector';\nimport PluginService from './service/plugin';\nimport pluginDefault from './service/plugin/default';\nimport createStore from './store';\n\nvar initialState = function () {\n  return {\n    reactPage: {\n      editables: {\n        past: [],\n        present: [],\n        future: []\n      }\n    }\n  };\n};\n\nvar nativeTypes = function (editor) {\n  return editor.plugins.hasNativePlugin() ? [NativeTypes.URL, NativeTypes.FILE, NativeTypes.TEXT] : [];\n};\n\nvar update = function (editor) {\n  return function (editable) {\n    var state = editor.plugins.unserialize(editable);\n    actions(editor.store.dispatch).editable.update(__assign(__assign({}, state), {\n      config: {\n        plugins: editor.plugins,\n        whitelist: __spread(editor.plugins.getRegisteredNames(), nativeTypes(editor))\n      }\n    }));\n  };\n};\n/**\n * Editor is the core interface for dealing with the editor.\n */\n\n\nvar Editor =\n/** @class */\nfunction () {\n  function Editor(_a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        plugins = _b.plugins,\n        _c = _b.middleware,\n        middleware = _c === void 0 ? [] : _c,\n        _d = _b.editables,\n        editables = _d === void 0 ? [] : _d,\n        _e = _b.defaultPlugin,\n        defaultPlugin = _e === void 0 ? pluginDefault : _e,\n        store = _b.store;\n\n    this.query = {};\n\n    this.refreshEditables = function () {\n      var _a;\n\n      (_a = _this.store.getState().reactPage.editables.present) === null || _a === void 0 ? void 0 : _a.forEach(function (editable) {\n        if (!isProduction) {\n          // tslint:disable-next-line:no-console\n          console.log(_this.plugins.serialize(editable));\n        } // tslint:disable-next-line:no-any\n\n\n        _this.trigger.editable.update(_this.plugins.serialize(editable));\n      });\n    };\n    /**\n     * @deprecated in order to reduce the api surface, we will remove this method in the future\n     */\n\n\n    this.setLayoutPlugins = function (plugins) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      console.warn('in order to reduce the api surface, we will remove setLayoutPlugins in the future');\n\n      _this.plugins.setLayoutPlugins(plugins);\n\n      _this.refreshEditables();\n    };\n    /**\n     * @deprecated in order to reduce the api surface, we will remove this method in the future\n     */\n\n\n    this.addLayoutPlugin = function (config) {\n      console.warn('in order to reduce the api surface, we will remove addLayoutPlugin in the future');\n\n      _this.plugins.addLayoutPlugin(config);\n\n      _this.refreshEditables();\n    };\n    /**\n     * @deprecated in order to reduce the api surface, we will remove this method in the future\n     */\n\n\n    this.removeLayoutPlugin = function (name) {\n      console.warn('in order to reduce the api surface, we will remove removeLayoutPlugin in the future');\n\n      _this.plugins.removeLayoutPlugin(name);\n\n      _this.refreshEditables();\n    };\n    /**\n     * @deprecated in order to reduce the api surface, we will remove this method in the future\n     */\n\n\n    this.setContentPlugins = function (plugins) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      console.warn('in order to reduce the api surface, we will remove setContentPlugins in the future');\n\n      _this.plugins.setContentPlugins(plugins);\n\n      _this.refreshEditables();\n    };\n    /**\n     * @deprecated in order to reduce the api surface, we will remove this method in the future\n     */\n\n\n    this.addContentPlugin = function (config) {\n      console.warn('in order to reduce the api surface, we will remove addContentPlugin in the future');\n\n      _this.plugins.addContentPlugin(config);\n\n      _this.refreshEditables();\n    };\n    /**\n     * @deprecated in order to reduce the api surface, we will remove this method in the future\n     */\n\n\n    this.removeContentPlugin = function (name) {\n      console.warn('in order to reduce the api surface, we will remove removeContentPlugin in the future');\n\n      _this.plugins.removeContentPlugin(name);\n\n      _this.refreshEditables();\n    };\n\n    this.store = store || createStore(initialState(), middleware);\n    this.plugins = new PluginService(plugins);\n    this.middleware = middleware;\n    this.trigger = actions(this.store.dispatch);\n    this.query = selectors(this.store);\n    this.defaultPlugin = defaultPlugin; // tslint:disable-next-line:no-any\n\n    this.trigger.editable.add = update(this); // tslint:disable-next-line:no-any\n\n    this.trigger.editable.update = update(this);\n    editables.forEach(this.trigger.editable.add);\n  }\n\n  return Editor;\n}();\n\nexport var createEmptyState = function () {\n  return {\n    id: v4(),\n    cells: []\n  };\n};\nexport default Editor;","map":{"version":3,"sources":["../src/Editor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { v4 } from 'uuid';\nimport { actions } from './actions';\nimport { isProduction } from './const';\nimport { selectors } from './selector';\nimport PluginService from './service/plugin';\nimport pluginDefault from './service/plugin/default';\nimport createStore from './store';\nvar initialState = function () { return ({\n    reactPage: {\n        editables: {\n            past: [],\n            present: [],\n            future: [],\n        },\n    },\n}); };\nvar nativeTypes = function (editor) {\n    return editor.plugins.hasNativePlugin()\n        ? [NativeTypes.URL, NativeTypes.FILE, NativeTypes.TEXT]\n        : [];\n};\nvar update = function (editor) { return function (editable) {\n    var state = editor.plugins.unserialize(editable);\n    actions(editor.store.dispatch).editable.update(__assign(__assign({}, state), { config: {\n            plugins: editor.plugins,\n            whitelist: __spread(editor.plugins.getRegisteredNames(), nativeTypes(editor)),\n        } }));\n}; };\n/**\n * Editor is the core interface for dealing with the editor.\n */\nvar Editor = /** @class */ (function () {\n    function Editor(_a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, plugins = _b.plugins, _c = _b.middleware, middleware = _c === void 0 ? [] : _c, _d = _b.editables, editables = _d === void 0 ? [] : _d, _e = _b.defaultPlugin, defaultPlugin = _e === void 0 ? pluginDefault : _e, store = _b.store;\n        this.query = {};\n        this.refreshEditables = function () {\n            var _a;\n            (_a = _this.store.getState().reactPage.editables.present) === null || _a === void 0 ? void 0 : _a.forEach(function (editable) {\n                if (!isProduction) {\n                    // tslint:disable-next-line:no-console\n                    console.log(_this.plugins.serialize(editable));\n                }\n                // tslint:disable-next-line:no-any\n                _this.trigger.editable.update(_this.plugins.serialize(editable));\n            });\n        };\n        /**\n         * @deprecated in order to reduce the api surface, we will remove this method in the future\n         */\n        this.setLayoutPlugins = function (plugins) {\n            if (plugins === void 0) { plugins = []; }\n            console.warn('in order to reduce the api surface, we will remove setLayoutPlugins in the future');\n            _this.plugins.setLayoutPlugins(plugins);\n            _this.refreshEditables();\n        };\n        /**\n         * @deprecated in order to reduce the api surface, we will remove this method in the future\n         */\n        this.addLayoutPlugin = function (config) {\n            console.warn('in order to reduce the api surface, we will remove addLayoutPlugin in the future');\n            _this.plugins.addLayoutPlugin(config);\n            _this.refreshEditables();\n        };\n        /**\n         * @deprecated in order to reduce the api surface, we will remove this method in the future\n         */\n        this.removeLayoutPlugin = function (name) {\n            console.warn('in order to reduce the api surface, we will remove removeLayoutPlugin in the future');\n            _this.plugins.removeLayoutPlugin(name);\n            _this.refreshEditables();\n        };\n        /**\n         * @deprecated in order to reduce the api surface, we will remove this method in the future\n         */\n        this.setContentPlugins = function (plugins) {\n            if (plugins === void 0) { plugins = []; }\n            console.warn('in order to reduce the api surface, we will remove setContentPlugins in the future');\n            _this.plugins.setContentPlugins(plugins);\n            _this.refreshEditables();\n        };\n        /**\n         * @deprecated in order to reduce the api surface, we will remove this method in the future\n         */\n        this.addContentPlugin = function (config) {\n            console.warn('in order to reduce the api surface, we will remove addContentPlugin in the future');\n            _this.plugins.addContentPlugin(config);\n            _this.refreshEditables();\n        };\n        /**\n         * @deprecated in order to reduce the api surface, we will remove this method in the future\n         */\n        this.removeContentPlugin = function (name) {\n            console.warn('in order to reduce the api surface, we will remove removeContentPlugin in the future');\n            _this.plugins.removeContentPlugin(name);\n            _this.refreshEditables();\n        };\n        this.store = store || createStore(initialState(), middleware);\n        this.plugins = new PluginService(plugins);\n        this.middleware = middleware;\n        this.trigger = actions(this.store.dispatch);\n        this.query = selectors(this.store);\n        this.defaultPlugin = defaultPlugin;\n        // tslint:disable-next-line:no-any\n        this.trigger.editable.add = update(this);\n        // tslint:disable-next-line:no-any\n        this.trigger.editable.update = update(this);\n        editables.forEach(this.trigger.editable.add);\n    }\n    return Editor;\n}());\nexport var createEmptyState = function () {\n    return ({ id: v4(), cells: [] });\n};\nexport default Editor;\n//# sourceMappingURL=Editor.js.map"]},"metadata":{},"sourceType":"module"}