{"ast":null,"code":"var _jsxFileName = \"/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/RegisterEmail.js\";\nimport React from 'react';\nimport { Button, Popover, OverlayTrigger, Badge, Row, Col } from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\nimport \"../content/css/App.css\"; //text is what gets passed in. should be used like : <RichText text={example_rich_text} />\n\nclass RegisterEmail extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null,\n      //stores the error that comes from the backend\n      loading: true,\n      //to determine if the page is loading\n      email: \"\",\n      //stores the email from the \"add email\" widget\n      email_submitted: null //stores the response value after a user submits their email\n\n    };\n\n    this.handlePostEmail = () => {\n      this.setState({\n        loading: true\n      });\n      var data = new FormData();\n      data.append('email', this.state.email);\n      axios.post(create_email_url, data).then(response => {\n        this.setState({\n          email_submitted: true\n        });\n      }).catch(error => {\n        this.setState({\n          error: error.response.data\n        });\n      });\n    };\n\n    this.handleEmailValidated = () => {\n      var email = this.state.email; //these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\n\n      var email_length_more_than_four = email.length > 5;\n      var email_contains_at = email.includes(\"@\");\n      var email_contains_period = email.includes(\".\");\n      return !(email_length_more_than_four && email_contains_at && email_contains_period);\n    };\n\n    this.handleEmail = text => {\n      this.setState({\n        email: text.target.value\n      });\n    };\n  }\n\n  render() {\n    //for email popover\n    const email_popover = React.createElement(Popover, {\n      id: \"popover-basic\",\n      className: \"max-width-800px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Popover.Title, {\n      as: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Email Updates\"), React.createElement(Popover.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      // style={{width:'200px'}}\n      className: \"width-250px\",\n      type: \"email\",\n      placeholder: \"Enter email\",\n      onChange: this.handleEmail(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), error && React.createElement(\"small\", {\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, error)), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, email_submitted ? React.createElement(CheckCircle, {\n      className: \"text-success font-size-2-5em\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }) : React.createElement(Button, {\n      disabled: this.handleEmailValidated(),\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.handlePostEmail(),\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Submit\")))));\n    return React.createElement(\"div\", {\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(OverlayTrigger, {\n      trigger: 'click',\n      placement: \"left\",\n      overlay: email_popover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Badge, {\n      className: \"font-size-10px\",\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.props.text)));\n  }\n\n}\n\nexport default RegisterEmail;","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/RegisterEmail.js"],"names":["React","Button","Popover","OverlayTrigger","Badge","Row","Col","CheckCircle","RegisterEmail","Component","state","error","loading","email","email_submitted","handlePostEmail","setState","data","FormData","append","axios","post","create_email_url","then","response","catch","handleEmailValidated","email_length_more_than_four","length","email_contains_at","includes","email_contains_period","handleEmail","text","target","value","render","email_popover","color","cursor","props"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nimport {\n  Button,\n  Popover ,\n  OverlayTrigger ,\n  Badge ,\n  Row ,\n  Col ,\n\n} from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\n\nimport \"../content/css/App.css\";\n\n\n\n//text is what gets passed in. should be used like : <RichText text={example_rich_text} />\nclass RegisterEmail extends React.Component {\n\n  state = {\n    error: null , //stores the error that comes from the backend\n    loading : true , //to determine if the page is loading\n    email: \"\" , //stores the email from the \"add email\" widget\n    email_submitted : null , //stores the response value after a user submits their email\n\n  }\n\n   handlePostEmail = () => {\n    this.setState({\n      loading: true\n    })\n\n    var data = new FormData();\n    data.append('email' , this.state.email) ;\n\n    axios\n      .post(create_email_url , data)\n      .then(response => {\n        this.setState({\n          email_submitted : true ,\n        })\n      })\n      .catch(error => {\n        this.setState({\n          error: error.response.data  ,\n        })\n      })\n  }\n\n   handleEmailValidated = () => {\n    var email = this.state.email\n    //these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\n    var email_length_more_than_four = email.length > 5\n    var email_contains_at = email.includes(\"@\")\n    var email_contains_period = email.includes(\".\")\n\n    return !(email_length_more_than_four && email_contains_at && email_contains_period )\n  }\n\n   handleEmail = (text) => {\n    this.setState({\n      email: text.target.value\n    });\n  }\n\n\n\n  render(){\n\n      //for email popover\n      const email_popover = (\n        <Popover id=\"popover-basic\" className=\"max-width-800px\">\n          <Popover.Title as=\"h3\">Email Updates</Popover.Title>\n          <Popover.Content >\n              <Row >\n                <Col>\n                  <Form.Control\n                    // style={{width:'200px'}}\n                    className=\"width-250px\"\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    onChange={this.handleEmail()}\n                  />\n                  {\n                    error&&\n                      <small style={{color:'red'}} >{error}</small>\n                    }\n                </Col>\n                <Col>\n                  {\n                    email_submitted ?\n                      <CheckCircle className=\"text-success font-size-2-5em\" />\n                    :\n                      <Button\n                        disabled={this.handleEmailValidated()}\n                        variant=\"primary\"\n                        type=\"submit\"\n                        onClick={this.handlePostEmail()}\n                        className=\"float-right\"\n                      >\n                        Submit\n                      </Button>\n                  }\n                </Col>\n              </Row>\n          </Popover.Content>\n        </Popover>\n      )\n\n      \n\n    return (\n      <div className=\"float-right\">\n        <OverlayTrigger\n          trigger={'click'}\n          placement=\"left\"\n          overlay={email_popover}\n        >\n          <Badge className=\"font-size-10px\" style={{cursor: 'pointer' , }}>\n            {this.props.text}\n          </Badge>\n        </OverlayTrigger>\n      </div>\n    )\n\n  }\n\n}\n\nexport default RegisterEmail ;\n"]},"metadata":{},"sourceType":"module"}