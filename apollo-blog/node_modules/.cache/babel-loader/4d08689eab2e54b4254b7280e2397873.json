{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\"; // import {\n//   mergeCartOnLogin,\n//   removeCartOnLogout,\n// } from \"./cart\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, username, staff) => {\n  console.log('staff from authsuccess: ' + staff);\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username: username,\n    staff: staff\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(\"http://127.0.0.1:8000/api/login/\", {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const staff = res.data.staff;\n      console.log('staff from auth: ' + staff);\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"staff\", staff);\n      localStorage.setItem(\"username\", username);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(token, username, staff));\n      dispatch(checkAuthTimeout(10000)); //merges the cart when the user logs in. mergeCartOnLogin is located in actions/cart.js\n      // dispatch( mergeCartOnLogin(token) )\n    }).catch(err => {\n      // console.log(err.response.data.non_field_errors)\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(\"http://127.0.0.1:8000/rest-auth/registration/\", {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(token, username, false));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n}; //added username to the authSuccess part and in the parameters of the function on 11/5/19\n\nexport const authCheckState = username => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    const username = localStorage.getItem(\"username\");\n    const staff = localStorage.getItem(\"staff\");\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token, username, staff));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    //removes the user token, expiration date, staff status, and username from local storage\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationDate\");\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"staff\");\n    dispatch(logout());\n  };\n}; //deprecated (from other apollo code)\n\nexport const logoutRemoveCart = () => {\n  const token = localStorage.getItem('token'); //removes the token and expiration date from local storage\n\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  console.log('TOKEN: ', token);\n  return dispatch => {\n    //calls removeCartOnLogout() from actions/cart.js\n    // dispatch( removeCartOnLogout(token) )\n    dispatch(logout());\n  };\n};","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo_blog/apollo-blog/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","username","staff","console","log","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","password","post","then","res","data","key","expirationDate","Date","getTime","localStorage","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined","logoutUser","removeItem","logoutRemoveCart"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\n// import {\n//   mergeCartOnLogin,\n//   removeCartOnLogout,\n// } from \"./cart\";\n\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (token , username , staff) => {\n  console.log('staff from authsuccess: ' + staff)\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username : username,\n    staff : staff\n  };\n};\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\n\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios\n      .post(\"http://127.0.0.1:8000/api/login/\", {\n        username: username,\n        password: password\n      })\n      .then(res => {\n        const token = res.data.key;\n        const staff = res.data.staff;\n        console.log('staff from auth: ' + staff)\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"staff\", staff);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token , username , staff));\n        dispatch(checkAuthTimeout(10000));\n\n        //merges the cart when the user logs in. mergeCartOnLogin is located in actions/cart.js\n        // dispatch( mergeCartOnLogin(token) )\n\n      })\n      .catch(err => {\n        // console.log(err.response.data.non_field_errors)\n        dispatch(authFail(err));\n      });\n  };\n};\n\n\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios\n      .post(\"http://127.0.0.1:8000/rest-auth/registration/\", {\n        username: username,\n        email: email,\n        password1: password1,\n        password2: password2\n      })\n      .then(res => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token , username , false));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\n//added username to the authSuccess part and in the parameters of the function on 11/5/19\nexport const authCheckState = (username) => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    const username = localStorage.getItem(\"username\");\n    const staff = localStorage.getItem(\"staff\") ;\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token , username , staff));\n        dispatch(\n          checkAuthTimeout(\n            (expirationDate.getTime() - new Date().getTime()) / 1000\n          )\n        );\n      }\n    }\n  };\n};\n\n\n\n\nexport const logoutUser = () => {\n    return dispatch => {\n      //removes the user token, expiration date, staff status, and username from local storage\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expirationDate\");\n      localStorage.removeItem(\"username\");\n      localStorage.removeItem(\"staff\");\n      dispatch( logout() )\n    }\n}\n\n\n\n\n//deprecated (from other apollo code)\nexport const logoutRemoveCart = () => {\n  const token = localStorage.getItem('token')\n  //removes the token and expiration date from local storage\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n\n  console.log('TOKEN: ', token)\n  return dispatch => {\n    //calls removeCartOnLogout() from actions/cart.js\n    // dispatch( removeCartOnLogout(token) )\n    dispatch( logout() )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}