{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { Portal } from 'react-portal';\nimport { useSlate } from 'slate-react';\nimport useTextIsSelected from '../hooks/useTextIsSelected';\nimport PluginButton from './PluginButton';\n\nvar HoverButtons = function (_a) {\n  var plugins = _a.plugins,\n      translations = _a.translations;\n  var showHoverToolbar = useTextIsSelected();\n  var toolbarRef = useRef();\n  var editor = useSlate();\n  useEffect(function () {\n    var toolbar = toolbarRef.current;\n\n    if (!showHoverToolbar) {\n      return;\n    }\n\n    var s = window.getSelection();\n    var oRange = s.getRangeAt(0); // get the text range\n\n    var oRect = oRange.getBoundingClientRect();\n\n    if (oRect) {\n      var left = oRect.left,\n          top_1 = oRect.top,\n          width = oRect.width;\n      toolbar.style.opacity = '1';\n      toolbar.style.top = top_1 + window.scrollY - toolbar.offsetHeight + \"px\";\n      toolbar.style.left = left + window.scrollX - toolbar.offsetWidth / 2 + width / 2 + \"px\";\n    }\n  }, [editor, showHoverToolbar]);\n  return React.createElement(Portal, null, React.createElement(\"div\", {\n    className: 'ory-plugins-content-slate-inline-toolbar ' + (showHoverToolbar ? '' : 'ory-plugins-content-slate-inline-toolbar--hidden'),\n    style: {\n      padding: 0\n    },\n    ref: toolbarRef\n  }, plugins && plugins.map(function (plugin, i) {\n    return plugin.addHoverButton ? React.createElement(PluginButton, {\n      translations: translations,\n      key: i,\n      plugin: plugin\n    }) : null;\n  })));\n};\n\nexport default HoverButtons;","map":{"version":3,"sources":["../../src/Controls/HoverButtons.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,SAAhB,EAA2B,MAA3B,QAAyC,OAAzC;AACA,SAAS,MAAT,QAAuB,cAAvB;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,OAAO,iBAAP,MAA8B,4BAA9B;AAEA,OAAO,YAAP,MAAyB,gBAAzB;;AAEA,IAAM,YAAY,GAAG,UAAC,EAAD,EAG0B;MAF7C,OAAA,GAAA,EAAA,CAAA,O;MACA,YAAA,GAAA,EAAA,CAAA,Y;AAEA,MAAM,gBAAgB,GAAG,iBAAiB,EAA1C;AACA,MAAM,UAAU,GAAG,MAAM,EAAzB;AACA,MAAM,MAAM,GAAG,QAAQ,EAAvB;AACA,EAAA,SAAS,CAAC,YAAA;AACR,QAAM,OAAO,GAAG,UAAU,CAAC,OAA3B;;AAEA,QAAI,CAAC,gBAAL,EAAuB;AACrB;AACD;;AAED,QAAI,CAAC,GAAG,MAAM,CAAC,YAAP,EAAR;AACA,QAAI,MAAM,GAAG,CAAC,CAAC,UAAF,CAAa,CAAb,CAAb,CARQ,CAQsB;;AAC9B,QAAI,KAAK,GAAG,MAAM,CAAC,qBAAP,EAAZ;;AACA,QAAI,KAAJ,EAAW;AACD,UAAA,IAAA,GAAA,KAAA,CAAA,IAAA;AAAA,UAAM,KAAA,GAAA,KAAA,CAAA,GAAN;AAAA,UAAW,KAAA,GAAA,KAAA,CAAA,KAAX;AAER,MAAA,OAAO,CAAC,KAAR,CAAc,OAAd,GAAwB,GAAxB;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,GAAd,GAAuB,KAAG,GAAG,MAAM,CAAC,OAAb,GAAuB,OAAO,CAAC,YAA/B,GAA2C,IAAlE;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,IAAd,GAAwB,IAAI,GAC1B,MAAM,CAAC,OADe,GAEtB,OAAO,CAAC,WAAR,GAAsB,CAFA,GAGtB,KAAK,GAAG,CAHc,GAGb,IAHX;AAID;AACF,GApBQ,EAoBN,CAAC,MAAD,EAAS,gBAAT,CApBM,CAAT;AAsBA,SACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,IAAP,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,SAAS,EACP,+CACC,gBAAgB,GACb,EADa,GAEb,kDAHJ,CAFJ;AAOE,IAAA,KAAK,EAAE;AAAE,MAAA,OAAO,EAAE;AAAX,KAPT;AAQE,IAAA,GAAG,EAAE;AARP,GAAA,EAUG,OAAO,IACN,OAAO,CAAC,GAAR,CAAY,UAAC,MAAD,EAAS,CAAT,EAAkB;AAC5B,WAAA,MAAM,CAAC,cAAP,GACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,MAAA,YAAY,EAAE,YADH;AAEX,MAAA,GAAG,EAAE,CAFM;AAGX,MAAA,MAAM,EAAE;AAHG,KAAb,CADF,GAMI,IANJ;AAMQ,GAPV,CAXJ,CADF,CADF;AAyBD,CAtDD;;AAwDA,eAAe,YAAf","sourceRoot":"","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Portal } from 'react-portal';\nimport { useSlate } from 'slate-react';\nimport useTextIsSelected from '../hooks/useTextIsSelected';\nimport PluginButton from './PluginButton';\nvar HoverButtons = function (_a) {\n    var plugins = _a.plugins, translations = _a.translations;\n    var showHoverToolbar = useTextIsSelected();\n    var toolbarRef = useRef();\n    var editor = useSlate();\n    useEffect(function () {\n        var toolbar = toolbarRef.current;\n        if (!showHoverToolbar) {\n            return;\n        }\n        var s = window.getSelection();\n        var oRange = s.getRangeAt(0); // get the text range\n        var oRect = oRange.getBoundingClientRect();\n        if (oRect) {\n            var left = oRect.left, top_1 = oRect.top, width = oRect.width;\n            toolbar.style.opacity = '1';\n            toolbar.style.top = top_1 + window.scrollY - toolbar.offsetHeight + \"px\";\n            toolbar.style.left = left +\n                window.scrollX -\n                toolbar.offsetWidth / 2 +\n                width / 2 + \"px\";\n        }\n    }, [editor, showHoverToolbar]);\n    return (React.createElement(Portal, null,\n        React.createElement(\"div\", { className: 'ory-plugins-content-slate-inline-toolbar ' +\n                (showHoverToolbar\n                    ? ''\n                    : 'ory-plugins-content-slate-inline-toolbar--hidden'), style: { padding: 0 }, ref: toolbarRef }, plugins &&\n            plugins.map(function (plugin, i) {\n                return plugin.addHoverButton ? (React.createElement(PluginButton, { translations: translations, key: i, plugin: plugin })) : null;\n            }))));\n};\nexport default HoverButtons;\n//# sourceMappingURL=HoverButtons.js.map"]},"metadata":{},"sourceType":"module"}