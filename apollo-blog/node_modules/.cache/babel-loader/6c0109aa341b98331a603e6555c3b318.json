{"ast":null,"code":"import React, { useLayoutEffect, useEffect, useRef, createContext, useContext, useMemo, useCallback, useState } from 'react';\nimport { Path, Node as Node$1, Editor, Text as Text$1, Range, Element as Element$1, Transforms } from 'slate';\nimport debounce from 'debounce';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport getDirection from 'direction';\nimport { isKeyHotkey } from 'is-hotkey';\nimport ReactDOM from 'react-dom';\n/**\r\n * Leaf content strings.\r\n */\n\nconst String = props => {\n  const {\n    isLast,\n    leaf,\n    parent,\n    text\n  } = props;\n  const editor = useEditor();\n  const path = ReactEditor.findPath(editor, text);\n  const parentPath = Path.parent(path); // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n\n  if (editor.isVoid(parent)) {\n    return React.createElement(ZeroWidthString, {\n      length: Node$1.string(parent).length\n    });\n  } // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n\n\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && Editor.string(editor, parentPath) === '') {\n    return React.createElement(ZeroWidthString, {\n      isLineBreak: true\n    });\n  } // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n\n\n  if (leaf.text === '') {\n    return React.createElement(ZeroWidthString, null);\n  } // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n\n\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n\n  return React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\r\n * Leaf strings with text in them.\r\n */\n\n\nconst TextString = props => {\n  const {\n    text,\n    isTrailing = false\n  } = props;\n  return React.createElement(\"span\", {\n    \"data-slate-string\": true\n  }, text, isTrailing ? '\\n' : null);\n};\n/**\r\n * Leaf strings without text, render as zero-width strings.\r\n */\n\n\nconst ZeroWidthString = props => {\n  const {\n    length = 0,\n    isLineBreak = false\n  } = props;\n  return React.createElement(\"span\", {\n    \"data-slate-zero-width\": isLineBreak ? 'n' : 'z',\n    \"data-slate-length\": length\n  }, '\\uFEFF', isLineBreak ? React.createElement(\"br\", null) : null);\n};\n/**\r\n * Two weak maps that allow us rebuild a path given a node. They are populated\r\n * at render time such that after a render occurs we can always backtrack.\r\n */\n\n\nvar NODE_TO_INDEX = new WeakMap();\nvar NODE_TO_PARENT = new WeakMap();\n/**\r\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\r\n * are used to resolve DOM event-related logic into Slate actions.\r\n */\n\nvar EDITOR_TO_ELEMENT = new WeakMap();\nvar ELEMENT_TO_NODE = new WeakMap();\nvar KEY_TO_ELEMENT = new WeakMap();\nvar NODE_TO_ELEMENT = new WeakMap();\nvar NODE_TO_KEY = new WeakMap();\n/**\r\n * Weak maps for storing editor-related state.\r\n */\n\nvar IS_READ_ONLY = new WeakMap();\nvar IS_FOCUSED = new WeakMap();\n/**\r\n * Weak map for associating the context `onChange` context with the plugin.\r\n */\n\nvar EDITOR_TO_ON_CHANGE = new WeakMap();\n/**\r\n * Symbols.\r\n */\n\nvar PLACEHOLDER_SYMBOL = Symbol('placeholder');\n/**\r\n * Individual leaves in a text node with unique formatting.\r\n */\n\nconst Leaf = props => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderLeaf = props => React.createElement(DefaultLeaf, Object.assign({}, props))\n  } = props;\n  let children = React.createElement(String, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    children = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      contentEditable: false,\n      style: {\n        pointerEvents: 'none',\n        display: 'inline-block',\n        verticalAlign: 'text-top',\n        width: '0',\n        maxWidth: '100%',\n        whiteSpace: 'nowrap',\n        opacity: '0.333'\n      }\n    }, leaf.placeholder), children);\n  } // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n\n\n  const attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes,\n    children,\n    leaf,\n    text\n  });\n};\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && Text$1.matches(next.leaf, prev.leaf);\n});\n/**\r\n * The default custom leaf renderer.\r\n */\n\nconst DefaultLeaf = props => {\n  const {\n    attributes,\n    children\n  } = props;\n  return React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n/**\r\n * Prevent warning on SSR by falling back to useEffect when window is not defined\r\n */\n\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n/**\r\n * Text.\r\n */\n\nconst Text = props => {\n  const {\n    decorations,\n    isLast,\n    parent,\n    renderLeaf,\n    text\n  } = props;\n  const editor = useEditor();\n  const ref = useRef(null);\n  const leaves = Text$1.decorations(text, decorations);\n  const key = ReactEditor.findKey(editor, text);\n  const children = [];\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i];\n    children.push(React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: `${key.id}-${i}`,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(text, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, text);\n    } else {\n      KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(text);\n    }\n  });\n  return React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: ref\n  }, children);\n};\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text;\n});\n/**\r\n * A React context for sharing the `selected` state of an element.\r\n */\n\nvar SelectedContext = createContext(false);\n/**\r\n * Get the current `selected` state of an element.\r\n */\n\nvar useSelected = () => {\n  return useContext(SelectedContext);\n};\n/**\r\n * Element.\r\n */\n\n\nconst Element = props => {\n  const {\n    decorate,\n    decorations,\n    element,\n    renderElement = p => React.createElement(DefaultElement, Object.assign({}, p)),\n    renderLeaf,\n    selection\n  } = props;\n  const ref = useRef(null);\n  const editor = useEditor();\n  const readOnly = useReadOnly();\n  const isInline = editor.isInline(element);\n  const key = ReactEditor.findKey(editor, element);\n  let children = React.createElement(Children, {\n    decorate: decorate,\n    decorations: decorations,\n    node: element,\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    selection: selection\n  }); // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n\n  const attributes = {\n    'data-slate-node': 'element',\n    ref\n  };\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  } // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n\n\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node$1.string(element);\n    const dir = getDirection(text);\n\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  } // If it's a void node, wrap the children in extra void-specific elements.\n\n\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n\n    const Tag = isInline ? 'span' : 'div';\n    const [[text]] = Node$1.texts(element);\n    children = readOnly ? null : React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, React.createElement(MemoizedText, {\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: text\n    }));\n    NODE_TO_INDEX.set(text, 0);\n    NODE_TO_PARENT.set(text, element);\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(element, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, element);\n    } else {\n      KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(element);\n    }\n  });\n  return React.createElement(SelectedContext.Provider, {\n    value: !!selection\n  }, renderElement({\n    attributes,\n    children,\n    element\n  }));\n};\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return prev.decorate === next.decorate && prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && Range.equals(prev.selection, next.selection));\n});\n/**\r\n * The default element renderer.\r\n */\n\nconst DefaultElement = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n  const editor = useEditor();\n  const Tag = editor.isInline(element) ? 'span' : 'div';\n  return React.createElement(Tag, Object.assign({}, attributes, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n/**\r\n * Check if a list of ranges is equal to another.\r\n *\r\n * PERF: this requires the two lists to also have the ranges inside them in the\r\n * same order, but this is an okay constraint for us since decorations are\r\n * kept in order, and the odd case where they aren't is okay to re-render for.\r\n */\n\n\nconst isRangeListEqual = (list, another) => {\n  if (list.length !== another.length) {\n    return false;\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i];\n    const other = another[i];\n\n    if (!Range.equals(range, other)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\r\n * A React context for sharing the editor object.\r\n */\n\n\nconst EditorContext = createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nconst useEditor = () => {\n  const editor = useContext(EditorContext);\n\n  if (!editor) {\n    throw new Error(`The \\`useEditor\\` hook must be used inside the <Slate> component's context.`);\n  }\n\n  return editor;\n};\n/**\r\n * Children.\r\n */\n\n\nconst Children = props => {\n  const {\n    decorate,\n    decorations,\n    node,\n    renderElement,\n    renderLeaf,\n    selection\n  } = props;\n  const editor = useEditor();\n  const path = ReactEditor.findPath(editor, node);\n  const children = [];\n  const isLeafBlock = Element$1.isElement(node) && !editor.isInline(node) && Editor.hasInlines(editor, node);\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i);\n    const n = node.children[i];\n    const key = ReactEditor.findKey(editor, n);\n    const range = Editor.range(editor, p);\n    const sel = selection && Range.intersection(range, selection);\n    const ds = decorate([n, p]);\n\n    for (const dec of decorations) {\n      const d = Range.intersection(dec, range);\n\n      if (d) {\n        ds.push(d);\n      }\n    }\n\n    if (Element$1.isElement(n)) {\n      children.push(React.createElement(MemoizedElement, {\n        decorate: decorate,\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderLeaf: renderLeaf,\n        selection: sel\n      }));\n    } else {\n      children.push(React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n\n    NODE_TO_INDEX.set(n, i);\n    NODE_TO_PARENT.set(n, node);\n  }\n\n  return React.createElement(React.Fragment, null, children);\n};\n\nvar IS_IOS = typeof navigator !== 'undefined' && typeof window !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nvar IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);\nvar IS_FIREFOX = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nvar IS_SAFARI = typeof navigator !== 'undefined' && /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent);\n/**\r\n * Hotkey mappings for each platform.\r\n */\n\nvar HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z'\n};\nvar APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t'\n};\nvar WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z']\n};\n/**\r\n * Create a platform-aware hotkey checker.\r\n */\n\nvar create = key => {\n  var generic = HOTKEYS[key];\n  var apple = APPLE_HOTKEYS[key];\n  var windows = WINDOWS_HOTKEYS[key];\n  var isGeneric = generic && isKeyHotkey(generic);\n  var isApple = apple && isKeyHotkey(apple);\n  var isWindows = windows && isKeyHotkey(windows);\n  return event => {\n    if (isGeneric && isGeneric(event)) return true;\n    if (IS_APPLE && isApple && isApple(event)) return true;\n    if (!IS_APPLE && isWindows && isWindows(event)) return true;\n    return false;\n  };\n};\n/**\r\n * Hotkeys.\r\n */\n\n\nvar Hotkeys = {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo')\n};\n/**\r\n * A React context for sharing the `readOnly` state of the editor.\r\n */\n\nvar ReadOnlyContext = createContext(false);\n/**\r\n * Get the current `readOnly` state of the editor.\r\n */\n\nvar useReadOnly = () => {\n  return useContext(ReadOnlyContext);\n};\n/**\r\n * A React context for sharing the editor object, in a way that re-renders the\r\n * context whenever changes occur.\r\n */\n\n\nconst SlateContext = createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nconst useSlate = () => {\n  const context = useContext(SlateContext);\n\n  if (!context) {\n    throw new Error(`The \\`useSlate\\` hook must be used inside the <SlateProvider> component's context.`);\n  }\n\n  const [editor] = context;\n  return editor;\n};\n/**\r\n * Types.\r\n */\n\n/**\r\n * Check if a DOM node is a comment node.\r\n */\n\n\nvar isDOMComment = value => {\n  return isDOMNode(value) && value.nodeType === 8;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMElement = value => {\n  return isDOMNode(value) && value.nodeType === 1;\n};\n/**\r\n * Check if a value is a DOM node.\r\n */\n\n\nvar isDOMNode = value => {\n  return value instanceof Node;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMText = value => {\n  return isDOMNode(value) && value.nodeType === 3;\n};\n/**\r\n * Normalize a DOM point so that it always refers to a text node.\r\n */\n\n\nvar normalizeDOMPoint = domPoint => {\n  var [node, offset] = domPoint; // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n\n  if (isDOMElement(node) && node.childNodes.length) {\n    var isLast = offset === node.childNodes.length;\n    var direction = isLast ? 'backward' : 'forward';\n    var index = isLast ? offset - 1 : offset;\n    node = getEditableChild(node, index, direction); // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n\n    while (isDOMElement(node) && node.childNodes.length) {\n      var i = isLast ? node.childNodes.length - 1 : 0;\n      node = getEditableChild(node, i, direction);\n    } // Determine the new offset inside the text node.\n\n\n    offset = isLast && node.textContent != null ? node.textContent.length : 0;\n  } // Return the node and offset.\n\n\n  return [node, offset];\n};\n/**\r\n * Get the nearest editable child at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\n\nvar getEditableChild = (parent, index, direction) => {\n  var {\n    childNodes\n  } = parent;\n  var child = childNodes[index];\n  var i = index;\n  var triedForward = false;\n  var triedBackward = false; // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n\n  while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute('contenteditable') === 'false') {\n    if (triedForward && triedBackward) {\n      break;\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true;\n      i = index - 1;\n      direction = 'backward';\n      continue;\n    }\n\n    if (i < 0) {\n      triedBackward = true;\n      i = index + 1;\n      direction = 'forward';\n      continue;\n    }\n\n    child = childNodes[i];\n    i += direction === 'forward' ? 1 : -1;\n  }\n\n  return child;\n};\n/**\r\n * Editable.\r\n */\n\n\nconst Editable = props => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props;\n  const editor = useSlate();\n  const ref = useRef(null); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  const state = useMemo(() => ({\n    isComposing: false,\n    isUpdatingSelection: false,\n    latestElement: null\n  }), []); // Update element-related weak maps with the DOM element ref.\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n    }\n  }); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(() => {\n    window.document.addEventListener('selectionchange', onDOMSelectionChange);\n    return () => {\n      window.document.removeEventListener('selectionchange', onDOMSelectionChange);\n    };\n  }, []); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput);\n    }\n\n    return () => {\n      if (ref.current) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    };\n  }, []); // Whenever the editor updates, make sure the DOM selection state is in sync.\n\n  useIsomorphicLayoutEffect(() => {\n    const {\n      selection\n    } = editor;\n    const domSelection = window.getSelection();\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return;\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n    if (!selection && !hasDomSelection) {\n      return;\n    }\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection); // If the DOM selection is already correct, we're done.\n\n    if (hasDomSelection && newDomRange && isRangeEqual(domSelection.getRangeAt(0), newDomRange)) {\n      return;\n    } // Otherwise the DOM selection is out of sync, so update it.\n\n\n    const el = ReactEditor.toDOMNode(editor, editor);\n    state.isUpdatingSelection = true;\n    domSelection.removeAllRanges();\n\n    if (newDomRange) {\n      domSelection.addRange(newDomRange);\n      const leafEl = newDomRange.startContainer.parentElement;\n      scrollIntoView(leafEl, {\n        scrollMode: 'if-needed'\n      });\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        el.focus();\n      }\n\n      state.isUpdatingSelection = false;\n    });\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  const onDOMBeforeInput = useCallback(event => {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      const {\n        selection\n      } = editor;\n      const {\n        inputType: type\n      } = event;\n      const data = event.dataTransfer || event.data || undefined; // These two types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n\n      if (type === 'insertCompositionText' || type === 'deleteCompositionText') {\n        return;\n      }\n\n      event.preventDefault(); // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n\n      if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n        const [targetRange] = event.getTargetRanges();\n\n        if (targetRange) {\n          const range = ReactEditor.toSlateRange(editor, targetRange);\n\n          if (!selection || !Range.equals(selection, range)) {\n            Transforms.select(editor, range);\n          }\n        }\n      } // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n\n\n      if (selection && Range.isExpanded(selection) && type.startsWith('delete')) {\n        Editor.deleteFragment(editor);\n        return;\n      }\n\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            Editor.deleteFragment(editor);\n            break;\n          }\n\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            Editor.deleteForward(editor);\n            break;\n          }\n\n        case 'deleteContentBackward':\n          {\n            Editor.deleteBackward(editor);\n            break;\n          }\n\n        case 'deleteEntireSoftLine':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteWordBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'deleteWordForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'insertLineBreak':\n        case 'insertParagraph':\n          {\n            Editor.insertBreak(editor);\n            break;\n          }\n\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (data instanceof DataTransfer) {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              Editor.insertText(editor, data);\n            }\n\n            break;\n          }\n      }\n    }\n  }, []); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  const onDOMSelectionChange = useCallback(debounce(() => {\n    if (!readOnly && !state.isComposing && !state.isUpdatingSelection) {\n      const {\n        activeElement\n      } = window.document;\n      const el = ReactEditor.toDOMNode(editor, editor);\n      const domSelection = window.getSelection();\n      const domRange = domSelection && domSelection.rangeCount > 0 && domSelection.getRangeAt(0);\n\n      if (activeElement === el) {\n        state.latestElement = activeElement;\n        IS_FOCUSED.set(editor, true);\n      } else {\n        IS_FOCUSED.delete(editor);\n      }\n\n      if (domRange && hasEditableTarget(editor, domRange.startContainer) && hasEditableTarget(editor, domRange.endContainer)) {\n        const range = ReactEditor.toSlateRange(editor, domRange);\n        Transforms.select(editor, range);\n      } else {\n        Transforms.deselect(editor);\n      }\n    }\n  }, 100), []);\n  const decorations = decorate([editor, []]);\n\n  if (placeholder && editor.children.length === 1 && Array.from(Node$1.texts(editor)).length === 1 && Node$1.string(editor) === '') {\n    const start = Editor.start(editor, []);\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start\n    });\n  }\n\n  return React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, React.createElement(Component // COMPAT: The Grammarly Chrome extension works by changing the DOM\n  // out from under `contenteditable` elements, which leads to weird\n  // behaviors so we have to disable it like editor. (2017/04/24)\n  , Object.assign({\n    \"data-gramm\": false,\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    // COMPAT: Firefox doesn't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    spellCheck: IS_FIREFOX ? undefined : attributes.spellCheck,\n    autoCorrect: IS_FIREFOX ? undefined : attributes.autoCorrect,\n    autoCapitalize: IS_FIREFOX ? undefined : attributes.autoCapitalize,\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    contentEditable: readOnly ? undefined : true,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: {\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word',\n      // Allow for passed-in styles to override anything.\n      ...style\n    },\n    onBeforeInput: useCallback(event => {\n      // COMPAT: Firefox doesn't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (IS_FIREFOX && !readOnly) {\n        event.preventDefault();\n        const text = event.data;\n        Editor.insertText(editor, text);\n      }\n    }, [readOnly]),\n    onBlur: useCallback(event => {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n\n      if (state.latestElement === window.document.activeElement) {\n        return;\n      }\n\n      const {\n        relatedTarget\n      } = event;\n      const el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        const node = ReactEditor.toSlateNode(editor, relatedTarget);\n\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, attributes.onBlur]),\n    onClick: useCallback(event => {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        const node = ReactEditor.toSlateNode(editor, event.target);\n        const path = ReactEditor.findPath(editor, node);\n        const start = Editor.start(editor, path);\n\n        if (Editor.void(editor, {\n          at: start\n        })) {\n          const range = Editor.range(editor, start);\n          Transforms.select(editor, range);\n        }\n      }\n    }, [readOnly, attributes.onClick]),\n    onCompositionEnd: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionEnd)) {\n        state.isComposing = false; // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n\n        if (!IS_SAFARI && !IS_FIREFOX && event.data) {\n          Editor.insertText(editor, event.data);\n        }\n      }\n    }, [attributes.onCompositionEnd]),\n    onCompositionStart: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionStart)) {\n        state.isComposing = true;\n      }\n    }, [attributes.onCompositionStart]),\n    onCopy: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        setFragmentData(event.clipboardData, editor);\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(event => {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        setFragmentData(event.clipboardData, editor);\n        const {\n          selection\n        } = editor;\n\n        if (selection && Range.isExpanded(selection)) {\n          Editor.deleteFragment(editor);\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onDragOver: useCallback(event => {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        const node = ReactEditor.toSlateNode(editor, event.target);\n\n        if (Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver]),\n    onDragStart: useCallback(event => {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        const node = ReactEditor.toSlateNode(editor, event.target);\n        const path = ReactEditor.findPath(editor, node);\n        const voidMatch = Editor.void(editor, {\n          at: path\n        }); // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n\n        if (voidMatch) {\n          const range = Editor.range(editor, path);\n          Transforms.select(editor, range);\n        }\n\n        setFragmentData(event.dataTransfer, editor);\n      }\n    }, [attributes.onDragStart]),\n    onDrop: useCallback(event => {\n      if (hasTarget(editor, event.target) && !readOnly && !isEventHandled(event, attributes.onDrop)) {\n        // COMPAT: Firefox doesn't fire `beforeinput` events at all, and\n        // Chromium browsers don't properly fire them for files being\n        // dropped into a `contenteditable`. (2019/11/26)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1028668\n        if (IS_FIREFOX || !IS_SAFARI && event.dataTransfer.files.length > 0) {\n          event.preventDefault();\n          const range = ReactEditor.findEventRange(editor, event);\n          const data = event.dataTransfer;\n          Transforms.select(editor, range);\n          ReactEditor.insertData(editor, data);\n        }\n      }\n    }, [readOnly, attributes.onDrop]),\n    onFocus: useCallback(event => {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        const el = ReactEditor.toDOMNode(editor, editor);\n        state.latestElement = window.document.activeElement; // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n\n        if (IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onKeyDown: useCallback(event => {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onKeyDown)) {\n        const {\n          nativeEvent\n        } = event;\n        const {\n          selection\n        } = editor; // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n\n        if (Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n\n          if (editor.redo) {\n            editor.redo();\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n\n          if (editor.undo) {\n            editor.undo();\n          }\n\n          return;\n        } // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n\n\n        if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        } // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n\n\n        if (Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: true\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'start'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor);\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'end'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'word'\n          });\n          return;\n        } // COMPAT: Firefox doesn't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n\n\n        if (IS_FIREFOX) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n\n          if (Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertBreak(editor);\n            return;\n          }\n\n          if (Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteBackward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteForward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n        }\n      }\n    }, [readOnly, attributes.onKeyDown]),\n    onPaste: useCallback(event => {\n      // COMPAT: Firefox doesn't support the `beforeinput` event, so we\n      // fall back to React's `onPaste` here instead.\n      if (IS_FIREFOX && !readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        event.preventDefault();\n        ReactEditor.insertData(editor, event.clipboardData);\n      }\n    }, [readOnly, attributes.onPaste])\n  }), React.createElement(Children, {\n    decorate: decorate,\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  })));\n};\n/**\r\n * A default memoized decorate function.\r\n */\n\n\nconst defaultDecorate = () => [];\n/**\r\n * Check if two DOM range objects are equal.\r\n */\n\n\nconst isRangeEqual = (a, b) => {\n  return a.startContainer === b.startContainer && a.startOffset === b.startOffset && a.endContainer === b.endContainer && a.endOffset === b.endOffset || a.startContainer === b.endContainer && a.startOffset === b.endOffset && a.endContainer === b.startContainer && a.endOffset === b.startOffset;\n};\n/**\r\n * Check if the target is in the editor.\r\n */\n\n\nconst hasTarget = (editor, target) => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);\n};\n/**\r\n * Check if the target is editable and in the editor.\r\n */\n\n\nconst hasEditableTarget = (editor, target) => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {\n    editable: true\n  });\n};\n/**\r\n * Check if an event is overrided by a handler.\r\n */\n\n\nconst isEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n\n  handler(event);\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\r\n * Check if a DOM event is overrided by a handler.\r\n */\n\n\nconst isDOMEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n\n  handler(event);\n  return event.defaultPrevented;\n};\n/**\r\n * Set the currently selected fragment to the clipboard.\r\n */\n\n\nconst setFragmentData = (dataTransfer, editor) => {\n  const {\n    selection\n  } = editor;\n\n  if (!selection) {\n    return;\n  }\n\n  const [start, end] = Range.edges(selection);\n  const startVoid = Editor.void(editor, {\n    at: start.path\n  });\n  const endVoid = Editor.void(editor, {\n    at: end.path\n  });\n\n  if (Range.isCollapsed(selection) && !startVoid) {\n    return;\n  } // Create a fake selection so that we can add a Base64-encoded copy of the\n  // fragment to the HTML, to decode on future pastes.\n\n\n  const domRange = ReactEditor.toDOMRange(editor, selection);\n  let contents = domRange.cloneContents();\n  let attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.\n\n  contents.childNodes.forEach(node => {\n    if (node.textContent && node.textContent.trim() !== '') {\n      attach = node;\n    }\n  }); // COMPAT: If the end node is a void node, we need to move the end of the\n  // range from the void node's spacer span, to the end of the void node's\n  // content, since the spacer is before void's content in the DOM.\n\n  if (endVoid) {\n    const [voidNode] = endVoid;\n    const r = domRange.cloneRange();\n    const domNode = ReactEditor.toDOMNode(editor, voidNode);\n    r.setEndAfter(domNode);\n    contents = r.cloneContents();\n  } // COMPAT: If the start node is a void node, we need to attach the encoded\n  // fragment to the void node's content node instead of the spacer, because\n  // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n  // most browsers. (2018/04/27)\n\n\n  if (startVoid) {\n    attach = contents.querySelector('[data-slate-spacer]');\n  } // Remove any zero-width space spans from the cloned DOM so that they don't\n  // show up elsewhere when pasted.\n\n\n  Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(zw => {\n    const isNewline = zw.getAttribute('data-slate-zero-width') === 'n';\n    zw.textContent = isNewline ? '\\n' : '';\n  }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n  // in the HTML, and can be used for intra-Slate pasting. If it's a text\n  // node, wrap it in a `<span>` so we have something to set an attribute on.\n\n  if (isDOMText(attach)) {\n    const span = document.createElement('span'); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n    // then leading and trailing spaces will be ignored. (2017/09/21)\n\n    span.style.whiteSpace = 'pre';\n    span.appendChild(attach);\n    contents.appendChild(span);\n    attach = span;\n  }\n\n  const fragment = Node$1.fragment(editor, selection);\n  const string = JSON.stringify(fragment);\n  const encoded = window.btoa(encodeURIComponent(string));\n  attach.setAttribute('data-slate-fragment', encoded);\n  dataTransfer.setData('application/x-slate-fragment', encoded); // Add the content to a <div> so that we can get its inner HTML.\n\n  const div = document.createElement('div');\n  div.appendChild(contents);\n  dataTransfer.setData('text/html', div.innerHTML);\n  dataTransfer.setData('text/plain', getPlainText(div));\n};\n/**\r\n * Get a plaintext representation of the content of a node, accounting for block\r\n * elements which get a newline appended.\r\n */\n\n\nconst getPlainText = domNode => {\n  let text = '';\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue;\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode);\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display');\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n';\n    }\n  }\n\n  return text;\n};\n/**\r\n * An auto-incrementing identifier for keys.\r\n */\n\n\nvar n = 0;\n/**\r\n * A class that keeps track of a key string. We use a full class here because we\r\n * want to be able to use them as keys in `WeakMap` objects.\r\n */\n\nclass Key {\n  constructor() {\n    this.id = \"\".concat(n++);\n  }\n\n}\n\nvar ReactEditor = {\n  /**\r\n   * Find a key for a Slate node.\r\n   */\n  findKey(editor, node) {\n    var key = NODE_TO_KEY.get(node);\n\n    if (!key) {\n      key = new Key();\n      NODE_TO_KEY.set(node, key);\n    }\n\n    return key;\n  },\n\n  /**\r\n   * Find the path of Slate node.\r\n   */\n  findPath(editor, node) {\n    var path = [];\n    var child = node;\n\n    while (true) {\n      var parent = NODE_TO_PARENT.get(child);\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path;\n        } else {\n          break;\n        }\n      }\n\n      var i = NODE_TO_INDEX.get(child);\n\n      if (i == null) {\n        break;\n      }\n\n      path.unshift(i);\n      child = parent;\n    }\n\n    throw new Error(\"Unable to find the path for Slate node: \".concat(JSON.stringify(node)));\n  },\n\n  /**\r\n   * Check if the editor is focused.\r\n   */\n  isFocused(editor) {\n    return !!IS_FOCUSED.get(editor);\n  },\n\n  /**\r\n   * Check if the editor is in read-only mode.\r\n   */\n  isReadOnly(editor) {\n    return !!IS_READ_ONLY.get(editor);\n  },\n\n  /**\r\n   * Blur the editor.\r\n   */\n  blur(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    IS_FOCUSED.set(editor, false);\n\n    if (window.document.activeElement === el) {\n      el.blur();\n    }\n  },\n\n  /**\r\n   * Focus the editor.\r\n   */\n  focus(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    IS_FOCUSED.set(editor, true);\n\n    if (window.document.activeElement !== el) {\n      el.focus({\n        preventScroll: true\n      });\n    }\n  },\n\n  /**\r\n   * Deselect the editor.\r\n   */\n  deselect(editor) {\n    var {\n      selection\n    } = editor;\n    var domSelection = window.getSelection();\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges();\n    }\n\n    if (selection) {\n      Transforms.deselect(editor);\n    }\n  },\n\n  /**\r\n   * Check if a DOM node is within the editor.\r\n   */\n  hasDOMNode(editor, target) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      editable = false\n    } = options;\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var element; // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n\n    try {\n      element = isDOMElement(target) ? target : target.parentElement;\n    } catch (err) {\n      if (!err.message.includes('Permission denied to access property \"nodeType\"')) {\n        throw err;\n      }\n    }\n\n    if (!element) {\n      return false;\n    }\n\n    return element.closest(\"[data-slate-editor]\") === el && (!editable || el.isContentEditable);\n  },\n\n  /**\r\n   * Insert data from a `DataTransfer` into the editor.\r\n   */\n  insertData(editor, data) {\n    editor.insertData(data);\n  },\n\n  /**\r\n   * Find the native DOM element from a Slate node.\r\n   */\n  toDOMNode(editor, node) {\n    var domNode = Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));\n\n    if (!domNode) {\n      throw new Error(\"Cannot resolve a DOM node from Slate node: \".concat(JSON.stringify(node)));\n    }\n\n    return domNode;\n  },\n\n  /**\r\n   * Find a native DOM selection point from a Slate point.\r\n   */\n  toDOMPoint(editor, point) {\n    var [node] = Editor.node(editor, point.path);\n    var el = ReactEditor.toDOMNode(editor, node);\n    var domPoint; // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n\n    if (Editor.void(editor, {\n      at: point\n    })) {\n      point = {\n        path: point.path,\n        offset: 0\n      };\n    } // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n\n\n    var selector = \"[data-slate-string], [data-slate-zero-width]\";\n    var texts = Array.from(el.querySelectorAll(selector));\n    var start = 0;\n\n    for (var text of texts) {\n      var domNode = text.childNodes[0];\n\n      if (domNode == null || domNode.textContent == null) {\n        continue;\n      }\n\n      var {\n        length\n      } = domNode.textContent;\n      var attr = text.getAttribute('data-slate-length');\n      var trueLength = attr == null ? length : parseInt(attr, 10);\n      var end = start + trueLength;\n\n      if (point.offset <= end) {\n        var offset = Math.min(length, Math.max(0, point.offset - start));\n        domPoint = [domNode, offset];\n        break;\n      }\n\n      start = end;\n    }\n\n    if (!domPoint) {\n      throw new Error(\"Cannot resolve a DOM point from Slate point: \".concat(JSON.stringify(point)));\n    }\n\n    return domPoint;\n  },\n\n  /**\r\n   * Find a native DOM range from a Slate `range`.\r\n   */\n  toDOMRange(editor, range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    var domAnchor = ReactEditor.toDOMPoint(editor, anchor);\n    var domFocus = Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);\n    var domRange = window.document.createRange();\n    var start = Range.isBackward(range) ? domFocus : domAnchor;\n    var end = Range.isBackward(range) ? domAnchor : domFocus;\n    domRange.setStart(start[0], start[1]);\n    domRange.setEnd(end[0], end[1]);\n    return domRange;\n  },\n\n  /**\r\n   * Find a Slate node from a native DOM `element`.\r\n   */\n  toSlateNode(editor, domNode) {\n    var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(\"[data-slate-node]\");\n    }\n\n    var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;\n\n    if (!node) {\n      throw new Error(\"Cannot resolve a Slate node from DOM node: \".concat(domEl));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Get the target range from a DOM `event`.\r\n   */\n  findEventRange(editor, event) {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent;\n    }\n\n    var {\n      clientX: x,\n      clientY: y,\n      target\n    } = event;\n\n    if (x == null || y == null) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    }\n\n    var node = ReactEditor.toSlateNode(editor, event.target);\n    var path = ReactEditor.findPath(editor, node); // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n\n    if (Editor.isVoid(editor, node)) {\n      var rect = target.getBoundingClientRect();\n      var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;\n      var edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end'\n      });\n      var point = isPrev ? Editor.before(editor, edge) : Editor.after(editor, edge);\n\n      if (point) {\n        var _range = Editor.range(editor, point);\n\n        return _range;\n      }\n    } // Else resolve a range from the caret position where the drop occured.\n\n\n    var domRange;\n    var {\n      document\n    } = window; // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y);\n    } else {\n      var position = document.caretPositionFromPoint(x, y);\n\n      if (position) {\n        domRange = document.createRange();\n        domRange.setStart(position.offsetNode, position.offset);\n        domRange.setEnd(position.offsetNode, position.offset);\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    } // Resolve a Slate range from the DOM range.\n\n\n    var range = ReactEditor.toSlateRange(editor, domRange);\n    return range;\n  },\n\n  /**\r\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\r\n   */\n  toSlatePoint(editor, domPoint) {\n    var [nearestNode, nearestOffset] = normalizeDOMPoint(domPoint);\n    var parentNode = nearestNode.parentNode;\n    var textNode = null;\n    var offset = 0;\n\n    if (parentNode) {\n      var voidNode = parentNode.closest('[data-slate-void=\"true\"]');\n      var leafNode = parentNode.closest('[data-slate-leaf]');\n      var domNode = null; // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n        var range = window.document.createRange();\n        range.setStart(textNode, 0);\n        range.setEnd(nearestNode, nearestOffset);\n        var contents = range.cloneContents();\n        var removals = [...contents.querySelectorAll('[data-slate-zero-width]'), ...contents.querySelectorAll('[contenteditable=false]')];\n        removals.forEach(el => {\n          el.parentNode.removeChild(el);\n        }); // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n\n        offset = contents.textContent.length;\n        domNode = textNode;\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]');\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n        domNode = leafNode;\n        offset = domNode.textContent.length;\n      } // COMPAT: If the parent node is a Slate zero-width space, editor is\n      // because the text node should have no characters. However, during IME\n      // composition the ASCII characters will be prepended to the zero-width\n      // space, so subtract 1 from the offset to account for the zero-width\n      // space character.\n\n\n      if (domNode && offset === domNode.textContent.length && parentNode.hasAttribute('data-slate-zero-width')) {\n        offset--;\n      }\n    }\n\n    if (!textNode) {\n      throw new Error(\"Cannot resolve a Slate point from DOM point: \".concat(domPoint));\n    } // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n\n\n    var slateNode = ReactEditor.toSlateNode(editor, textNode);\n    var path = ReactEditor.findPath(editor, slateNode);\n    return {\n      path,\n      offset\n    };\n  },\n\n  /**\r\n   * Find a Slate range from a DOM range or selection.\r\n   */\n  toSlateRange(editor, domRange) {\n    var el = domRange instanceof Selection ? domRange.anchorNode : domRange.startContainer;\n    var anchorNode;\n    var anchorOffset;\n    var focusNode;\n    var focusOffset;\n    var isCollapsed;\n\n    if (el) {\n      if (domRange instanceof Selection) {\n        anchorNode = domRange.anchorNode;\n        anchorOffset = domRange.anchorOffset;\n        focusNode = domRange.focusNode;\n        focusOffset = domRange.focusOffset;\n        isCollapsed = domRange.isCollapsed;\n      } else {\n        anchorNode = domRange.startContainer;\n        anchorOffset = domRange.startOffset;\n        focusNode = domRange.endContainer;\n        focusOffset = domRange.endOffset;\n        isCollapsed = domRange.collapsed;\n      }\n    }\n\n    if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {\n      throw new Error(\"Cannot resolve a Slate range from DOM range: \".concat(domRange));\n    }\n\n    var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset]);\n    var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset]);\n    return {\n      anchor,\n      focus\n    };\n  }\n\n};\n/**\r\n * A React context for sharing the `focused` state of the editor.\r\n */\n\nvar FocusedContext = createContext(false);\n/**\r\n * Get the current `focused` state of the editor.\r\n */\n\nvar useFocused = () => {\n  return useContext(FocusedContext);\n};\n/**\r\n * A wrapper around the provider to handle `onChange` events, because the editor\r\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\r\n */\n\n\nconst Slate = props => {\n  const {\n    editor,\n    children,\n    onChange,\n    value,\n    ...rest\n  } = props;\n  const [key, setKey] = useState(0);\n  const context = useMemo(() => {\n    editor.children = value;\n    Object.assign(editor, rest);\n    return [editor];\n  }, [key, value, ...Object.values(rest)]);\n  const onContextChange = useCallback(() => {\n    onChange(editor.children);\n    setKey(key + 1);\n  }, [key, onChange]);\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n  return React.createElement(SlateContext.Provider, {\n    value: context\n  }, React.createElement(EditorContext.Provider, {\n    value: editor\n  }, React.createElement(FocusedContext.Provider, {\n    value: ReactEditor.isFocused(editor)\n  }, children)));\n};\n/**\r\n * `withReact` adds React and DOM specific behaviors to the editor.\r\n */\n\n\nvar withReact = editor => {\n  var e = editor;\n  var {\n    apply,\n    onChange\n  } = e;\n\n  e.apply = op => {\n    var matches = [];\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n        {\n          for (var [node, path] of Editor.levels(e, {\n            at: op.path\n          })) {\n            var key = ReactEditor.findKey(e, node);\n            matches.push([path, key]);\n          }\n\n          break;\n        }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n        {\n          for (var [_node, _path] of Editor.levels(e, {\n            at: Path.parent(op.path)\n          })) {\n            var _key = ReactEditor.findKey(e, _node);\n\n            matches.push([_path, _key]);\n          }\n\n          break;\n        }\n    }\n\n    apply(op);\n\n    for (var [_path2, _key2] of matches) {\n      var [_node2] = Editor.node(e, _path2);\n      NODE_TO_KEY.set(_node2, _key2);\n    }\n  };\n\n  e.insertData = data => {\n    var fragment = data.getData('application/x-slate-fragment');\n\n    if (fragment) {\n      var decoded = decodeURIComponent(window.atob(fragment));\n      var parsed = JSON.parse(decoded);\n      Transforms.insertFragment(e, parsed);\n      return;\n    }\n\n    var text = data.getData('text/plain');\n\n    if (text) {\n      var lines = text.split('\\n');\n      var split = false;\n\n      for (var line of lines) {\n        if (split) {\n          Transforms.splitNodes(e);\n        }\n\n        Transforms.insertText(e, line);\n        split = true;\n      }\n    }\n  };\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      var onContextChange = EDITOR_TO_ON_CHANGE.get(e);\n\n      if (onContextChange) {\n        onContextChange();\n      }\n\n      onChange();\n    });\n  };\n\n  return e;\n};\n\nexport { DefaultElement, DefaultLeaf, Editable, ReactEditor, Slate, useEditor, useFocused, useReadOnly, useSelected, useSlate, withReact };","map":{"version":3,"sources":["../src/components/string.tsx","../src/utils/weak-maps.ts","../src/components/leaf.tsx","../src/hooks/use-isomorphic-layout-effect.ts","../src/components/text.tsx","../src/hooks/use-selected.ts","../src/components/element.tsx","../src/hooks/use-editor.tsx","../src/components/children.tsx","../src/utils/environment.ts","../src/utils/hotkeys.ts","../src/hooks/use-read-only.ts","../src/hooks/use-slate.tsx","../src/utils/dom.ts","../src/components/editable.tsx","../src/utils/key.ts","../src/plugin/react-editor.ts","../src/hooks/use-focused.ts","../src/components/slate.tsx","../src/plugin/with-react.ts"],"names":["Node","NODE_TO_INDEX","NODE_TO_PARENT","EDITOR_TO_ELEMENT","ELEMENT_TO_NODE","KEY_TO_ELEMENT","NODE_TO_ELEMENT","NODE_TO_KEY","IS_READ_ONLY","IS_FOCUSED","EDITOR_TO_ON_CHANGE","PLACEHOLDER_SYMBOL","Symbol","Text","useIsomorphicLayoutEffect","SlateText","Leaf","SelectedContext","createContext","useSelected","useContext","Element","ElementComponent","TextComponent","IS_IOS","navigator","window","IS_APPLE","IS_FIREFOX","IS_SAFARI","HOTKEYS","bold","compose","moveBackward","moveForward","moveWordBackward","moveWordForward","deleteBackward","deleteForward","extendBackward","extendForward","italic","splitBlock","undo","APPLE_HOTKEYS","moveLineBackward","moveLineForward","deleteLineBackward","deleteLineForward","deleteWordBackward","deleteWordForward","extendLineBackward","extendLineForward","redo","transposeCharacter","WINDOWS_HOTKEYS","create","key","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","event","isBold","isCompose","isMoveBackward","isMoveForward","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","isExtendBackward","isExtendForward","isExtendLineBackward","isExtendLineForward","isItalic","isMoveLineBackward","isMoveLineForward","isMoveWordBackward","isMoveWordForward","isRedo","isSplitBlock","isTransposeCharacter","isUndo","ReadOnlyContext","useReadOnly","isDOMComment","value","isDOMNode","isDOMElement","isDOMText","normalizeDOMPoint","domPoint","node","isLast","offset","direction","index","getEditableChild","i","childNodes","child","triedForward","triedBackward","n","Key","constructor","ReactEditor","findKey","findPath","path","parent","Editor","JSON","isFocused","isReadOnly","blur","el","focus","preventScroll","deselect","selection","domSelection","Transforms","hasDOMNode","options","editable","element","target","err","insertData","editor","toDOMNode","domNode","toDOMPoint","point","at","selector","texts","Array","start","text","length","attr","trueLength","parseInt","end","Math","toDOMRange","domAnchor","domFocus","Range","domRange","toSlateNode","domEl","findEventRange","clientX","clientY","x","y","rect","isPrev","edge","range","document","position","toSlatePoint","parentNode","nearestNode","textNode","voidNode","leafNode","contents","removals","slateNode","toSlateRange","anchorNode","anchorOffset","focusNode","focusOffset","isCollapsed","anchor","FocusedContext","useFocused","withReact","e","onChange","op","matches","Path","apply","data","fragment","decoded","decodeURIComponent","parsed","lines","split","ReactDOM","onContextChange"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useEditor } from '..'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useEditor()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\n\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n  return (\n    <span data-slate-string>\n      {text}\n      {isTrailing ? '\\n' : null}\n    </span>\n  )\n}\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nconst ZeroWidthString = (props: { length?: number; isLineBreak?: boolean }) => {\n  const { length = 0, isLineBreak = false } = props\n  return (\n    <span\n      data-slate-zero-width={isLineBreak ? 'n' : 'z'}\n      data-slate-length={length}\n    >\n      {'\\uFEFF'}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import { Node, Ancestor, Editor, Range } from 'slate'\n\nimport { Key } from './key'\n\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */\n\nexport const NODE_TO_INDEX: WeakMap<Node, number> = new WeakMap()\nexport const NODE_TO_PARENT: WeakMap<Node, Ancestor> = new WeakMap()\n\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */\n\nexport const EDITOR_TO_ELEMENT: WeakMap<Editor, HTMLElement> = new WeakMap()\nexport const EDITOR_TO_PLACEHOLDER: WeakMap<Editor, string> = new WeakMap()\nexport const ELEMENT_TO_NODE: WeakMap<HTMLElement, Node> = new WeakMap()\nexport const KEY_TO_ELEMENT: WeakMap<Key, HTMLElement> = new WeakMap()\nexport const NODE_TO_ELEMENT: WeakMap<Node, HTMLElement> = new WeakMap()\nexport const NODE_TO_KEY: WeakMap<Node, Key> = new WeakMap()\n\n/**\n * Weak maps for storing editor-related state.\n */\n\nexport const IS_READ_ONLY: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_FOCUSED: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_CLICKING: WeakMap<Editor, boolean> = new WeakMap()\n\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */\n\nexport const EDITOR_TO_ON_CHANGE = new WeakMap<Editor, () => void>()\n\n/**\n * Symbols.\n */\n\nexport const PLACEHOLDER_SYMBOL = (Symbol('placeholder') as unknown) as string\n","import React from 'react'\nimport { Text, Element } from 'slate'\n\nimport String from './string'\nimport { PLACEHOLDER_SYMBOL } from '../utils/weak-maps'\nimport { RenderLeafProps } from './editable'\n\n/**\n * Individual leaves in a text node with unique formatting.\n */\n\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  let children = (\n    <String isLast={isLast} leaf={leaf} parent={parent} text={text} />\n  )\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    children = (\n      <React.Fragment>\n        <span\n          contentEditable={false}\n          style={{\n            pointerEvents: 'none',\n            display: 'inline-block',\n            verticalAlign: 'text-top',\n            width: '0',\n            maxWidth: '100%',\n            whiteSpace: 'nowrap',\n            opacity: '0.333',\n          }}\n        >\n          {leaf.placeholder}\n        </span>\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text &&\n    Text.matches(next.leaf, prev.leaf)\n  )\n})\n\n/**\n * The default custom leaf renderer.\n */\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","import { useLayoutEffect, useEffect } from 'react'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when window is not defined\n */\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import React, { useRef } from 'react'\nimport { Range, Element, Text as SlateText } from 'slate'\n\nimport Leaf from './leaf'\nimport { ReactEditor, useEditor } from '..'\nimport { RenderLeafProps } from './editable'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  KEY_TO_ELEMENT,\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n} from '../utils/weak-maps'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: Range[]\n  isLast: boolean\n  parent: Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const { decorations, isLast, parent, renderLeaf, text } = props\n  const editor = useEditor()\n  const ref = useRef<HTMLSpanElement>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(text, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, text)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(text)\n    }\n  })\n\n  return (\n    <span data-slate-node=\"text\" ref={ref}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text\n  )\n})\n\nexport default MemoizedText\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import React, { useRef } from 'react'\nimport getDirection from 'direction'\nimport { Editor, Node, Range, NodeEntry, Element as SlateElement } from 'slate'\n\nimport Text from './text'\nimport Children from './children'\nimport { ReactEditor, useEditor, useReadOnly } from '..'\nimport { SelectedContext } from '../hooks/use-selected'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_PARENT,\n  NODE_TO_INDEX,\n  KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { RenderElementProps, RenderLeafProps } from './editable'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorate: (entry: NodeEntry) => Range[]\n  decorations: Range[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorate,\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderLeaf,\n    selection,\n  } = props\n  const ref = useRef<HTMLElement>(null)\n  const editor = useEditor()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n\n  let children: JSX.Element | null = (\n    <Children\n      decorate={decorate}\n      decorations={decorations}\n      node={element}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      selection={selection}\n    />\n  )\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = readOnly ? null : (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text decorations={[]} isLast={false} parent={element} text={text} />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(element, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, element)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(element)\n    }\n  })\n\n  return (\n    <SelectedContext.Provider value={!!selection}>\n      {renderElement({ attributes, children, element })}\n    </SelectedContext.Provider>\n  )\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.decorate === next.decorate &&\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    isRangeListEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useEditor()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\n/**\n * Check if a list of ranges is equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */\n\nconst isRangeListEqual = (list: Range[], another: Range[]): boolean => {\n  if (list.length !== another.length) {\n    return false\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i]\n    const other = another[i]\n\n    if (!Range.equals(range, other)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default MemoizedElement\n","import { createContext, useContext } from 'react'\n\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useEditor = () => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useEditor\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import React from 'react'\nimport { Editor, Range, Element, NodeEntry, Ancestor, Descendant } from 'slate'\n\nimport ElementComponent from './element'\nimport TextComponent from './text'\nimport { ReactEditor } from '..'\nimport { useEditor } from '../hooks/use-editor'\nimport { NODE_TO_INDEX, NODE_TO_PARENT } from '../utils/weak-maps'\nimport { RenderElementProps, RenderLeafProps } from './editable'\n\n/**\n * Children.\n */\n\nconst Children = (props: {\n  decorate: (entry: NodeEntry) => Range[]\n  decorations: Range[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorate,\n    decorations,\n    node,\n    renderElement,\n    renderLeaf,\n    selection,\n  } = props\n  const editor = useEditor()\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n    const ds = decorate([n, p])\n\n    for (const dec of decorations) {\n      const d = Range.intersection(dec, range)\n\n      if (d) {\n        ds.push(d)\n      }\n    }\n\n    if (Element.isElement(n)) {\n      children.push(\n        <ElementComponent\n          decorate={decorate}\n          decorations={ds}\n          element={n}\n          key={key.id}\n          renderElement={renderElement}\n          renderLeaf={renderLeaf}\n          selection={sel}\n        />\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return <React.Fragment>{children}</React.Fragment>\n}\n\nexport default Children\n","export const IS_IOS =\n  typeof navigator !== 'undefined' &&\n  typeof window !== 'undefined' &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !window.MSStream\n\nexport const IS_APPLE =\n  typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\nexport const IS_FIREFOX =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)\n\nexport const IS_SAFARI =\n  typeof navigator !== 'undefined' &&\n  /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n","import { isKeyHotkey } from 'is-hotkey'\nimport { IS_APPLE } from './environment'\n\n/**\n * Hotkey mappings for each platform.\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n}\n\n/**\n * Create a platform-aware hotkey checker.\n */\n\nconst create = (key: string) => {\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  return (event: KeyboardEvent) => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (!IS_APPLE && isWindows && isWindows(event)) return true\n    return false\n  }\n}\n\n/**\n * Hotkeys.\n */\n\nexport default {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo'),\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\n\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport const SlateContext = createContext<[ReactEditor] | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = () => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <SlateProvider> component's context.`\n    )\n  }\n\n  const [editor] = context\n  return editor\n}\n","/**\n * Types.\n */\n\n// COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nimport DOMNode = globalThis.Node\nimport DOMComment = globalThis.Comment\nimport DOMElement = globalThis.Element\nimport DOMText = globalThis.Text\nimport DOMRange = globalThis.Range\nimport DOMSelection = globalThis.Selection\nimport DOMStaticRange = globalThis.StaticRange\nexport {\n  DOMNode,\n  DOMComment,\n  DOMElement,\n  DOMText,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n}\n\nexport type DOMPoint = [Node, number]\n\n/**\n * Check if a DOM node is a comment node.\n */\n\nexport const isDOMComment = (value: any): value is DOMComment => {\n  return isDOMNode(value) && value.nodeType === 8\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMElement = (value: any): value is DOMElement => {\n  return isDOMNode(value) && value.nodeType === 1\n}\n\n/**\n * Check if a value is a DOM node.\n */\n\nexport const isDOMNode = (value: any): value is DOMNode => {\n  return value instanceof Node\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMText = (value: any): value is DOMText => {\n  return isDOMNode(value) && value.nodeType === 3\n}\n\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */\n\nexport const normalizeDOMPoint = (domPoint: DOMPoint): DOMPoint => {\n  let [node, offset] = domPoint\n\n  // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n  if (isDOMElement(node) && node.childNodes.length) {\n    const isLast = offset === node.childNodes.length\n    const direction = isLast ? 'backward' : 'forward'\n    const index = isLast ? offset - 1 : offset\n    node = getEditableChild(node, index, direction)\n\n    // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n    while (isDOMElement(node) && node.childNodes.length) {\n      const i = isLast ? node.childNodes.length - 1 : 0\n      node = getEditableChild(node, i, direction)\n    }\n\n    // Determine the new offset inside the text node.\n    offset = isLast && node.textContent != null ? node.textContent.length : 0\n  }\n\n  // Return the node and offset.\n  return [node, offset]\n}\n\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChild = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): DOMNode => {\n  const { childNodes } = parent\n  let child = childNodes[index]\n  let i = index\n  let triedForward = false\n  let triedBackward = false\n\n  // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n  while (\n    isDOMComment(child) ||\n    (isDOMElement(child) && child.childNodes.length === 0) ||\n    (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')\n  ) {\n    if (triedForward && triedBackward) {\n      break\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true\n      i = index - 1\n      direction = 'backward'\n      continue\n    }\n\n    if (i < 0) {\n      triedBackward = true\n      i = index + 1\n      direction = 'forward'\n      continue\n    }\n\n    child = childNodes[i]\n    i += direction === 'forward' ? 1 : -1\n  }\n\n  return child\n}\n","import React, { useEffect, useRef, useMemo, useCallback } from 'react'\nimport {\n  Editor,\n  Element,\n  NodeEntry,\n  Node,\n  Range,\n  Text,\n  Transforms,\n} from 'slate'\nimport debounce from 'debounce'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport Children from './children'\nimport Hotkeys from '../utils/hotkeys'\nimport { IS_FIREFOX, IS_SAFARI } from '../utils/environment'\nimport { ReactEditor } from '..'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMRange,\n  isDOMElement,\n  isDOMNode,\n  isDOMText,\n  DOMStaticRange,\n} from '../utils/dom'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  IS_FOCUSED,\n  PLACEHOLDER_SYMBOL,\n} from '../utils/weak-maps'\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => Range[]\n  onDOMBeforeInput?: (event: Event) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  as?: React.ElementType\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = (props: EditableProps) => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  const ref = useRef<HTMLDivElement>(null)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n  })\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    window.document.addEventListener('selectionchange', onDOMSelectionChange)\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        onDOMSelectionChange\n      )\n    }\n  }, [])\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput)\n    }\n\n    return () => {\n      if (ref.current) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n      }\n    }\n  }, [])\n\n  // Whenever the editor updates, make sure the DOM selection state is in sync.\n  useIsomorphicLayoutEffect(() => {\n    const { selection } = editor\n    const domSelection = window.getSelection()\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'\n\n    // If the DOM selection is properly unset, we're done.\n    if (!selection && !hasDomSelection) {\n      return\n    }\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n    // If the DOM selection is already correct, we're done.\n    if (\n      hasDomSelection &&\n      newDomRange &&\n      isRangeEqual(domSelection.getRangeAt(0), newDomRange)\n    ) {\n      return\n    }\n\n    // Otherwise the DOM selection is out of sync, so update it.\n    const el = ReactEditor.toDOMNode(editor, editor)\n    state.isUpdatingSelection = true\n    domSelection.removeAllRanges()\n\n    if (newDomRange) {\n      domSelection.addRange(newDomRange!)\n      const leafEl = newDomRange.startContainer.parentElement!\n      scrollIntoView(leafEl, { scrollMode: 'if-needed' })\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        el.focus()\n      }\n\n      state.isUpdatingSelection = false\n    })\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (\n      event: Event & {\n        data: string | null\n        dataTransfer: DataTransfer | null\n        getTargetRanges(): DOMStaticRange[]\n        inputType: string\n        isComposing: boolean\n      }\n    ) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        const { selection } = editor\n        const { inputType: type } = event\n        const data = event.dataTransfer || event.data || undefined\n\n        // These two types occur while a user is composing text and can't be\n        // cancelled. Let them through and wait for the composition to end.\n        if (\n          type === 'insertCompositionText' ||\n          type === 'deleteCompositionText'\n        ) {\n          return\n        }\n\n        event.preventDefault()\n\n        // COMPAT: For the deleting forward/backward input types we don't want\n        // to change the selection because it is the range that will be deleted,\n        // and those commands determine that for themselves.\n        if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n          const [targetRange] = event.getTargetRanges()\n\n          if (targetRange) {\n            const range = ReactEditor.toSlateRange(editor, targetRange)\n\n            if (!selection || !Range.equals(selection, range)) {\n              Transforms.select(editor, range)\n            }\n          }\n        }\n\n        // COMPAT: If the selection is expanded, even if the command seems like\n        // a delete forward/backward command it should delete the selection.\n        if (\n          selection &&\n          Range.isExpanded(selection) &&\n          type.startsWith('delete')\n        ) {\n          Editor.deleteFragment(editor)\n          return\n        }\n\n        switch (type) {\n          case 'deleteByComposition':\n          case 'deleteByCut':\n          case 'deleteByDrag': {\n            Editor.deleteFragment(editor)\n            break\n          }\n\n          case 'deleteContent':\n          case 'deleteContentForward': {\n            Editor.deleteForward(editor)\n            break\n          }\n\n          case 'deleteContentBackward': {\n            Editor.deleteBackward(editor)\n            break\n          }\n\n          case 'deleteEntireSoftLine': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineForward': {\n            Editor.deleteForward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineForward': {\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteWordBackward': {\n            Editor.deleteBackward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'deleteWordForward': {\n            Editor.deleteForward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'insertLineBreak':\n          case 'insertParagraph': {\n            Editor.insertBreak(editor)\n            break\n          }\n\n          case 'insertFromComposition':\n          case 'insertFromDrop':\n          case 'insertFromPaste':\n          case 'insertFromYank':\n          case 'insertReplacementText':\n          case 'insertText': {\n            if (data instanceof DataTransfer) {\n              ReactEditor.insertData(editor, data)\n            } else if (typeof data === 'string') {\n              Editor.insertText(editor, data)\n            }\n\n            break\n          }\n        }\n      }\n    },\n    []\n  )\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    debounce(() => {\n      if (!readOnly && !state.isComposing && !state.isUpdatingSelection) {\n        const { activeElement } = window.document\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const domSelection = window.getSelection()\n        const domRange =\n          domSelection &&\n          domSelection.rangeCount > 0 &&\n          domSelection.getRangeAt(0)\n\n        if (activeElement === el) {\n          state.latestElement = activeElement\n          IS_FOCUSED.set(editor, true)\n        } else {\n          IS_FOCUSED.delete(editor)\n        }\n\n        if (\n          domRange &&\n          hasEditableTarget(editor, domRange.startContainer) &&\n          hasEditableTarget(editor, domRange.endContainer)\n        ) {\n          const range = ReactEditor.toSlateRange(editor, domRange)\n          Transforms.select(editor, range)\n        } else {\n          Transforms.deselect(editor)\n        }\n      }\n    }, 100),\n    []\n  )\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === ''\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <Component\n        // COMPAT: The Grammarly Chrome extension works by changing the DOM\n        // out from under `contenteditable` elements, which leads to weird\n        // behaviors so we have to disable it like editor. (2017/04/24)\n        data-gramm={false}\n        role={readOnly ? undefined : 'textbox'}\n        {...attributes}\n        // COMPAT: Firefox doesn't support the `beforeinput` event, so we'd\n        // have to use hacks to make these replacement-based features work.\n        spellCheck={IS_FIREFOX ? undefined : attributes.spellCheck}\n        autoCorrect={IS_FIREFOX ? undefined : attributes.autoCorrect}\n        autoCapitalize={IS_FIREFOX ? undefined : attributes.autoCapitalize}\n        data-slate-editor\n        data-slate-node=\"value\"\n        contentEditable={readOnly ? undefined : true}\n        suppressContentEditableWarning\n        ref={ref}\n        style={{\n          // Prevent the default outline styles.\n          outline: 'none',\n          // Preserve adjacent whitespace and new lines.\n          whiteSpace: 'pre-wrap',\n          // Allow words to break if they are too long.\n          wordWrap: 'break-word',\n          // Allow for passed-in styles to override anything.\n          ...style,\n        }}\n        onBeforeInput={useCallback(\n          (event: React.SyntheticEvent) => {\n            // COMPAT: Firefox doesn't support the `beforeinput` event, so we\n            // fall back to React's leaky polyfill instead just for it. It\n            // only works for the `insertText` input type.\n            if (IS_FIREFOX && !readOnly) {\n              event.preventDefault()\n              const text = (event as any).data as string\n              Editor.insertText(editor, text)\n            }\n          },\n          [readOnly]\n        )}\n        onBlur={useCallback(\n          (event: React.FocusEvent<HTMLDivElement>) => {\n            if (\n              readOnly ||\n              state.isUpdatingSelection ||\n              !hasEditableTarget(editor, event.target) ||\n              isEventHandled(event, attributes.onBlur)\n            ) {\n              return\n            }\n\n            // COMPAT: If the current `activeElement` is still the previous\n            // one, this is due to the window being blurred when the tab\n            // itself becomes unfocused, so we want to abort early to allow to\n            // editor to stay focused when the tab becomes focused again.\n            if (state.latestElement === window.document.activeElement) {\n              return\n            }\n\n            const { relatedTarget } = event\n            const el = ReactEditor.toDOMNode(editor, editor)\n\n            // COMPAT: The event should be ignored if the focus is returning\n            // to the editor from an embedded editable element (eg. an <input>\n            // element inside a void node).\n            if (relatedTarget === el) {\n              return\n            }\n\n            // COMPAT: The event should be ignored if the focus is moving from\n            // the editor to inside a void node's spacer element.\n            if (\n              isDOMElement(relatedTarget) &&\n              relatedTarget.hasAttribute('data-slate-spacer')\n            ) {\n              return\n            }\n\n            // COMPAT: The event should be ignored if the focus is moving to a\n            // non- editable section of an element that isn't a void node (eg.\n            // a list item of the check list example).\n            if (\n              relatedTarget != null &&\n              isDOMNode(relatedTarget) &&\n              ReactEditor.hasDOMNode(editor, relatedTarget)\n            ) {\n              const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n              if (Element.isElement(node) && !editor.isVoid(node)) {\n                return\n              }\n            }\n\n            IS_FOCUSED.delete(editor)\n          },\n          [readOnly, attributes.onBlur]\n        )}\n        onClick={useCallback(\n          (event: React.MouseEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              hasTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onClick) &&\n              isDOMNode(event.target)\n            ) {\n              const node = ReactEditor.toSlateNode(editor, event.target)\n              const path = ReactEditor.findPath(editor, node)\n              const start = Editor.start(editor, path)\n\n              if (Editor.void(editor, { at: start })) {\n                const range = Editor.range(editor, start)\n                Transforms.select(editor, range)\n              }\n            }\n          },\n          [readOnly, attributes.onClick]\n        )}\n        onCompositionEnd={useCallback(\n          (event: React.CompositionEvent<HTMLDivElement>) => {\n            if (\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCompositionEnd)\n            ) {\n              state.isComposing = false\n\n              // COMPAT: In Chrome, `beforeinput` events for compositions\n              // aren't correct and never fire the \"insertFromComposition\"\n              // type that we need. So instead, insert whenever a composition\n              // ends since it will already have been committed to the DOM.\n              if (!IS_SAFARI && !IS_FIREFOX && event.data) {\n                Editor.insertText(editor, event.data)\n              }\n            }\n          },\n          [attributes.onCompositionEnd]\n        )}\n        onCompositionStart={useCallback(\n          (event: React.CompositionEvent<HTMLDivElement>) => {\n            if (\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCompositionStart)\n            ) {\n              state.isComposing = true\n            }\n          },\n          [attributes.onCompositionStart]\n        )}\n        onCopy={useCallback(\n          (event: React.ClipboardEvent<HTMLDivElement>) => {\n            if (\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCopy)\n            ) {\n              event.preventDefault()\n              setFragmentData(event.clipboardData, editor)\n            }\n          },\n          [attributes.onCopy]\n        )}\n        onCut={useCallback(\n          (event: React.ClipboardEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCut)\n            ) {\n              event.preventDefault()\n              setFragmentData(event.clipboardData, editor)\n              const { selection } = editor\n\n              if (selection && Range.isExpanded(selection)) {\n                Editor.deleteFragment(editor)\n              }\n            }\n          },\n          [readOnly, attributes.onCut]\n        )}\n        onDragOver={useCallback(\n          (event: React.DragEvent<HTMLDivElement>) => {\n            if (\n              hasTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onDragOver)\n            ) {\n              // Only when the target is void, call `preventDefault` to signal\n              // that drops are allowed. Editable content is droppable by\n              // default, and calling `preventDefault` hides the cursor.\n              const node = ReactEditor.toSlateNode(editor, event.target)\n\n              if (Editor.isVoid(editor, node)) {\n                event.preventDefault()\n              }\n            }\n          },\n          [attributes.onDragOver]\n        )}\n        onDragStart={useCallback(\n          (event: React.DragEvent<HTMLDivElement>) => {\n            if (\n              hasTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onDragStart)\n            ) {\n              const node = ReactEditor.toSlateNode(editor, event.target)\n              const path = ReactEditor.findPath(editor, node)\n              const voidMatch = Editor.void(editor, { at: path })\n\n              // If starting a drag on a void node, make sure it is selected\n              // so that it shows up in the selection's fragment.\n              if (voidMatch) {\n                const range = Editor.range(editor, path)\n                Transforms.select(editor, range)\n              }\n\n              setFragmentData(event.dataTransfer, editor)\n            }\n          },\n          [attributes.onDragStart]\n        )}\n        onDrop={useCallback(\n          (event: React.DragEvent<HTMLDivElement>) => {\n            if (\n              hasTarget(editor, event.target) &&\n              !readOnly &&\n              !isEventHandled(event, attributes.onDrop)\n            ) {\n              // COMPAT: Firefox doesn't fire `beforeinput` events at all, and\n              // Chromium browsers don't properly fire them for files being\n              // dropped into a `contenteditable`. (2019/11/26)\n              // https://bugs.chromium.org/p/chromium/issues/detail?id=1028668\n              if (\n                IS_FIREFOX ||\n                (!IS_SAFARI && event.dataTransfer.files.length > 0)\n              ) {\n                event.preventDefault()\n                const range = ReactEditor.findEventRange(editor, event)\n                const data = event.dataTransfer\n                Transforms.select(editor, range)\n                ReactEditor.insertData(editor, data)\n              }\n            }\n          },\n          [readOnly, attributes.onDrop]\n        )}\n        onFocus={useCallback(\n          (event: React.FocusEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              !state.isUpdatingSelection &&\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onFocus)\n            ) {\n              const el = ReactEditor.toDOMNode(editor, editor)\n              state.latestElement = window.document.activeElement\n\n              // COMPAT: If the editor has nested editable elements, the focus\n              // can go to them. In Firefox, this must be prevented because it\n              // results in issues with keyboard navigation. (2017/03/30)\n              if (IS_FIREFOX && event.target !== el) {\n                el.focus()\n                return\n              }\n\n              IS_FOCUSED.set(editor, true)\n            }\n          },\n          [readOnly, attributes.onFocus]\n        )}\n        onKeyDown={useCallback(\n          (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onKeyDown)\n            ) {\n              const { nativeEvent } = event\n              const { selection } = editor\n\n              // COMPAT: Since we prevent the default behavior on\n              // `beforeinput` events, the browser doesn't think there's ever\n              // any history stack to undo or redo, so we have to manage these\n              // hotkeys ourselves. (2019/11/06)\n              if (Hotkeys.isRedo(nativeEvent)) {\n                event.preventDefault()\n\n                if (editor.redo) {\n                  editor.redo()\n                }\n\n                return\n              }\n\n              if (Hotkeys.isUndo(nativeEvent)) {\n                event.preventDefault()\n\n                if (editor.undo) {\n                  editor.undo()\n                }\n\n                return\n              }\n\n              // COMPAT: Certain browsers don't handle the selection updates\n              // properly. In Chrome, the selection isn't properly extended.\n              // And in Firefox, the selection isn't properly collapsed.\n              // (2017/10/17)\n              if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'line', reverse: true })\n                return\n              }\n\n              if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'line' })\n                return\n              }\n\n              if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, {\n                  unit: 'line',\n                  edge: 'focus',\n                  reverse: true,\n                })\n                return\n              }\n\n              if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                return\n              }\n\n              // COMPAT: If a void node is selected, or a zero-width text node\n              // adjacent to an inline is selected, we need to handle these\n              // hotkeys manually because browsers won't be able to skip over\n              // the void node with the zero-width space not being an empty\n              // string.\n              if (Hotkeys.isMoveBackward(nativeEvent)) {\n                event.preventDefault()\n\n                if (selection && Range.isCollapsed(selection)) {\n                  Transforms.move(editor, { reverse: true })\n                } else {\n                  Transforms.collapse(editor, { edge: 'start' })\n                }\n\n                return\n              }\n\n              if (Hotkeys.isMoveForward(nativeEvent)) {\n                event.preventDefault()\n\n                if (selection && Range.isCollapsed(selection)) {\n                  Transforms.move(editor)\n                } else {\n                  Transforms.collapse(editor, { edge: 'end' })\n                }\n\n                return\n              }\n\n              if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'word', reverse: true })\n                return\n              }\n\n              if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'word' })\n                return\n              }\n\n              // COMPAT: Firefox doesn't support the `beforeinput` event, so we\n              // fall back to guessing at the input intention for hotkeys.\n              // COMPAT: In iOS, some of these hotkeys are handled in the\n              if (IS_FIREFOX) {\n                // We don't have a core behavior for these, but they change the\n                // DOM if we don't prevent them, so we have to.\n                if (\n                  Hotkeys.isBold(nativeEvent) ||\n                  Hotkeys.isItalic(nativeEvent) ||\n                  Hotkeys.isTransposeCharacter(nativeEvent)\n                ) {\n                  event.preventDefault()\n                  return\n                }\n\n                if (Hotkeys.isSplitBlock(nativeEvent)) {\n                  event.preventDefault()\n                  Editor.insertBreak(editor)\n                  return\n                }\n\n                if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteBackward(editor)\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteForward(editor)\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteBackward(editor, { unit: 'line' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteForward(editor, { unit: 'line' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteBackward(editor, { unit: 'word' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteForward(editor, { unit: 'word' })\n                  }\n\n                  return\n                }\n              }\n            }\n          },\n          [readOnly, attributes.onKeyDown]\n        )}\n        onPaste={useCallback(\n          (event: React.ClipboardEvent<HTMLDivElement>) => {\n            // COMPAT: Firefox doesn't support the `beforeinput` event, so we\n            // fall back to React's `onPaste` here instead.\n            if (\n              IS_FIREFOX &&\n              !readOnly &&\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onPaste)\n            ) {\n              event.preventDefault()\n              ReactEditor.insertData(editor, event.clipboardData)\n            }\n          },\n          [readOnly, attributes.onPaste]\n        )}\n      >\n        <Children\n          decorate={decorate}\n          decorations={decorations}\n          node={editor}\n          renderElement={renderElement}\n          renderLeaf={renderLeaf}\n          selection={editor.selection}\n        />\n      </Component>\n    </ReadOnlyContext.Provider>\n  )\n}\n\n/**\n * A default memoized decorate function.\n */\n\nconst defaultDecorate = () => []\n\n/**\n * Check if two DOM range objects are equal.\n */\n\nconst isRangeEqual = (a: DOMRange, b: DOMRange) => {\n  return (\n    (a.startContainer === b.startContainer &&\n      a.startOffset === b.startOffset &&\n      a.endContainer === b.endContainer &&\n      a.endOffset === b.endOffset) ||\n    (a.startContainer === b.endContainer &&\n      a.startOffset === b.endOffset &&\n      a.endContainer === b.startContainer &&\n      a.endOffset === b.startOffset)\n  )\n}\n\n/**\n * Check if the target is in the editor.\n */\n\nconst hasTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target)\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\n\nconst hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return (\n    isDOMNode(target) &&\n    ReactEditor.hasDOMNode(editor, target, { editable: true })\n  )\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nconst isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>\n>(\n  event: EventType,\n  handler?: (event: EventType) => void\n) => {\n  if (!handler) {\n    return false\n  }\n\n  handler(event)\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nconst isDOMEventHandled = (event: Event, handler?: (event: Event) => void) => {\n  if (!handler) {\n    return false\n  }\n\n  handler(event)\n  return event.defaultPrevented\n}\n\n/**\n * Set the currently selected fragment to the clipboard.\n */\n\nconst setFragmentData = (\n  dataTransfer: DataTransfer,\n  editor: ReactEditor\n): void => {\n  const { selection } = editor\n\n  if (!selection) {\n    return\n  }\n\n  const [start, end] = Range.edges(selection)\n  const startVoid = Editor.void(editor, { at: start.path })\n  const endVoid = Editor.void(editor, { at: end.path })\n\n  if (Range.isCollapsed(selection) && !startVoid) {\n    return\n  }\n\n  // Create a fake selection so that we can add a Base64-encoded copy of the\n  // fragment to the HTML, to decode on future pastes.\n  const domRange = ReactEditor.toDOMRange(editor, selection)\n  let contents = domRange.cloneContents()\n  let attach = contents.childNodes[0] as HTMLElement\n\n  // Make sure attach is non-empty, since empty nodes will not get copied.\n  contents.childNodes.forEach(node => {\n    if (node.textContent && node.textContent.trim() !== '') {\n      attach = node as HTMLElement\n    }\n  })\n\n  // COMPAT: If the end node is a void node, we need to move the end of the\n  // range from the void node's spacer span, to the end of the void node's\n  // content, since the spacer is before void's content in the DOM.\n  if (endVoid) {\n    const [voidNode] = endVoid\n    const r = domRange.cloneRange()\n    const domNode = ReactEditor.toDOMNode(editor, voidNode)\n    r.setEndAfter(domNode)\n    contents = r.cloneContents()\n  }\n\n  // COMPAT: If the start node is a void node, we need to attach the encoded\n  // fragment to the void node's content node instead of the spacer, because\n  // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n  // most browsers. (2018/04/27)\n  if (startVoid) {\n    attach = contents.querySelector('[data-slate-spacer]')! as HTMLElement\n  }\n\n  // Remove any zero-width space spans from the cloned DOM so that they don't\n  // show up elsewhere when pasted.\n  Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n    zw => {\n      const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n      zw.textContent = isNewline ? '\\n' : ''\n    }\n  )\n\n  // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n  // in the HTML, and can be used for intra-Slate pasting. If it's a text\n  // node, wrap it in a `<span>` so we have something to set an attribute on.\n  if (isDOMText(attach)) {\n    const span = document.createElement('span')\n    // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n    // then leading and trailing spaces will be ignored. (2017/09/21)\n    span.style.whiteSpace = 'pre'\n    span.appendChild(attach)\n    contents.appendChild(span)\n    attach = span\n  }\n\n  const fragment = Node.fragment(editor, selection)\n  const string = JSON.stringify(fragment)\n  const encoded = window.btoa(encodeURIComponent(string))\n  attach.setAttribute('data-slate-fragment', encoded)\n  dataTransfer.setData('application/x-slate-fragment', encoded)\n\n  // Add the content to a <div> so that we can get its inner HTML.\n  const div = document.createElement('div')\n  div.appendChild(contents)\n  dataTransfer.setData('text/html', div.innerHTML)\n  dataTransfer.setData('text/plain', getPlainText(div))\n}\n\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n */\n\nconst getPlainText = (domNode: DOMNode) => {\n  let text = ''\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode)\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display')\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n'\n    }\n  }\n\n  return text\n}\n","/**\n * An auto-incrementing identifier for keys.\n */\n\nlet n = 0\n\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */\n\nexport class Key {\n  id: string\n\n  constructor() {\n    this.id = `${n++}`\n  }\n}\n","import { Editor, Node, Path, Point, Range, Transforms } from 'slate'\n\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  KEY_TO_ELEMENT,\n  NODE_TO_INDEX,\n  NODE_TO_KEY,\n  NODE_TO_PARENT,\n} from '../utils/weak-maps'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMPoint,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n  isDOMElement,\n  normalizeDOMPoint,\n} from '../utils/dom'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends Editor {\n  insertData: (data: DataTransfer) => void\n}\n\nexport const ReactEditor = {\n  /**\n   * Find a key for a Slate node.\n   */\n\n  findKey(editor: ReactEditor, node: Node): Key {\n    let key = NODE_TO_KEY.get(node)\n\n    if (!key) {\n      key = new Key()\n      NODE_TO_KEY.set(node, key)\n    }\n\n    return key\n  },\n\n  /**\n   * Find the path of Slate node.\n   */\n\n  findPath(editor: ReactEditor, node: Node): Path {\n    const path: Path = []\n    let child = node\n\n    while (true) {\n      const parent = NODE_TO_PARENT.get(child)\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path\n        } else {\n          break\n        }\n      }\n\n      const i = NODE_TO_INDEX.get(child)\n\n      if (i == null) {\n        break\n      }\n\n      path.unshift(i)\n      child = parent\n    }\n\n    throw new Error(\n      `Unable to find the path for Slate node: ${JSON.stringify(node)}`\n    )\n  },\n\n  /**\n   * Check if the editor is focused.\n   */\n\n  isFocused(editor: ReactEditor): boolean {\n    return !!IS_FOCUSED.get(editor)\n  },\n\n  /**\n   * Check if the editor is in read-only mode.\n   */\n\n  isReadOnly(editor: ReactEditor): boolean {\n    return !!IS_READ_ONLY.get(editor)\n  },\n\n  /**\n   * Blur the editor.\n   */\n\n  blur(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    IS_FOCUSED.set(editor, false)\n\n    if (window.document.activeElement === el) {\n      el.blur()\n    }\n  },\n\n  /**\n   * Focus the editor.\n   */\n\n  focus(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    IS_FOCUSED.set(editor, true)\n\n    if (window.document.activeElement !== el) {\n      el.focus({ preventScroll: true })\n    }\n  },\n\n  /**\n   * Deselect the editor.\n   */\n\n  deselect(editor: ReactEditor): void {\n    const { selection } = editor\n    const domSelection = window.getSelection()\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges()\n    }\n\n    if (selection) {\n      Transforms.deselect(editor)\n    }\n  },\n\n  /**\n   * Check if a DOM node is within the editor.\n   */\n\n  hasDOMNode(\n    editor: ReactEditor,\n    target: DOMNode,\n    options: { editable?: boolean } = {}\n  ): boolean {\n    const { editable = false } = options\n    const el = ReactEditor.toDOMNode(editor, editor)\n    let element\n\n    // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n    try {\n      element = isDOMElement(target) ? target : target.parentElement\n    } catch (err) {\n      if (\n        !err.message.includes('Permission denied to access property \"nodeType\"')\n      ) {\n        throw err\n      }\n    }\n\n    if (!element) {\n      return false\n    }\n\n    return (\n      element.closest(`[data-slate-editor]`) === el &&\n      (!editable || el.isContentEditable)\n    )\n  },\n\n  /**\n   * Insert data from a `DataTransfer` into the editor.\n   */\n\n  insertData(editor: ReactEditor, data: DataTransfer): void {\n    editor.insertData(data)\n  },\n\n  /**\n   * Find the native DOM element from a Slate node.\n   */\n\n  toDOMNode(editor: ReactEditor, node: Node): HTMLElement {\n    const domNode = Editor.isEditor(node)\n      ? EDITOR_TO_ELEMENT.get(editor)\n      : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node))\n\n    if (!domNode) {\n      throw new Error(\n        `Cannot resolve a DOM node from Slate node: ${JSON.stringify(node)}`\n      )\n    }\n\n    return domNode\n  },\n\n  /**\n   * Find a native DOM selection point from a Slate point.\n   */\n\n  toDOMPoint(editor: ReactEditor, point: Point): DOMPoint {\n    const [node] = Editor.node(editor, point.path)\n    const el = ReactEditor.toDOMNode(editor, node)\n    let domPoint: DOMPoint | undefined\n\n    // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n    if (Editor.void(editor, { at: point })) {\n      point = { path: point.path, offset: 0 }\n    }\n\n    // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n    const selector = `[data-slate-string], [data-slate-zero-width]`\n    const texts = Array.from(el.querySelectorAll(selector))\n    let start = 0\n\n    for (const text of texts) {\n      const domNode = text.childNodes[0] as HTMLElement\n\n      if (domNode == null || domNode.textContent == null) {\n        continue\n      }\n\n      const { length } = domNode.textContent\n      const attr = text.getAttribute('data-slate-length')\n      const trueLength = attr == null ? length : parseInt(attr, 10)\n      const end = start + trueLength\n\n      if (point.offset <= end) {\n        const offset = Math.min(length, Math.max(0, point.offset - start))\n        domPoint = [domNode, offset]\n        break\n      }\n\n      start = end\n    }\n\n    if (!domPoint) {\n      throw new Error(\n        `Cannot resolve a DOM point from Slate point: ${JSON.stringify(point)}`\n      )\n    }\n\n    return domPoint\n  },\n\n  /**\n   * Find a native DOM range from a Slate `range`.\n   */\n\n  toDOMRange(editor: ReactEditor, range: Range): DOMRange {\n    const { anchor, focus } = range\n    const domAnchor = ReactEditor.toDOMPoint(editor, anchor)\n    const domFocus = Range.isCollapsed(range)\n      ? domAnchor\n      : ReactEditor.toDOMPoint(editor, focus)\n\n    const domRange = window.document.createRange()\n    const start = Range.isBackward(range) ? domFocus : domAnchor\n    const end = Range.isBackward(range) ? domAnchor : domFocus\n    domRange.setStart(start[0], start[1])\n    domRange.setEnd(end[0], end[1])\n    return domRange\n  },\n\n  /**\n   * Find a Slate node from a native DOM `element`.\n   */\n\n  toSlateNode(editor: ReactEditor, domNode: DOMNode): Node {\n    let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(`[data-slate-node]`)\n    }\n\n    const node = domEl ? ELEMENT_TO_NODE.get(domEl as HTMLElement) : null\n\n    if (!node) {\n      throw new Error(`Cannot resolve a Slate node from DOM node: ${domEl}`)\n    }\n\n    return node\n  },\n\n  /**\n   * Get the target range from a DOM `event`.\n   */\n\n  findEventRange(editor: ReactEditor, event: any): Range {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent\n    }\n\n    const { clientX: x, clientY: y, target } = event\n\n    if (x == null || y == null) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    const node = ReactEditor.toSlateNode(editor, event.target)\n    const path = ReactEditor.findPath(editor, node)\n\n    // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n    if (Editor.isVoid(editor, node)) {\n      const rect = target.getBoundingClientRect()\n      const isPrev = editor.isInline(node)\n        ? x - rect.left < rect.left + rect.width - x\n        : y - rect.top < rect.top + rect.height - y\n\n      const edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end',\n      })\n      const point = isPrev\n        ? Editor.before(editor, edge)\n        : Editor.after(editor, edge)\n\n      if (point) {\n        const range = Editor.range(editor, point)\n        return range\n      }\n    }\n\n    // Else resolve a range from the caret position where the drop occured.\n    let domRange\n    const { document } = window\n\n    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y)\n    } else {\n      const position = document.caretPositionFromPoint(x, y)\n\n      if (position) {\n        domRange = document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    // Resolve a Slate range from the DOM range.\n    const range = ReactEditor.toSlateRange(editor, domRange)\n    return range\n  },\n\n  /**\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\n   */\n\n  toSlatePoint(editor: ReactEditor, domPoint: DOMPoint): Point {\n    const [nearestNode, nearestOffset] = normalizeDOMPoint(domPoint)\n    const parentNode = nearestNode.parentNode as DOMElement\n    let textNode: DOMElement | null = null\n    let offset = 0\n\n    if (parentNode) {\n      const voidNode = parentNode.closest('[data-slate-void=\"true\"]')\n      let leafNode = parentNode.closest('[data-slate-leaf]')\n      let domNode: DOMElement | null = null\n\n      // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n        const range = window.document.createRange()\n        range.setStart(textNode, 0)\n        range.setEnd(nearestNode, nearestOffset)\n        const contents = range.cloneContents()\n        const removals = [\n          ...contents.querySelectorAll('[data-slate-zero-width]'),\n          ...contents.querySelectorAll('[contenteditable=false]'),\n        ]\n\n        removals.forEach(el => {\n          el!.parentNode!.removeChild(el)\n        })\n\n        // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n        offset = contents.textContent!.length\n        domNode = textNode\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n\n        leafNode = voidNode.querySelector('[data-slate-leaf]')!\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n        domNode = leafNode\n        offset = domNode.textContent!.length\n      }\n\n      // COMPAT: If the parent node is a Slate zero-width space, editor is\n      // because the text node should have no characters. However, during IME\n      // composition the ASCII characters will be prepended to the zero-width\n      // space, so subtract 1 from the offset to account for the zero-width\n      // space character.\n      if (\n        domNode &&\n        offset === domNode.textContent!.length &&\n        parentNode.hasAttribute('data-slate-zero-width')\n      ) {\n        offset--\n      }\n    }\n\n    if (!textNode) {\n      throw new Error(\n        `Cannot resolve a Slate point from DOM point: ${domPoint}`\n      )\n    }\n\n    // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n    const slateNode = ReactEditor.toSlateNode(editor, textNode!)\n    const path = ReactEditor.findPath(editor, slateNode)\n    return { path, offset }\n  },\n\n  /**\n   * Find a Slate range from a DOM range or selection.\n   */\n\n  toSlateRange(\n    editor: ReactEditor,\n    domRange: DOMRange | DOMStaticRange | DOMSelection\n  ): Range {\n    const el =\n      domRange instanceof Selection\n        ? domRange.anchorNode\n        : domRange.startContainer\n    let anchorNode\n    let anchorOffset\n    let focusNode\n    let focusOffset\n    let isCollapsed\n\n    if (el) {\n      if (domRange instanceof Selection) {\n        anchorNode = domRange.anchorNode\n        anchorOffset = domRange.anchorOffset\n        focusNode = domRange.focusNode\n        focusOffset = domRange.focusOffset\n        isCollapsed = domRange.isCollapsed\n      } else {\n        anchorNode = domRange.startContainer\n        anchorOffset = domRange.startOffset\n        focusNode = domRange.endContainer\n        focusOffset = domRange.endOffset\n        isCollapsed = domRange.collapsed\n      }\n    }\n\n    if (\n      anchorNode == null ||\n      focusNode == null ||\n      anchorOffset == null ||\n      focusOffset == null\n    ) {\n      throw new Error(\n        `Cannot resolve a Slate range from DOM range: ${domRange}`\n      )\n    }\n\n    const anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset])\n    const focus = isCollapsed\n      ? anchor\n      : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset])\n\n    return { anchor, focus }\n  },\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import React, { useMemo, useState, useCallback } from 'react'\nimport { Node } from 'slate'\n\nimport { ReactEditor } from '../plugin/react-editor'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { EditorContext } from '../hooks/use-editor'\nimport { SlateContext } from '../hooks/use-slate'\nimport { EDITOR_TO_ON_CHANGE } from '../utils/weak-maps'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  value: Node[]\n  children: React.ReactNode\n  onChange: (value: Node[]) => void\n  [key: string]: any\n}) => {\n  const { editor, children, onChange, value, ...rest } = props\n  const [key, setKey] = useState(0)\n  const context: [ReactEditor] = useMemo(() => {\n    editor.children = value\n    Object.assign(editor, rest)\n    return [editor]\n  }, [key, value, ...Object.values(rest)])\n\n  const onContextChange = useCallback(() => {\n    onChange(editor.children)\n    setKey(key + 1)\n  }, [key, onChange])\n\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n  return (\n    <SlateContext.Provider value={context}>\n      <EditorContext.Provider value={editor}>\n        <FocusedContext.Provider value={ReactEditor.isFocused(editor)}>\n          {children}\n        </FocusedContext.Provider>\n      </EditorContext.Provider>\n    </SlateContext.Provider>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport { Editor, Node, Path, Operation, Transforms } from 'slate'\n\nimport { ReactEditor } from './react-editor'\nimport { Key } from '../utils/key'\nimport { EDITOR_TO_ON_CHANGE, NODE_TO_KEY } from '../utils/weak-maps'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n */\n\nexport const withReact = <T extends Editor>(editor: T) => {\n  const e = editor as T & ReactEditor\n  const { apply, onChange } = e\n\n  e.apply = (op: Operation) => {\n    const matches: [Path, Key][] = []\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node': {\n        for (const [node, path] of Editor.levels(e, { at: op.path })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.parent(op.path),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        // TODO\n        break\n      }\n    }\n\n    apply(op)\n\n    for (const [path, key] of matches) {\n      const [node] = Editor.node(e, path)\n      NODE_TO_KEY.set(node, key)\n    }\n  }\n\n  e.insertData = (data: DataTransfer) => {\n    const fragment = data.getData('application/x-slate-fragment')\n\n    if (fragment) {\n      const decoded = decodeURIComponent(window.atob(fragment))\n      const parsed = JSON.parse(decoded) as Node[]\n      Transforms.insertFragment(e, parsed)\n      return\n    }\n\n    const text = data.getData('text/plain')\n\n    if (text) {\n      const lines = text.split('\\n')\n      let split = false\n\n      for (const line of lines) {\n        if (split) {\n          Transforms.splitNodes(e)\n        }\n\n        Transforms.insertText(e, line)\n        split = true\n      }\n    }\n  }\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      const onContextChange = EDITOR_TO_ON_CHANGE.get(e)\n\n      if (onContextChange) {\n        onContextChange()\n      }\n\n      onChange()\n    })\n  }\n\n  return e\n}\n"]},"metadata":{},"sourceType":"module"}