{"ast":null,"code":"import _classCallCheck from\"/Users/connordavidson/Desktop/gcloud-apollo/apollo_blog_backend/apollo-blog/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/connordavidson/Desktop/gcloud-apollo/apollo_blog_backend/apollo-blog/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/connordavidson/Desktop/gcloud-apollo/apollo_blog_backend/apollo-blog/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/connordavidson/Desktop/gcloud-apollo/apollo_blog_backend/apollo-blog/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/connordavidson/Desktop/gcloud-apollo/apollo_blog_backend/apollo-blog/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import axios from\"axios\";import{Button,Popover,OverlayTrigger,Badge,Row,Col,Form}from'react-bootstrap';import{CheckCircle}from'react-bootstrap-icons';import LoaderSpinner from'./LoaderSpinner';import\"../../content/css/App.css\";import{create_email_url}from\"../../backend-urls.js\";//text is what gets passed in. should be used like : <RichText text={example_rich_text} />\nvar RegisterEmail=/*#__PURE__*/function(_React$Component){_inherits(RegisterEmail,_React$Component);function RegisterEmail(){var _getPrototypeOf2;var _this;_classCallCheck(this,RegisterEmail);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(RegisterEmail)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={error:null,//stores the error that comes from the backend\nloading:false,//to determine if the page is loading\nemail:\"\",//stores the email from the \"add email\" widget\nemail_submitted:null//stores the response value after a user submits their email\n};_this.handlePostEmail=function(){_this.setState({loading:true,error:null});var data=new FormData();data.append('email',_this.state.email);axios.post(create_email_url,data).then(function(response){_this.setState({email_submitted:true,loading:false});}).catch(function(error){_this.setState({error:error.response.data,loading:false});});};_this.handleEmailValidated=function(){var email=_this.state.email;//these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\nvar email_length_more_than_four=email.length>5;var email_contains_at=email.includes(\"@\");var email_contains_period=email.includes(\".\");return!(email_length_more_than_four&&email_contains_at&&email_contains_period);};_this.handleEmail=function(text){_this.setState({email:text.target.value});};_this.handleClosePopover=function(){alert('blurred');document.getElementById(\"emailBadge\").click();};return _this;}_createClass(RegisterEmail,[{key:\"render\",value:function render(){var _this$state=this.state,error=_this$state.error,loading=_this$state.loading,email_submitted=_this$state.email_submitted;//for email popover\nvar email_popover=React.createElement(Popover,{id:\"popover-basic\",className:\"max-width-800px\"// onBlur={() => {\n//   document.getElementById(\"emailBadge\").click()\n// }}\n},React.createElement(Popover.Title,{as:\"h3\"},\"Email Updates\"),React.createElement(Popover.Content,null,React.createElement(Row,null,React.createElement(Col,null,React.createElement(Form.Control,{// style={{width:'200px'}}\nclassName:\"width-250px\",type:\"email\",placeholder:\"Enter email\",onChange:this.handleEmail}),error&&React.createElement(\"small\",{style:{color:'red'}},error)),React.createElement(Col,null,email_submitted?React.createElement(CheckCircle,{className:\"text-success font-size-2-5em\"}):loading?React.createElement(Button,{disabled:true,variant:\"primary\",type:\"submit\",onClick:this.handlePostEmail,className:\"float-right\"},React.createElement(LoaderSpinner,null)):React.createElement(Button,{disabled:this.handleEmailValidated(),variant:\"primary\",type:\"submit\",onClick:this.handlePostEmail,className:\"float-right\"},\"Submit\")))));return React.createElement(OverlayTrigger,{trigger:\"click\",placement:this.props.direction,overlay:email_popover},React.createElement(Badge,{id:\"emailBadge\",className:\"font-size-10px\",style:{cursor:'pointer'}},this.props.text));}}]);return RegisterEmail;}(React.Component);export default RegisterEmail;","map":{"version":3,"sources":["/Users/connordavidson/Desktop/gcloud-apollo/apollo_blog_backend/apollo-blog/src/containers/Misc/RegisterEmail.js"],"names":["React","axios","Button","Popover","OverlayTrigger","Badge","Row","Col","Form","CheckCircle","LoaderSpinner","create_email_url","RegisterEmail","state","error","loading","email","email_submitted","handlePostEmail","setState","data","FormData","append","post","then","response","catch","handleEmailValidated","email_length_more_than_four","length","email_contains_at","includes","email_contains_period","handleEmail","text","target","value","handleClosePopover","alert","document","getElementById","click","email_popover","color","props","direction","cursor","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\n\nimport {\n  Button,\n  Popover ,\n  OverlayTrigger ,\n  Badge ,\n  Row ,\n  Col ,\n  Form,\n\n} from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\nimport LoaderSpinner from './LoaderSpinner'\n\nimport \"../../content/css/App.css\";\nimport {\n  create_email_url ,\n\n} from \"../../backend-urls.js\" ;\n\n\n//text is what gets passed in. should be used like : <RichText text={example_rich_text} />\nclass RegisterEmail extends React.Component {\n\n  state = {\n    error: null , //stores the error that comes from the backend\n    loading : false , //to determine if the page is loading\n    email: \"\" , //stores the email from the \"add email\" widget\n    email_submitted : null , //stores the response value after a user submits their email\n\n  }\n\n   handlePostEmail = () => {\n    this.setState({\n      loading: true ,\n      error: null ,\n\n    })\n\n    var data = new FormData();\n    data.append('email' , this.state.email) ;\n\n    axios\n      .post(create_email_url , data)\n      .then(response => {\n        this.setState({\n          email_submitted : true ,\n          loading:false ,\n        })\n      })\n      .catch(error => {\n        this.setState({\n          error: error.response.data  ,\n          loading: false ,\n        })\n      })\n  }\n\n   handleEmailValidated = () => {\n    var email = this.state.email\n    //these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\n    var email_length_more_than_four = email.length > 5\n    var email_contains_at = email.includes(\"@\")\n    var email_contains_period = email.includes(\".\")\n\n    return !(email_length_more_than_four && email_contains_at && email_contains_period )\n  }\n\n   handleEmail = (text) => {\n    this.setState({\n      email: text.target.value\n    });\n  }\n\n  handleClosePopover = () => {\n    alert('blurred')\n    document.getElementById(\"emailBadge\").click()\n  }\n\n  render(){\n\n    const {\n      error ,\n      loading ,\n      email_submitted ,\n    } = this.state\n\n      //for email popover\n      const email_popover = (\n        <Popover\n          id=\"popover-basic\"\n          className=\"max-width-800px\"\n          // onBlur={() => {\n          //   document.getElementById(\"emailBadge\").click()\n          // }}\n        >\n          <Popover.Title as=\"h3\">Email Updates</Popover.Title>\n          <Popover.Content >\n              <Row >\n                <Col>\n                  <Form.Control\n                    // style={{width:'200px'}}\n                    className=\"width-250px\"\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    onChange={this.handleEmail}\n                  />\n                  {\n                    error&&\n                      <small style={{color:'red'}} >{error}</small>\n                    }\n                </Col>\n                <Col>\n                  {\n                    email_submitted ?\n                      <CheckCircle className=\"text-success font-size-2-5em\" />\n                    :\n                      loading ?\n                          <Button\n                            disabled={true}\n                            variant=\"primary\"\n                            type=\"submit\"\n                            onClick={this.handlePostEmail }\n                            className=\"float-right\"\n                          >\n                            <LoaderSpinner />\n                          </Button>\n                      :\n                        <Button\n                          disabled={this.handleEmailValidated()}\n                          variant=\"primary\"\n                          type=\"submit\"\n                          onClick={this.handlePostEmail }\n                          className=\"float-right\"\n                        >\n                          Submit\n                        </Button>\n                  }\n                </Col>\n              </Row>\n          </Popover.Content>\n        </Popover>\n      )\n\n\n\n    return (\n        <OverlayTrigger\n          trigger='click'\n          placement={this.props.direction}\n          overlay={email_popover}\n\n        >\n          <Badge\n            id=\"emailBadge\"\n            className=\"font-size-10px\"\n            style={{cursor: 'pointer' , }}\n          >\n            {this.props.text}\n          </Badge>\n        </OverlayTrigger>\n    )\n\n  }\n\n}\n\nexport default RegisterEmail ;\n"]},"metadata":{},"sourceType":"module"}