{"ast":null,"code":"var _jsxFileName = \"/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/CommentSection.js\";\nimport React from 'react';\nimport axios from \"axios\";\nimport { Container, Card, Button, Col, Form, Alert, Badge } from 'react-bootstrap'; //for ReactQuill (comment box). found at https://github.com/zenoamaro/react-quill\n\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { connect } from \"react-redux\";\nimport LoaderSpinner from './LoaderSpinner';\nimport RichText from './RichText';\nimport \"../../content/css/App.css\";\nimport { create_comment_url, create_upvote_url } from \"../../backend-urls.js\";\n\nclass CommentSection extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null,\n      //stores any error that comes back from the database\n      loading: null,\n      //set to determine if the page is loading\n      commenter_name: \"\",\n      //stores the anme of the person that is writing the comment\n      comment_body: \"\",\n      //stores the body of the comment\n      comment_submitted: false //determines if the comment has been submitted.\n\n    };\n\n    this.handleCommentBody = text => {\n      this.setState({\n        comment_body: text\n      });\n    };\n\n    this.handleCommenterName = text => {\n      this.setState({\n        commenter_name: text.target.value\n      });\n    };\n\n    this.handlePostComment = () => {\n      this.setState({\n        loading: true\n      });\n      var comment_data = new FormData();\n      comment_data.append('body', this.state.comment_body);\n      comment_data.append('author', this.state.commenter_name);\n      comment_data.append('article', this.props.article_id);\n      axios.post(create_comment_url, comment_data).then(response => {\n        console.log('comment submitted');\n        this.setState({\n          loading: false,\n          commenter_name: \"\",\n          comment_body: \"\",\n          comment_submitted: true\n        });\n      }).catch(error => {\n        this.setState({\n          error: error.response.data,\n          loading: false\n        });\n      });\n    };\n\n    this.handleValidateComment = () => {\n      return !(this.state.comment_body.length > 1 && this.state.commenter_name.length > 1);\n    };\n\n    this.handleUpvote = (id, user_id, comment) => {\n      // console.log(comment.upvotes[0]['user'])\n      if (comment.upvotes.some(uv => uv['user'] === user_id)) {\n        console.log(\"user already liked this\");\n      } // console.log('id: ' + id)\n\n\n      var upvote_data = new FormData();\n      upvote_data.append('comment', id);\n      upvote_data.append('user', user_id); // axios\n      //   .post(create_upvote_url , upvote_data)\n      //   .then(response => {\n      //     console.log('upvote created for ' + upvote_data.comment)\n      //\n      //   })\n      //   .catch(error => {\n      //     console.log('error creating upvote: ' + upvote_data.comment)\n      //   })\n    };\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      comment_body,\n      commenter_name,\n      comment_submitted\n    } = this.state;\n    const {\n      comments,\n      user_id\n    } = this.props;\n    console.log(comments);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"tahoma-font\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Article Comments\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, comments ? comments.map(comment => React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, comment.author), React.createElement(Card.Subtitle, {\n      className: \"mb-2 text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, new Date(comment.created_date).toDateString()), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(RichText, {\n      text: comment.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(Badge, {\n      onClick: () => this.handleUpvote(comment.id, user_id, comment),\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Upvote\"), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, comment.upvotes.length), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(Badge, {\n      onClick: (id, e) => this.handleUpvote(comment.id),\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Downvote\"))), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }))) : React.createElement(Alert, {\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"There are no comments yet! Leave one below\"), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Add a Comment\")), React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Name:\"), React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Enter Name\",\n      value: commenter_name,\n      onChange: this.handleCommenterName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Comment:\"), React.createElement(ReactQuill, {\n      placeholder: \"Start Writing...\",\n      onChange: this.handleCommentBody,\n      value: comment_body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }))))), loading ? React.createElement(Button, {\n      disabled: true,\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(LoaderSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })) : React.createElement(Button, {\n      onClick: this.handlePostComment,\n      disabled: this.handleValidateComment(),\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Add Comment\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), comment_submitted && React.createElement(Alert, {\n      variant: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"You successfully added a comment!\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    authenticated: state.auth.token !== null,\n    user_id: state.auth.user_id\n  };\n};\n\nexport default connect(mapStateToProps)(CommentSection);","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/CommentSection.js"],"names":["React","axios","Container","Card","Button","Col","Form","Alert","Badge","ReactQuill","connect","LoaderSpinner","RichText","create_comment_url","create_upvote_url","CommentSection","Component","state","error","loading","commenter_name","comment_body","comment_submitted","handleCommentBody","text","setState","handleCommenterName","target","value","handlePostComment","comment_data","FormData","append","props","article_id","post","then","response","console","log","catch","data","handleValidateComment","length","handleUpvote","id","user_id","comment","upvotes","some","uv","upvote_data","render","comments","map","author","Date","created_date","toDateString","body","cursor","e","mapStateToProps","auth","authenticated","token"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\n\nimport {\n  Container ,\n  Card ,\n  Button,\n  Col ,\n  Form,\n  Alert ,\n  Badge ,\n\n} from 'react-bootstrap';\n//for ReactQuill (comment box). found at https://github.com/zenoamaro/react-quill\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { connect } from \"react-redux\";\n\n\n\nimport LoaderSpinner from './LoaderSpinner'\nimport RichText from './RichText'\nimport \"../../content/css/App.css\";\nimport {\n  create_comment_url ,\n  create_upvote_url ,\n\n} from \"../../backend-urls.js\" ;\n\n\n\nclass CommentSection extends React.Component {\n\n\n  state = {\n    error : null , //stores any error that comes back from the database\n    loading : null , //set to determine if the page is loading\n    commenter_name : \"\" , //stores the anme of the person that is writing the comment\n    comment_body : \"\" , //stores the body of the comment\n    comment_submitted : false , //determines if the comment has been submitted.\n  }\n\n\n\n  handleCommentBody = (text) => {\n    this.setState({\n      comment_body : text\n    })\n  }\n\n  handleCommenterName = (text) => {\n    this.setState({\n      commenter_name : text.target.value\n    })\n  }\n\n  handlePostComment = () => {\n    this.setState({\n      loading: true\n    })\n    var comment_data = new FormData() ;\n    comment_data.append('body' , this.state.comment_body )\n    comment_data.append('author' , this.state.commenter_name)\n    comment_data.append('article', this.props.article_id )\n\n    axios\n      .post(create_comment_url , comment_data)\n      .then(response => {\n        console.log('comment submitted')\n        this.setState({\n          loading: false ,\n          commenter_name : \"\" ,\n          comment_body : \"\" ,\n          comment_submitted : true ,\n\n        })\n      })\n      .catch(error => {\n        this.setState({\n          error: error.response.data ,\n          loading: false ,\n        })\n      })\n  }\n\n  handleValidateComment = () => {\n    return !(this.state.comment_body.length > 1 && this.state.commenter_name.length > 1)\n  }\n\n\n\n\n  handleUpvote = ( id , user_id , comment ) => {\n    // console.log(comment.upvotes[0]['user'])\n    if(comment.upvotes.some(uv => uv['user'] === user_id) ){\n      console.log(\"user already liked this\")\n    }\n    // console.log('id: ' + id)\n    var upvote_data = new FormData() ;\n    upvote_data.append('comment' , id )\n    upvote_data.append('user' , user_id)\n    // axios\n    //   .post(create_upvote_url , upvote_data)\n    //   .then(response => {\n    //     console.log('upvote created for ' + upvote_data.comment)\n    //\n    //   })\n    //   .catch(error => {\n    //     console.log('error creating upvote: ' + upvote_data.comment)\n    //   })\n  }\n\n\n\n\n  render(){\n\n    const {\n      loading ,\n      error ,\n      comment_body ,\n      commenter_name ,\n      comment_submitted ,\n\n    } = this.state\n\n    const {\n      comments ,\n      user_id ,\n\n    } = this.props\n\n    console.log(comments);\n\n    return(\n        <div >\n          <h1 className=\"tahoma-font\">Article Comments</h1>\n          <hr />\n          <Container>\n                {\n                  comments  ?\n                    comments.map(comment => (\n                      <React.Fragment>\n                        <Card >\n                          <Card.Body>\n                            <Card.Title>{comment.author}</Card.Title>\n                            <Card.Subtitle className=\"mb-2 text-muted\">\n                              {\n                                 new Date(comment.created_date).toDateString()\n                              }\n                            </Card.Subtitle>\n                            <Card.Text>\n                              <RichText text={comment.body} />\n                            </Card.Text>\n\n                            <Badge\n                              onClick={() => this.handleUpvote(comment.id , user_id , comment)}\n                              style={{cursor: 'pointer' , }}\n                            >\n                              Upvote\n                            </Badge>\n                            <Badge>{comment.upvotes.length}</Badge>\n                            <br/>\n                            <Badge\n                              onClick={(id ,e) => this.handleUpvote(comment.id)}\n                              style={{cursor: 'pointer' , }}\n                            >\n                              Downvote\n                            </Badge>\n\n                          </Card.Body>\n                        </Card>\n                        <hr />\n                      </React.Fragment>\n                      )\n                    )\n                  :\n                    <Alert variant=\"dark\">There are no comments yet! Leave one below</Alert>\n\n                }\n\n\n\n            <Card >\n              <Card.Header><h3>Add a Comment</h3></Card.Header>\n              <Card.Body>\n                <Card.Text>\n                  <Form>\n                    <Form.Row>\n                      <Form.Label>Name:</Form.Label>\n                      <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter Name\"\n                        value={commenter_name}\n                        onChange={this.handleCommenterName}\n                      />\n                    </Form.Row>\n                    <br/>\n                    <Form.Row>\n                      <Col>\n                        <Form.Label>Comment:</Form.Label>\n\n                          <ReactQuill\n                            placeholder=\"Start Writing...\"\n                            onChange={this.handleCommentBody}\n                            value={comment_body}\n                          />\n                      </Col>\n                    </Form.Row>\n                  </Form>\n                </Card.Text>\n                {\n                  loading ?\n                      <Button\n                        disabled={true}\n                        variant=\"primary\"\n                      >\n                        <LoaderSpinner />\n                      </Button>\n                  :\n\n                    <Button\n                      onClick={this.handlePostComment}\n                      disabled={this.handleValidateComment()}\n                      variant=\"primary\"\n                    >\n                      Add Comment\n                    </Button>\n                }\n              </Card.Body>\n            </Card>\n            <br />\n            {\n              comment_submitted &&\n                <Alert variant=\"success\">You successfully added a comment!</Alert>\n            }\n\n\n\n\n\n          </Container>\n\n        </div>\n\n    )\n  }\n\n\n}\n\n\n\nconst mapStateToProps = state => {\n  return {\n    loading : state.auth.loading ,\n    error : state.auth.error ,\n    authenticated : state.auth.token !== null ,\n    user_id : state.auth.user_id\n  };\n};\n\n\n\nexport default\n  connect(\n    mapStateToProps ,\n\n  )(CommentSection) ;\n"]},"metadata":{},"sourceType":"module"}