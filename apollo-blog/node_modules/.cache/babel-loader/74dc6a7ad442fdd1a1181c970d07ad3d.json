{"ast":null,"code":"/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nimport uuid from 'uuid';\nimport { generateIds } from '../helpers';\nexport var CELL_UPDATE_CONTENT = 'CELL_UPDATE_CONTENT';\nexport var CELL_UPDATE_IS_DRAFT = 'CELL_UPDATE_IS_DRAFT';\nexport var CELL_UPDATE_LAYOUT = 'CELL_UPDATE_LAYOUT';\nexport var CELL_REMOVE = 'CELL_REMOVE';\nexport var CELL_RESIZE = 'CELL_RESIZE';\nexport var CELL_FOCUS = 'CELL_FOCUS';\nexport var CELL_BLUR = 'CELL_BLUR';\nexport var CELL_BLUR_ALL = 'CELL_BLUR_ALL';\nexport var CELL_FOCUS_PREV = 'CELL_FOCUS_PREV';\nexport var CELL_FOCUS_NEXT = 'CELL_FOCUS_NEXT';\nexport var CELL_CREATE_FALLBACK = 'CELL_CREATE_FALLBACK';\n/**\n * An action creator for updating a cell's content data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellContent(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\n\nexport var updateCellContent = function (id) {\n  return function (state) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    return {\n      type: CELL_UPDATE_CONTENT,\n      ts: new Date(),\n      id: id,\n      state: state\n    };\n  };\n};\n/**\n * An action creator for setting the cell's isDraft property\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellContent(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\n\nexport var updateCellIsDraft = function (id, isDraft) {\n  if (isDraft === void 0) {\n    isDraft = false;\n  }\n\n  return {\n    type: CELL_UPDATE_IS_DRAFT,\n    ts: new Date(),\n    id: id,\n    isDraft: isDraft\n  };\n};\n/**\n * An action creator for updating a cell's layout data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellLayout(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\n\nexport var updateCellLayout = function (id) {\n  return function (state) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    return {\n      type: CELL_UPDATE_LAYOUT,\n      ts: new Date(),\n      id: id,\n      state: state\n    };\n  };\n};\n/**\n * An action creator for removing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(removeCell(cell.id, ['1', '2', '3', '4', ...]))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {string} ids An object of IDs for new cells that might be created.\n * @return {Action}\n */\n\nexport var removeCell = function (id, ids) {\n  if (ids === void 0) {\n    ids = null;\n  }\n\n  return {\n    type: CELL_REMOVE,\n    ts: new Date(),\n    id: id,\n    ids: ids ? ids : generateIds()\n  };\n};\n/**\n * An action creator for resizing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(resizeCell(cell.id)(size))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {number} size The cell's new size.\n * @return {Function}\n */\n\nexport var resizeCell = function (id) {\n  return function (size) {\n    if (size === void 0) {\n      size = 1;\n    }\n\n    return {\n      type: CELL_RESIZE,\n      ts: new Date(),\n      id: id,\n      size: size\n    };\n  };\n};\n/**\n * Dispatch to focus a cell.\n */\n\nexport var focusCell = function (id) {\n  return function (_a) {\n    var source = (_a === void 0 ? {} : _a).source;\n    return {\n      type: CELL_FOCUS,\n      ts: new Date(),\n      id: id,\n      source: source\n    };\n  };\n};\n/**\n * Dispatch to focus a cell.\n */\n\nexport var focusNextCell = function (id) {\n  return function () {\n    return {\n      type: CELL_FOCUS_NEXT,\n      ts: new Date(),\n      id: id\n    };\n  };\n};\n/**\n * Dispatch to focus a cell.\n */\n\nexport var focusPreviousCell = function (id) {\n  return function () {\n    return {\n      type: CELL_FOCUS_PREV,\n      ts: new Date(),\n      id: id\n    };\n  };\n};\n/**\n * Dispatch to blur a cell.\n */\n\nexport var blurCell = function (id) {\n  return function () {\n    return {\n      type: CELL_BLUR,\n      ts: new Date(),\n      id: id\n    };\n  };\n};\n/**\n * Dispatch to blur all cells. For example when clicking on document body.\n */\n\nexport var blurAllCells = function () {\n  return {\n    type: CELL_BLUR_ALL,\n    ts: new Date()\n  };\n};\n/**\n * Creates a fallback cell, usually done when an editable is empty.\n */\n\nexport var createFallbackCell = function ( // tslint:disable-next-line:no-any\nfallback, editable) {\n  return {\n    type: CELL_CREATE_FALLBACK,\n    ts: new Date(),\n    editable: editable,\n    ids: {\n      cell: uuid.v4()\n    },\n    fallback: fallback\n  };\n};\nexport var coreActions = {\n  createFallbackCell: createFallbackCell,\n  blurAllCells: blurAllCells,\n  blurCell: blurCell,\n  focusPreviousCell: focusPreviousCell,\n  focusNextCell: focusNextCell,\n  focusCell: focusCell,\n  resizeCell: resizeCell,\n  removeCell: removeCell,\n  updateCellLayout: updateCellLayout,\n  updateCellContent: updateCellContent,\n  updateCellIsDraft: updateCellIsDraft\n};","map":{"version":3,"sources":["../../../src/actions/cell/core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nimport uuid from 'uuid';\nimport { generateIds } from '../helpers';\nexport var CELL_UPDATE_CONTENT = 'CELL_UPDATE_CONTENT';\nexport var CELL_UPDATE_IS_DRAFT = 'CELL_UPDATE_IS_DRAFT';\nexport var CELL_UPDATE_LAYOUT = 'CELL_UPDATE_LAYOUT';\nexport var CELL_REMOVE = 'CELL_REMOVE';\nexport var CELL_RESIZE = 'CELL_RESIZE';\nexport var CELL_FOCUS = 'CELL_FOCUS';\nexport var CELL_BLUR = 'CELL_BLUR';\nexport var CELL_BLUR_ALL = 'CELL_BLUR_ALL';\nexport var CELL_FOCUS_PREV = 'CELL_FOCUS_PREV';\nexport var CELL_FOCUS_NEXT = 'CELL_FOCUS_NEXT';\nexport var CELL_CREATE_FALLBACK = 'CELL_CREATE_FALLBACK';\n/**\n * An action creator for updating a cell's content data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellContent(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\nexport var updateCellContent = function (id) { return function (state) {\n    if (state === void 0) { state = {}; }\n    return ({\n        type: CELL_UPDATE_CONTENT,\n        ts: new Date(),\n        id: id,\n        state: state,\n    });\n}; };\n/**\n * An action creator for setting the cell's isDraft property\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellContent(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\nexport var updateCellIsDraft = function (id, isDraft) {\n    if (isDraft === void 0) { isDraft = false; }\n    return ({\n        type: CELL_UPDATE_IS_DRAFT,\n        ts: new Date(),\n        id: id,\n        isDraft: isDraft,\n    });\n};\n/**\n * An action creator for updating a cell's layout data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellLayout(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\nexport var updateCellLayout = function (id) { return function (state) {\n    if (state === void 0) { state = {}; }\n    return ({\n        type: CELL_UPDATE_LAYOUT,\n        ts: new Date(),\n        id: id,\n        state: state,\n    });\n}; };\n/**\n * An action creator for removing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(removeCell(cell.id, ['1', '2', '3', '4', ...]))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {string} ids An object of IDs for new cells that might be created.\n * @return {Action}\n */\nexport var removeCell = function (id, ids) {\n    if (ids === void 0) { ids = null; }\n    return ({\n        type: CELL_REMOVE,\n        ts: new Date(),\n        id: id,\n        ids: ids ? ids : generateIds(),\n    });\n};\n/**\n * An action creator for resizing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(resizeCell(cell.id)(size))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {number} size The cell's new size.\n * @return {Function}\n */\nexport var resizeCell = function (id) { return function (size) {\n    if (size === void 0) { size = 1; }\n    return ({\n        type: CELL_RESIZE,\n        ts: new Date(),\n        id: id,\n        size: size,\n    });\n}; };\n/**\n * Dispatch to focus a cell.\n */\nexport var focusCell = function (id) { return function (_a) {\n    var source = (_a === void 0 ? {} : _a).source;\n    return ({\n        type: CELL_FOCUS,\n        ts: new Date(),\n        id: id,\n        source: source,\n    });\n}; };\n/**\n * Dispatch to focus a cell.\n */\nexport var focusNextCell = function (id) { return function () { return ({\n    type: CELL_FOCUS_NEXT,\n    ts: new Date(),\n    id: id,\n}); }; };\n/**\n * Dispatch to focus a cell.\n */\nexport var focusPreviousCell = function (id) { return function () { return ({\n    type: CELL_FOCUS_PREV,\n    ts: new Date(),\n    id: id,\n}); }; };\n/**\n * Dispatch to blur a cell.\n */\nexport var blurCell = function (id) { return function () { return ({\n    type: CELL_BLUR,\n    ts: new Date(),\n    id: id,\n}); }; };\n/**\n * Dispatch to blur all cells. For example when clicking on document body.\n */\nexport var blurAllCells = function () { return ({\n    type: CELL_BLUR_ALL,\n    ts: new Date(),\n}); };\n/**\n * Creates a fallback cell, usually done when an editable is empty.\n */\nexport var createFallbackCell = function (\n// tslint:disable-next-line:no-any\nfallback, editable) { return ({\n    type: CELL_CREATE_FALLBACK,\n    ts: new Date(),\n    editable: editable,\n    ids: {\n        cell: uuid.v4(),\n    },\n    fallback: fallback,\n}); };\nexport var coreActions = {\n    createFallbackCell: createFallbackCell,\n    blurAllCells: blurAllCells,\n    blurCell: blurCell,\n    focusPreviousCell: focusPreviousCell,\n    focusNextCell: focusNextCell,\n    focusCell: focusCell,\n    resizeCell: resizeCell,\n    removeCell: removeCell,\n    updateCellLayout: updateCellLayout,\n    updateCellContent: updateCellContent,\n    updateCellIsDraft: updateCellIsDraft,\n};\n//# sourceMappingURL=core.js.map"]},"metadata":{},"sourceType":"module"}