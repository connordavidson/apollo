{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { blurAllCells } from '../actions/cell';\nimport { editMode } from '../actions/display';\nimport { connect } from '../reduxConnect'; // this might break in future, but its better than nothing\n// tslint:disable-next-line:no-any\n\nfunction findReactElement(node) {\n  for (var key in node) {\n    if (key.startsWith('__reactInternalInstance$')) {\n      return node[key];\n    }\n  }\n\n  return null;\n} // we go up the reac-tree. This works even through portals, which would not be possible with traversing the dom tree!\n\n\nvar isInSameTree = function (parent, child) {\n  if (!parent) {\n    return false;\n  }\n\n  var element = findReactElement(child);\n\n  while (element) {\n    if (element.stateNode === parent) {\n      return true;\n    }\n\n    element = element.return;\n  }\n\n  return false;\n};\n\nvar useBlurAll = function (blurAllCellsDispatch, setEditMode) {\n  var ref = React.useRef();\n  useEffect(function () {\n    if (!ref.current) {\n      return null;\n    }\n\n    if (!document && !document.body) {\n      return null;\n    }\n\n    var onMouseDown = function (e) {\n      if (!isInSameTree(ref.current, e.target)) {\n        blurAllCellsDispatch(); // always set us in edit mode when blurred\n\n        setEditMode();\n      }\n    };\n\n    document.body.addEventListener('mousedown', onMouseDown);\n    return function () {\n      document.body.removeEventListener('mousedown', onMouseDown);\n    };\n  }, [ref.current]);\n  return ref;\n};\n\nvar mapDispatchToProps = {\n  blurAllCells: blurAllCells,\n  editMode: editMode\n};\nvar BlurGate = connect(null, mapDispatchToProps)(function (props) {\n  var ref = useBlurAll(props.blurAllCells, props.editMode);\n  return React.createElement(\"div\", {\n    ref: ref\n  }, props.children);\n});\nexport default BlurGate;","map":{"version":3,"sources":["../../src/components/BlurGate.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,SAAhB,QAAiC,OAAjC;AACA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,OAAT,QAAwB,iBAAxB,C,CAEA;AACA;;AACA,SAAS,gBAAT,CAA0B,IAA1B,EAAmC;AACjC,OAAK,IAAI,GAAT,IAAgB,IAAhB,EAAsB;AACpB,QAAI,GAAG,CAAC,UAAJ,CAAe,0BAAf,CAAJ,EAAgD;AAC9C,aAAO,IAAI,CAAC,GAAD,CAAX;AACD;AACF;;AACD,SAAO,IAAP;AACD,C,CAED;;;AACA,IAAM,YAAY,GAAG,UAAC,MAAD,EAAS,KAAT,EAAc;AACjC,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,KAAP;AACD;;AACD,MAAI,OAAO,GAAG,gBAAgB,CAAC,KAAD,CAA9B;;AACA,SAAO,OAAP,EAAgB;AACd,QAAI,OAAO,CAAC,SAAR,KAAsB,MAA1B,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,IAAA,OAAO,GAAG,OAAO,CAAC,MAAlB;AACD;;AACD,SAAO,KAAP;AACD,CAbD;;AAeA,IAAM,UAAU,GAAG,UAAC,oBAAD,EAAuB,WAAvB,EAAkC;AACnD,MAAM,GAAG,GAAG,KAAK,CAAC,MAAN,EAAZ;AACA,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,GAAG,CAAC,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,QAAI,CAAC,QAAD,IAAa,CAAC,QAAQ,CAAC,IAA3B,EAAiC;AAC/B,aAAO,IAAP;AACD;;AAED,QAAM,WAAW,GAAG,UAAA,CAAA,EAAC;AACnB,UAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAL,EAAc,CAAC,CAAC,MAAhB,CAAjB,EAA0C;AACxC,QAAA,oBAAoB,GADoB,CAExC;;AACA,QAAA,WAAW;AACZ;AACF,KAND;;AAOA,IAAA,QAAQ,CAAC,IAAT,CAAc,gBAAd,CAA+B,WAA/B,EAA4C,WAA5C;AACA,WAAO,YAAA;AACL,MAAA,QAAQ,CAAC,IAAT,CAAc,mBAAd,CAAkC,WAAlC,EAA+C,WAA/C;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAAC,GAAG,CAAC,OAAL,CAnBM,CAAT;AAoBA,SAAO,GAAP;AACD,CAvBD;;AAyBA,IAAM,kBAAkB,GAAG;AAAE,EAAA,YAAY,EAAA,YAAd;AAAgB,EAAA,QAAQ,EAAA;AAAxB,CAA3B;AAEA,IAAM,QAAQ,GAAG,OAAO,CACtB,IADsB,EAEtB,kBAFsB,CAAP,CAGf,UAAA,KAAA,EAAK;AACL,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,YAAP,EAAqB,KAAK,CAAC,QAA3B,CAAtB;AACA,SAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAE;AAAV,GAAA,EAAgB,KAAK,CAAC,QAAtB,CAAP;AACD,CANgB,CAAjB;AAQA,eAAe,QAAf","sourceRoot":"","sourcesContent":["import React, { useEffect } from 'react';\nimport { blurAllCells } from '../actions/cell';\nimport { editMode } from '../actions/display';\nimport { connect } from '../reduxConnect';\n// this might break in future, but its better than nothing\n// tslint:disable-next-line:no-any\nfunction findReactElement(node) {\n    for (var key in node) {\n        if (key.startsWith('__reactInternalInstance$')) {\n            return node[key];\n        }\n    }\n    return null;\n}\n// we go up the reac-tree. This works even through portals, which would not be possible with traversing the dom tree!\nvar isInSameTree = function (parent, child) {\n    if (!parent) {\n        return false;\n    }\n    var element = findReactElement(child);\n    while (element) {\n        if (element.stateNode === parent) {\n            return true;\n        }\n        element = element.return;\n    }\n    return false;\n};\nvar useBlurAll = function (blurAllCellsDispatch, setEditMode) {\n    var ref = React.useRef();\n    useEffect(function () {\n        if (!ref.current) {\n            return null;\n        }\n        if (!document && !document.body) {\n            return null;\n        }\n        var onMouseDown = function (e) {\n            if (!isInSameTree(ref.current, e.target)) {\n                blurAllCellsDispatch();\n                // always set us in edit mode when blurred\n                setEditMode();\n            }\n        };\n        document.body.addEventListener('mousedown', onMouseDown);\n        return function () {\n            document.body.removeEventListener('mousedown', onMouseDown);\n        };\n    }, [ref.current]);\n    return ref;\n};\nvar mapDispatchToProps = { blurAllCells: blurAllCells, editMode: editMode };\nvar BlurGate = connect(null, mapDispatchToProps)(function (props) {\n    var ref = useBlurAll(props.blurAllCells, props.editMode);\n    return React.createElement(\"div\", { ref: ref }, props.children);\n});\nexport default BlurGate;\n//# sourceMappingURL=BlurGate.js.map"]},"metadata":{},"sourceType":"module"}