{"ast":null,"code":"var _jsxFileName = \"/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/RegisterEmail.js\";\nimport React from 'react';\nimport axios from \"axios\";\nimport { Button, Popover, OverlayTrigger, Badge, Row, Col, Form, Spinner } from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\nimport LoaderSpinner from './LoaderSpinner';\nimport \"../../content/css/App.css\";\nimport { create_email_url } from \"../../backend-urls.js\"; //text is what gets passed in. should be used like : <RichText text={example_rich_text} />\n\nclass RegisterEmail extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null,\n      //stores the error that comes from the backend\n      loading: false,\n      //to determine if the page is loading\n      email: \"\",\n      //stores the email from the \"add email\" widget\n      email_submitted: null //stores the response value after a user submits their email\n\n    };\n  }\n\n  //  handlePostEmail = () => {\n  //   this.setState({\n  //     loading: true ,\n  //     error: null ,\n  //\n  //   })\n  //\n  //   var data = new FormData();\n  //   data.append('email' , this.state.email) ;\n  //\n  //   axios\n  //     .post(create_email_url , data)\n  //     .then(response => {\n  //       this.setState({\n  //         email_submitted : true ,\n  //         loading:false ,\n  //       })\n  //     })\n  //     .catch(error => {\n  //       this.setState({\n  //         error: error.response.data  ,\n  //         loading: false ,\n  //       })\n  //     })\n  // }\n  //  handleEmailValidated = () => {\n  //   var email = this.state.email\n  //   //these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\n  //   var email_length_more_than_four = email.length > 5\n  //   var email_contains_at = email.includes(\"@\")\n  //   var email_contains_period = email.includes(\".\")\n  //\n  //   return !(email_length_more_than_four && email_contains_at && email_contains_period )\n  // }\n  //\n  //  handleEmail = (text) => {\n  //   this.setState({\n  //     email: text.target.value\n  //   });\n  // }\n  render() {\n    const {\n      error,\n      loading // email ,\n      // email_submitted ,\n\n    } = this.state; //for email popover\n    // const email_popover = (\n    //   <Popover id=\"popover-basic\" className=\"max-width-800px\">\n    //     <Popover.Title as=\"h3\">Email Updates</Popover.Title>\n    //     <Popover.Content >\n    //         <Row >\n    //           <Col>\n    //             <Form.Control\n    //               // style={{width:'200px'}}\n    //               className=\"width-250px\"\n    //               type=\"email\"\n    //               placeholder=\"Enter email\"\n    //               onChange={this.handleEmail}\n    //             />\n    //             {\n    //               error&&\n    //                 <small style={{color:'red'}} >{error}</small>\n    //               }\n    //           </Col>\n    //           <Col>\n    //             {\n    //               email_submitted ?\n    //                 <CheckCircle className=\"text-success font-size-2-5em\" />\n    //               :\n    //                 loading ?\n    //                     <Button\n    //                       disabled={true}\n    //                       variant=\"primary\"\n    //                       type=\"submit\"\n    //                       onClick={this.handlePostEmail }\n    //                       className=\"float-right\"\n    //                     >\n    //\n    //                       <Spinner size=\"sm\" animation=\"border\" role=\"status\">\n    //                         <span className=\"sr-only\">Loading...</span>\n    //                       </Spinner>\n    //                     </Button>\n    //                 :\n    //                   <Button\n    //                     disabled={this.handleEmailValidated()}\n    //                     variant=\"primary\"\n    //                     type=\"submit\"\n    //                     onClick={this.handlePostEmail }\n    //                     className=\"float-right\"\n    //                   >\n    //                     Submit\n    //                   </Button>\n    //             }\n    //           </Col>\n    //         </Row>\n    //     </Popover.Content>\n    //   </Popover>\n    // )\n\n    return React.createElement(OverlayTrigger, {\n      trigger: \"click\",\n      placement: this.props.direction,\n      overlay: email_popover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Badge, {\n      className: \"font-size-10px\",\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.props.text));\n  }\n\n}\n\nexport default RegisterEmail;","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/RegisterEmail.js"],"names":["React","axios","Button","Popover","OverlayTrigger","Badge","Row","Col","Form","Spinner","CheckCircle","LoaderSpinner","create_email_url","RegisterEmail","Component","state","error","loading","email","email_submitted","render","props","direction","email_popover","cursor","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,MADF,EAEEC,OAFF,EAGEC,cAHF,EAIEC,KAJF,EAKEC,GALF,EAMEC,GANF,EAOEC,IAPF,EAQEC,OARF,QAUO,iBAVP;AAWA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,2BAAP;AACA,SACEC,gBADF,QAGO,uBAHP,C,CAMA;;AACA,MAAMC,aAAN,SAA4Bb,KAAK,CAACc,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAE1CC,KAF0C,GAElC;AACNC,MAAAA,KAAK,EAAE,IADD;AACQ;AACdC,MAAAA,OAAO,EAAG,KAFJ;AAEY;AAClBC,MAAAA,KAAK,EAAE,EAHD;AAGM;AACZC,MAAAA,eAAe,EAAG,IAJZ,CAImB;;AAJnB,KAFkC;AAAA;;AAU1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIAC,EAAAA,MAAM,GAAE;AAEN,UAAM;AACJJ,MAAAA,KADI;AAEJC,MAAAA,OAFI,CAGJ;AACA;;AAJI,QAKF,KAAKF,KALT,CAFM,CASJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIF,WACI,oBAAC,cAAD;AACE,MAAA,OAAO,EAAC,OADV;AAEE,MAAA,SAAS,EAAE,KAAKM,KAAL,CAAWC,SAFxB;AAGE,MAAA,OAAO,EAAEC,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,gBAAjB;AAAkC,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkE,KAAKH,KAAL,CAAWI,IAA7E,CALF,CADJ;AAUD;;AAjIyC;;AAqI5C,eAAeZ,aAAf","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\n\nimport {\n  Button,\n  Popover ,\n  OverlayTrigger ,\n  Badge ,\n  Row ,\n  Col ,\n  Form,\n  Spinner ,\n\n} from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\nimport LoaderSpinner from './LoaderSpinner'\n\nimport \"../../content/css/App.css\";\nimport {\n  create_email_url ,\n\n} from \"../../backend-urls.js\" ;\n\n\n//text is what gets passed in. should be used like : <RichText text={example_rich_text} />\nclass RegisterEmail extends React.Component {\n\n  state = {\n    error: null , //stores the error that comes from the backend\n    loading : false , //to determine if the page is loading\n    email: \"\" , //stores the email from the \"add email\" widget\n    email_submitted : null , //stores the response value after a user submits their email\n\n  }\n\n  //  handlePostEmail = () => {\n  //   this.setState({\n  //     loading: true ,\n  //     error: null ,\n  //\n  //   })\n  //\n  //   var data = new FormData();\n  //   data.append('email' , this.state.email) ;\n  //\n  //   axios\n  //     .post(create_email_url , data)\n  //     .then(response => {\n  //       this.setState({\n  //         email_submitted : true ,\n  //         loading:false ,\n  //       })\n  //     })\n  //     .catch(error => {\n  //       this.setState({\n  //         error: error.response.data  ,\n  //         loading: false ,\n  //       })\n  //     })\n  // }\n\n  //  handleEmailValidated = () => {\n  //   var email = this.state.email\n  //   //these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\n  //   var email_length_more_than_four = email.length > 5\n  //   var email_contains_at = email.includes(\"@\")\n  //   var email_contains_period = email.includes(\".\")\n  //\n  //   return !(email_length_more_than_four && email_contains_at && email_contains_period )\n  // }\n  //\n  //  handleEmail = (text) => {\n  //   this.setState({\n  //     email: text.target.value\n  //   });\n  // }\n\n\n\n  render(){\n\n    const {\n      error ,\n      loading ,\n      // email ,\n      // email_submitted ,\n    } = this.state\n\n      //for email popover\n      // const email_popover = (\n      //   <Popover id=\"popover-basic\" className=\"max-width-800px\">\n      //     <Popover.Title as=\"h3\">Email Updates</Popover.Title>\n      //     <Popover.Content >\n      //         <Row >\n      //           <Col>\n      //             <Form.Control\n      //               // style={{width:'200px'}}\n      //               className=\"width-250px\"\n      //               type=\"email\"\n      //               placeholder=\"Enter email\"\n      //               onChange={this.handleEmail}\n      //             />\n      //             {\n      //               error&&\n      //                 <small style={{color:'red'}} >{error}</small>\n      //               }\n      //           </Col>\n      //           <Col>\n      //             {\n      //               email_submitted ?\n      //                 <CheckCircle className=\"text-success font-size-2-5em\" />\n      //               :\n      //                 loading ?\n      //                     <Button\n      //                       disabled={true}\n      //                       variant=\"primary\"\n      //                       type=\"submit\"\n      //                       onClick={this.handlePostEmail }\n      //                       className=\"float-right\"\n      //                     >\n      //\n      //                       <Spinner size=\"sm\" animation=\"border\" role=\"status\">\n      //                         <span className=\"sr-only\">Loading...</span>\n      //                       </Spinner>\n      //                     </Button>\n      //                 :\n      //                   <Button\n      //                     disabled={this.handleEmailValidated()}\n      //                     variant=\"primary\"\n      //                     type=\"submit\"\n      //                     onClick={this.handlePostEmail }\n      //                     className=\"float-right\"\n      //                   >\n      //                     Submit\n      //                   </Button>\n      //             }\n      //           </Col>\n      //         </Row>\n      //     </Popover.Content>\n      //   </Popover>\n      // )\n\n\n\n    return (\n        <OverlayTrigger\n          trigger='click'\n          placement={this.props.direction}\n          overlay={email_popover}\n        >\n          <Badge className=\"font-size-10px\" style={{cursor: 'pointer' , }}>{this.props.text}</Badge>\n        </OverlayTrigger>\n    )\n\n  }\n\n}\n\nexport default RegisterEmail ;\n"]},"metadata":{},"sourceType":"module"}