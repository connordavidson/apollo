{"ast":null,"code":"import { createEmptyState, Editable, Editor, Provider } from '@react-page/core';\nimport EditorUI from '@react-page/ui';\nimport React, { useEffect, useRef } from 'react';\nimport StickyWrapper from './StickyWrapper';\nexport default (function (_a) {\n  var plugins = _a.plugins,\n      defaultPlugin = _a.defaultPlugin,\n      value = _a.value,\n      onChange = _a.onChange,\n      dndBackend = _a.dndBackend;\n  var editorRef = useRef({\n    editor: new Editor({\n      defaultPlugin: defaultPlugin,\n      plugins: plugins\n    }),\n    editorState: null\n  });\n  editorRef.current.editorState = value || createEmptyState(); // updating plugins is not yet supported, so we have an editor ref  that stays the same during lifetime of the editor\n\n  useEffect(function () {\n    editorRef.current.editor.trigger.editable.update(editorRef.current.editorState);\n  }, [editorRef.current.editorState !== value]);\n  var _b = editorRef.current,\n      editor = _b.editor,\n      editorState = _b.editorState;\n  return React.createElement(Provider, {\n    editor: editor,\n    dndBackend: dndBackend\n  }, React.createElement(StickyWrapper, null, function (stickyNess) {\n    return React.createElement(React.Fragment, null, React.createElement(Editable, {\n      id: editorState.id,\n      onChange: onChange\n    }), React.createElement(EditorUI, {\n      stickyNess: stickyNess\n    }));\n  }));\n});","map":{"version":3,"sources":["../../src/editor/EditableEditor.tsx"],"names":[],"mappings":"AAAA,SAAS,gBAAT,EAA2B,QAA3B,EAAqC,MAArC,EAA6C,QAA7C,QAA6D,kBAA7D;AACA,OAAO,QAAP,MAAqB,gBAArB;AACA,OAAO,KAAP,IAAgB,SAAhB,EAA2B,MAA3B,QAAyC,OAAzC;AACA,OAAO,aAAP,MAA0B,iBAA1B;AAEA,gBAAe,UAAC,EAAD,EAAwD;MAArD,OAAA,GAAA,EAAA,CAAA,O;MAAS,aAAA,GAAA,EAAA,CAAA,a;MAAe,KAAA,GAAA,EAAA,CAAA,K;MAAO,QAAA,GAAA,EAAA,CAAA,Q;MAAU,UAAA,GAAA,EAAA,CAAA,U;AACzD,MAAM,SAAS,GAAG,MAAM,CAAC;AACvB,IAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AAAE,MAAA,aAAa,EAAA,aAAf;AAAiB,MAAA,OAAO,EAAA;AAAxB,KAAX,CADe;AAEvB,IAAA,WAAW,EAAE;AAFU,GAAD,CAAxB;AAKA,EAAA,SAAS,CAAC,OAAV,CAAkB,WAAlB,GAAgC,KAAK,IAAI,gBAAgB,EAAzD,CANqE,CAOrE;;AACA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,SAAS,CAAC,OAAV,CAAkB,MAAlB,CAAyB,OAAzB,CAAiC,QAAjC,CAA0C,MAA1C,CACE,SAAS,CAAC,OAAV,CAAkB,WADpB;AAGD,GAJQ,EAIN,CAAC,SAAS,CAAC,OAAV,CAAkB,WAAlB,KAAkC,KAAnC,CAJM,CAAT;AAMM,MAAA,EAAA,GAAA,SAAA,CAAA,OAAA;AAAA,MAAE,MAAA,GAAA,EAAA,CAAA,MAAF;AAAA,MAAU,WAAA,GAAA,EAAA,CAAA,WAAV;AAEN,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,IAAA,MAAM,EAAE,MAAT;AAAiB,IAAA,UAAU,EAAE;AAA7B,GAAT,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,IAAd,EACG,UAAA,UAAA,EAAU;AAAI,WACb,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,MAAA,EAAE,EAAE,WAAW,CAAC,EAAjB;AAAqB,MAAA,QAAQ,EAAE;AAA/B,KAAT,CADF,EAEE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,MAAA,UAAU,EAHT;AAGF,KAAT,CAFF,CADa;AAKd,GANH,CADF,CADF;AAYD,CA5BD","sourceRoot":"","sourcesContent":["import { createEmptyState, Editable, Editor, Provider } from '@react-page/core';\nimport EditorUI from '@react-page/ui';\nimport React, { useEffect, useRef } from 'react';\nimport StickyWrapper from './StickyWrapper';\nexport default (function (_a) {\n    var plugins = _a.plugins, defaultPlugin = _a.defaultPlugin, value = _a.value, onChange = _a.onChange, dndBackend = _a.dndBackend;\n    var editorRef = useRef({\n        editor: new Editor({ defaultPlugin: defaultPlugin, plugins: plugins }),\n        editorState: null,\n    });\n    editorRef.current.editorState = value || createEmptyState();\n    // updating plugins is not yet supported, so we have an editor ref  that stays the same during lifetime of the editor\n    useEffect(function () {\n        editorRef.current.editor.trigger.editable.update(editorRef.current.editorState);\n    }, [editorRef.current.editorState !== value]);\n    var _b = editorRef.current, editor = _b.editor, editorState = _b.editorState;\n    return (React.createElement(Provider, { editor: editor, dndBackend: dndBackend },\n        React.createElement(StickyWrapper, null, function (stickyNess) { return (React.createElement(React.Fragment, null,\n            React.createElement(Editable, { id: editorState.id, onChange: onChange }),\n            React.createElement(EditorUI, { stickyNess: stickyNess }))); })));\n});\n//# sourceMappingURL=EditableEditor.js.map"]},"metadata":{},"sourceType":"module"}