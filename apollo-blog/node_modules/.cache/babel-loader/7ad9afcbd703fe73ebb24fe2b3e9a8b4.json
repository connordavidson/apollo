{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport { signup_url } from '../../backend-urls'; // import {\n//   mergeCartOnLogin,\n//   removeCartOnLogout,\n// } from \"./cart\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, username, staff) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username: username,\n    user_id: staff\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(signup_url, {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const staff = res.data.staff;\n      console.log('staff from auth: ' + staff);\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"staff\", staff);\n      localStorage.setItem(\"username\", username);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(token, username, staff));\n      dispatch(checkAuthTimeout(10000)); //merges the cart when the user logs in. mergeCartOnLogin is located in actions/cart.js\n      // dispatch( mergeCartOnLogin(token) )\n    }).catch(err => {\n      // console.log(err.response.data.non_field_errors)\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(\"http://127.0.0.1:8000/rest-auth/registration/\", {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(token, username, false));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n}; //added username to the authSuccess part and in the parameters of the function on 11/5/19\n\nexport const authCheckState = username => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    const username = localStorage.getItem(\"username\");\n    const staff = localStorage.getItem(\"staff\");\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token, username, staff));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    //removes the user token, expiration date, staff status, and username from local storage\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationDate\");\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"staff\");\n    dispatch(logout());\n  };\n}; //deprecated (from other apollo code)\n\nexport const logoutRemoveCart = () => {\n  const token = localStorage.getItem('token'); //removes the token and expiration date from local storage\n\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  console.log('TOKEN: ', token);\n  return dispatch => {\n    //calls removeCartOnLogout() from actions/cart.js\n    // dispatch( removeCartOnLogout(token) )\n    dispatch(logout());\n  };\n};","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo-blog/src/store/actions/auth.js"],"names":["axios","actionTypes","signup_url","authStart","type","AUTH_START","authSuccess","token","username","staff","AUTH_SUCCESS","user_id","authFail","error","AUTH_FAIL","logout","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","password","post","then","res","data","key","console","log","expirationDate","Date","getTime","localStorage","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined","logoutUser","removeItem","logoutRemoveCart"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,SACIC,UADJ,QAEO,oBAFP,C,CAGA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAASC,QAAT,EAAoBC,KAApB,KAA8B;AACvD,SAAO;AACLL,IAAAA,IAAI,EAAEH,WAAW,CAACS,YADb;AAELH,IAAAA,KAAK,EAAEA,KAFF;AAGLC,IAAAA,QAAQ,EAAGA,QAHN;AAILG,IAAAA,OAAO,EAAGF;AAJL,GAAP;AAMD,CAPM;AASP,OAAO,MAAMG,QAAQ,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLT,IAAAA,IAAI,EAAEH,WAAW,CAACa,SADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1B,SAAO;AACLX,IAAAA,IAAI,EAAEH,WAAW,CAACe;AADb,GAAP;AAGD,CAJM;AAOP,OAAO,MAAMC,gBAAgB,GAAIC,cAAD,IAAoB;AAClD,SAAOC,QAAQ,IAAI;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAACJ,MAAM,EAAP,CAAR;AACD,KAFS,EAEPG,cAAc,GAAG,IAFV,CAAV;AAGD,GAJD;AAKD,CANM;AASP,OAAO,MAAMG,SAAS,GAAG,CAACb,QAAD,EAAWc,QAAX,KAAwB;AAC/C,SAAOH,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACAH,IAAAA,KAAK,CACFuB,IADH,CACQrB,UADR,EACoB;AAChBM,MAAAA,QAAQ,EAAEA,QADM;AAEhBc,MAAAA,QAAQ,EAAEA;AAFM,KADpB,EAKGE,IALH,CAKQC,GAAG,IAAI;AACX,YAAMlB,KAAK,GAAGkB,GAAG,CAACC,IAAJ,CAASC,GAAvB;AACA,YAAMlB,KAAK,GAAGgB,GAAG,CAACC,IAAJ,CAASjB,KAAvB;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBpB,KAAlC;AACA,YAAMqB,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,IAAvC,CAAvB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BzB,KAA9B;AACAwB,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiC1B,QAAjC;AACAyB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B3B,KAA9B;AACA0B,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCJ,cAAvC;AACAX,MAAAA,QAAQ,CAACb,WAAW,CAACC,KAAD,EAASC,QAAT,EAAoBC,KAApB,CAAZ,CAAR;AACAU,MAAAA,QAAQ,CAACF,gBAAgB,CAAC,KAAD,CAAjB,CAAR,CAVW,CAYX;AACA;AAED,KApBH,EAqBGkB,KArBH,CAqBSC,GAAG,IAAI;AACZ;AACAjB,MAAAA,QAAQ,CAACP,QAAQ,CAACwB,GAAD,CAAT,CAAR;AACD,KAxBH;AAyBD,GA3BD;AA4BD,CA7BM;AAgCP,OAAO,MAAMC,UAAU,GAAG,CAAC7B,QAAD,EAAW8B,KAAX,EAAkBC,SAAlB,EAA6BC,SAA7B,KAA2C;AACnE,SAAOrB,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACAH,IAAAA,KAAK,CACFuB,IADH,CACQ,+CADR,EACyD;AACrDf,MAAAA,QAAQ,EAAEA,QAD2C;AAErD8B,MAAAA,KAAK,EAAEA,KAF8C;AAGrDC,MAAAA,SAAS,EAAEA,SAH0C;AAIrDC,MAAAA,SAAS,EAAEA;AAJ0C,KADzD,EAOGhB,IAPH,CAOQC,GAAG,IAAI;AACX,YAAMlB,KAAK,GAAGkB,GAAG,CAACC,IAAJ,CAASC,GAAvB;AACA,YAAMG,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,QAAQ,IAAxC,CAAvB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B3B,KAA9B;AACA0B,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCJ,cAAvC;AACAX,MAAAA,QAAQ,CAACb,WAAW,CAACC,KAAD,EAASC,QAAT,EAAoB,KAApB,CAAZ,CAAR;AACAW,MAAAA,QAAQ,CAACF,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACD,KAdH,EAeGkB,KAfH,CAeSC,GAAG,IAAI;AACZjB,MAAAA,QAAQ,CAACP,QAAQ,CAACwB,GAAD,CAAT,CAAR;AACD,KAjBH;AAkBD,GApBD;AAqBD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMK,cAAc,GAAIjC,QAAD,IAAc;AAC1C,SAAOW,QAAQ,IAAI;AACjB,UAAMZ,KAAK,GAAG0B,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMlC,QAAQ,GAAGyB,YAAY,CAACS,OAAb,CAAqB,UAArB,CAAjB;AACA,UAAMjC,KAAK,GAAGwB,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAInC,KAAK,KAAKoC,SAAd,EAAyB;AACvBxB,MAAAA,QAAQ,CAACJ,MAAM,EAAP,CAAR;AACD,KAFD,MAEO;AACL,YAAMe,cAAc,GAAG,IAAIC,IAAJ,CAASE,YAAY,CAACS,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AACA,UAAIZ,cAAc,IAAI,IAAIC,IAAJ,EAAtB,EAAkC;AAChCZ,QAAAA,QAAQ,CAACJ,MAAM,EAAP,CAAR;AACD,OAFD,MAEO;AACLI,QAAAA,QAAQ,CAACb,WAAW,CAACC,KAAD,EAASC,QAAT,EAAoBC,KAApB,CAAZ,CAAR;AACAU,QAAAA,QAAQ,CACNF,gBAAgB,CACd,CAACa,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAoD,IADtC,CADV,CAAR;AAKD;AACF;AACF,GAnBD;AAoBD,CArBM;AA0BP,OAAO,MAAMY,UAAU,GAAG,MAAM;AAC5B,SAAOzB,QAAQ,IAAI;AACjB;AACAc,IAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAZ,IAAAA,YAAY,CAACY,UAAb,CAAwB,gBAAxB;AACAZ,IAAAA,YAAY,CAACY,UAAb,CAAwB,UAAxB;AACAZ,IAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACA1B,IAAAA,QAAQ,CAAEJ,MAAM,EAAR,CAAR;AACD,GAPD;AAQH,CATM,C,CAcP;;AACA,OAAO,MAAM+B,gBAAgB,GAAG,MAAM;AACpC,QAAMvC,KAAK,GAAG0B,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd,CADoC,CAEpC;;AACAT,EAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAZ,EAAAA,YAAY,CAACY,UAAb,CAAwB,gBAAxB;AAEAjB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBtB,KAAvB;AACA,SAAOY,QAAQ,IAAI;AACjB;AACA;AACAA,IAAAA,QAAQ,CAAEJ,MAAM,EAAR,CAAR;AACD,GAJD;AAKD,CAZM","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport {\n    signup_url\n} from '../../backend-urls' ;\n// import {\n//   mergeCartOnLogin,\n//   removeCartOnLogout,\n// } from \"./cart\";\n\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (token , username , staff) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username : username,\n    user_id : staff\n  };\n};\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\n\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios\n      .post(signup_url, {\n        username: username,\n        password: password\n      })\n      .then(res => {\n        const token = res.data.key;\n        const staff = res.data.staff;\n        console.log('staff from auth: ' + staff)\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"staff\", staff);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token , username , staff));\n        dispatch(checkAuthTimeout(10000));\n\n        //merges the cart when the user logs in. mergeCartOnLogin is located in actions/cart.js\n        // dispatch( mergeCartOnLogin(token) )\n\n      })\n      .catch(err => {\n        // console.log(err.response.data.non_field_errors)\n        dispatch(authFail(err));\n      });\n  };\n};\n\n\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios\n      .post(\"http://127.0.0.1:8000/rest-auth/registration/\", {\n        username: username,\n        email: email,\n        password1: password1,\n        password2: password2\n      })\n      .then(res => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token , username , false));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\n//added username to the authSuccess part and in the parameters of the function on 11/5/19\nexport const authCheckState = (username) => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    const username = localStorage.getItem(\"username\");\n    const staff = localStorage.getItem(\"staff\") ;\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token , username , staff));\n        dispatch(\n          checkAuthTimeout(\n            (expirationDate.getTime() - new Date().getTime()) / 1000\n          )\n        );\n      }\n    }\n  };\n};\n\n\n\n\nexport const logoutUser = () => {\n    return dispatch => {\n      //removes the user token, expiration date, staff status, and username from local storage\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expirationDate\");\n      localStorage.removeItem(\"username\");\n      localStorage.removeItem(\"staff\");\n      dispatch( logout() )\n    }\n}\n\n\n\n\n//deprecated (from other apollo code)\nexport const logoutRemoveCart = () => {\n  const token = localStorage.getItem('token')\n  //removes the token and expiration date from local storage\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n\n  console.log('TOKEN: ', token)\n  return dispatch => {\n    //calls removeCartOnLogout() from actions/cart.js\n    // dispatch( removeCartOnLogout(token) )\n    dispatch( logout() )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}