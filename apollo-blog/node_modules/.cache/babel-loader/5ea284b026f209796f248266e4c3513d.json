{"ast":null,"code":"var _jsxFileName = \"/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/RegisterEmail.js\";\nimport React from 'react';\nimport { Button, Popover, OverlayTrigger, Badge, Row, Col } from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\nimport \"../content/css/App.css\"; //text is what gets passed in. should be used like : <RichText text={example_rich_text} />\n\nfunction RegisterEmail(props) {\n  state = {\n    error: null,\n    //stores the error that comes from the backend\n    loading: true,\n    //to determine if the page is loading\n    email: \"\",\n    //stores the email from the \"add email\" widget\n    email_submitted: null //stores the response value after a user submits their email\n\n  };\n\n  function handlePostEmail() {\n    this.setState({\n      loading: true\n    });\n    var data = new FormData();\n    data.append('email', this.state.email);\n    axios.post(create_email_url, data).then(response => {\n      this.setState({\n        email_submitted: true\n      });\n    }).catch(error => {\n      this.setState({\n        error: error.response.data\n      });\n    });\n  }\n\n  function handleEmailValidated() {\n    var email = this.state.email; //these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\n\n    var email_length_more_than_four = email.length > 5;\n    var email_contains_at = email.includes(\"@\");\n    var email_contains_period = email.includes(\".\");\n    return !(email_length_more_than_four && email_contains_at && email_contains_period);\n  }\n\n  function handleEmail(text) {\n    this.setState({\n      email: text.target.value\n    });\n  } //for email popover\n\n\n  const email_popover = React.createElement(Popover, {\n    id: \"popover-basic\",\n    className: \"max-width-800px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Popover.Title, {\n    as: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Email Updates\"), React.createElement(Popover.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    // style={{width:'200px'}}\n    className: \"width-250px\",\n    type: \"email\",\n    placeholder: \"Enter email\",\n    onChange: this.handleEmail(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), error && React.createElement(\"small\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, error)), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, email_submitted ? React.createElement(CheckCircle, {\n    className: \"text-success font-size-2-5em\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }) : React.createElement(Button, {\n    disabled: this.handleEmailValidated(),\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: this.handlePostEmail(),\n    className: \"float-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Submit\")))));\n  return React.createElement(\"div\", {\n    className: \"float-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(OverlayTrigger, {\n    trigger: 'click',\n    placement: \"left\",\n    overlay: email_popover,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    className: \"font-size-10px\",\n    style: {\n      cursor: 'pointer'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Sign up for email updates\")));\n}\n\nexport default RegisterEmail;","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo-blog/src/containers/Misc/RegisterEmail.js"],"names":["React","Button","Popover","OverlayTrigger","Badge","Row","Col","CheckCircle","RegisterEmail","props","state","error","loading","email","email_submitted","handlePostEmail","setState","data","FormData","append","axios","post","create_email_url","then","response","catch","handleEmailValidated","email_length_more_than_four","length","email_contains_at","includes","email_contains_period","handleEmail","text","target","value","email_popover","color","cursor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SACEC,MADF,EAEEC,OAFF,EAGEC,cAHF,EAIEC,KAJF,EAKEC,GALF,EAMEC,GANF,QAQO,iBARP;AASA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,OAAO,wBAAP,C,CAIA;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAE5BC,EAAAA,KAAK,GAAG;AACNC,IAAAA,KAAK,EAAE,IADD;AACQ;AACdC,IAAAA,OAAO,EAAG,IAFJ;AAEW;AACjBC,IAAAA,KAAK,EAAE,EAHD;AAGM;AACZC,IAAAA,eAAe,EAAG,IAJZ,CAImB;;AAJnB,GAAR;;AAQA,WAASC,eAAT,GAA2B;AACzB,SAAKC,QAAL,CAAc;AACZJ,MAAAA,OAAO,EAAE;AADG,KAAd;AAIA,QAAIK,IAAI,GAAG,IAAIC,QAAJ,EAAX;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAsB,KAAKT,KAAL,CAAWG,KAAjC;AAEAO,IAAAA,KAAK,CACFC,IADH,CACQC,gBADR,EAC2BL,IAD3B,EAEGM,IAFH,CAEQC,QAAQ,IAAI;AAChB,WAAKR,QAAL,CAAc;AACZF,QAAAA,eAAe,EAAG;AADN,OAAd;AAGD,KANH,EAOGW,KAPH,CAOSd,KAAK,IAAI;AACd,WAAKK,QAAL,CAAc;AACZL,QAAAA,KAAK,EAAEA,KAAK,CAACa,QAAN,CAAeP;AADV,OAAd;AAGD,KAXH;AAYD;;AAED,WAASS,oBAAT,GAAgC;AAC9B,QAAIb,KAAK,GAAG,KAAKH,KAAL,CAAWG,KAAvB,CAD8B,CAE9B;;AACA,QAAIc,2BAA2B,GAAGd,KAAK,CAACe,MAAN,GAAe,CAAjD;AACA,QAAIC,iBAAiB,GAAGhB,KAAK,CAACiB,QAAN,CAAe,GAAf,CAAxB;AACA,QAAIC,qBAAqB,GAAGlB,KAAK,CAACiB,QAAN,CAAe,GAAf,CAA5B;AAEA,WAAO,EAAEH,2BAA2B,IAAIE,iBAA/B,IAAoDE,qBAAtD,CAAP;AACD;;AAED,WAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAKjB,QAAL,CAAc;AACZH,MAAAA,KAAK,EAAEoB,IAAI,CAACC,MAAL,CAAYC;AADP,KAAd;AAGD,GA9C2B,CAgD5B;;;AACA,QAAMC,aAAa,GACjB,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,eAAZ;AAA4B,IAAA,SAAS,EAAC,iBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD,CAAS,KAAT;AAAe,IAAA,EAAE,EAAC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,OAAD,CAAS,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,OAAN;AACE;AACA,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,WAAW,EAAC,aAJd;AAKE,IAAA,QAAQ,EAAE,KAAKJ,WAAL,EALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASIrB,KAAK,IACH;AAAO,IAAA,KAAK,EAAE;AAAC0B,MAAAA,KAAK,EAAC;AAAP,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B1B,KAA/B,CAVN,CADF,EAcE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIG,eAAe,GACb,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,8BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADa,GAGb,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAE,KAAKY,oBAAL,EADZ;AAEE,IAAA,OAAO,EAAC,SAFV;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,OAAO,EAAE,KAAKX,eAAL,EAJX;AAKE,IAAA,SAAS,EAAC,aALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALN,CAdF,CADJ,CAFF,CADF;AAwCA,SACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAE,OADX;AAEE,IAAA,SAAS,EAAC,MAFZ;AAGE,IAAA,OAAO,EAAEqB,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAC,gBAAjB;AAAkC,IAAA,KAAK,EAAE;AAACE,MAAAA,MAAM,EAAE;AAAT,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCALF,CADF,CADF;AAaD;;AAED,eAAe9B,aAAf","sourcesContent":["import React from 'react';\n\n\nimport {\n  Button,\n  Popover ,\n  OverlayTrigger ,\n  Badge ,\n  Row ,\n  Col ,\n\n} from 'react-bootstrap';\nimport { CheckCircle } from 'react-bootstrap-icons';\n\nimport \"../content/css/App.css\";\n\n\n\n//text is what gets passed in. should be used like : <RichText text={example_rich_text} />\nfunction RegisterEmail(props) {\n\n  state = {\n    error: null , //stores the error that comes from the backend\n    loading : true , //to determine if the page is loading\n    email: \"\" , //stores the email from the \"add email\" widget\n    email_submitted : null , //stores the response value after a user submits their email\n\n  }\n\n  function handlePostEmail() {\n    this.setState({\n      loading: true\n    })\n\n    var data = new FormData();\n    data.append('email' , this.state.email) ;\n\n    axios\n      .post(create_email_url , data)\n      .then(response => {\n        this.setState({\n          email_submitted : true ,\n        })\n      })\n      .catch(error => {\n        this.setState({\n          error: error.response.data  ,\n        })\n      })\n  }\n\n  function handleEmailValidated() {\n    var email = this.state.email\n    //these are the most abstract validations that I can think of.. length is greater than 5 (contains an @, a ., and a letter before/after each. ie \"a@b.co\" would pass (I'm not sure if there are top-level domains with single letter so i just required 2 for the tld))\n    var email_length_more_than_four = email.length > 5\n    var email_contains_at = email.includes(\"@\")\n    var email_contains_period = email.includes(\".\")\n\n    return !(email_length_more_than_four && email_contains_at && email_contains_period )\n  }\n\n  function handleEmail(text) {\n    this.setState({\n      email: text.target.value\n    });\n  }\n\n  //for email popover\n  const email_popover = (\n    <Popover id=\"popover-basic\" className=\"max-width-800px\">\n      <Popover.Title as=\"h3\">Email Updates</Popover.Title>\n      <Popover.Content >\n          <Row >\n            <Col>\n              <Form.Control\n                // style={{width:'200px'}}\n                className=\"width-250px\"\n                type=\"email\"\n                placeholder=\"Enter email\"\n                onChange={this.handleEmail()}\n              />\n              {\n                error&&\n                  <small style={{color:'red'}} >{error}</small>\n                }\n            </Col>\n            <Col>\n              {\n                email_submitted ?\n                  <CheckCircle className=\"text-success font-size-2-5em\" />\n                :\n                  <Button\n                    disabled={this.handleEmailValidated()}\n                    variant=\"primary\"\n                    type=\"submit\"\n                    onClick={this.handlePostEmail()}\n                    className=\"float-right\"\n                  >\n                    Submit\n                  </Button>\n              }\n            </Col>\n          </Row>\n      </Popover.Content>\n    </Popover>\n)\n\n\n  return (\n    <div className=\"float-right\">\n      <OverlayTrigger\n        trigger={'click'}\n        placement=\"left\"\n        overlay={email_popover}\n      >\n        <Badge className=\"font-size-10px\" style={{cursor: 'pointer' , }}>\n          Sign up for email updates\n        </Badge>\n      </OverlayTrigger>\n    </div>\n  )\n}\n\nexport default RegisterEmail ;\n"]},"metadata":{},"sourceType":"module"}