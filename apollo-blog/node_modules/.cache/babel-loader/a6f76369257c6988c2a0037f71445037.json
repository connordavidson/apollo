{"ast":null,"code":"var _jsxFileName = \"/Users/connordavidson/Desktop/apollo-blog/src/containers/Account/SetNewPassword.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { Button, FormGroup, FormControl, Badge, Alert } from \"react-bootstrap\";\nimport LoaderSpinner from '../Misc/LoaderSpinner';\nimport \"../../content/css/App.css\";\nimport { reset_password_url, set_new_password_url } from \"../../backend-urls.js\";\n\nclass SetNewPassword extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      //determines if the page is laoding\n      error: null,\n      //holds the error that gets returned from the database\n      password: \"\",\n      //holds the password value\n      confirm_password: \"\",\n      //holds the confirm_password value\n      passwords_match: true //if the passwords match\n\n    };\n\n    this.handlePassword = e => {\n      if (this.state.confirm_password !== e.target.value) {\n        this.setState({\n          passwords_match: false,\n          password: e.target.value\n        });\n      } else {\n        this.setState({\n          passwords_match: true,\n          password: e.target.value\n        });\n      }\n    };\n\n    this.handleConfirmPassword = e => {\n      if (this.state.password !== e.target.value) {\n        this.setState({\n          passwords_match: false,\n          confirm_password: e.target.value\n        });\n      } else {\n        this.setState({\n          passwords_match: true,\n          confirm_password: e.target.value\n        });\n      }\n    };\n\n    this.handleValidated = () => {\n      var password_valid = this.state.password.length > 8;\n      var confirm_password_valid = this.state.confirm_password.length > 8;\n      var passwords_match = this.state.password_valid === this.state.confirm_password_valid;\n      return password_valid && confirm_password_valid && passwords_match && this.state.passwords_match;\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      var uid = this.props.match.params.uid;\n      var token = this.props.match.params.token;\n      console.log(uid + \" : \" + token); // creates a new FormData object and adds all the form data to it\n\n      var password_data = new FormData();\n      password_data.append('password', this.props.password);\n      password_data.append('confirm_password', this.state.confirm_password);\n      password_data.append('uid', uid);\n      password_data.append('token', token);\n      axios.post(); // const {email, username, password , confirm_password} = this.state;\n      // console.log(email) ;\n      // this.props.signup(username, email, password , confirm_password)\n    };\n  }\n\n  render() {\n    const {\n      loading,\n      password,\n      confirm_password,\n      passwords_match\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"account-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Enter New Password \"), React.createElement(FormGroup, {\n      controlId: \"password\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Password\", React.createElement(FormControl, {\n      required: true,\n      value: password,\n      onChange: this.handlePassword,\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      controlId: \"confirm_password\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Confirm Password\", React.createElement(FormControl, {\n      required: true,\n      value: confirm_password,\n      onChange: this.handleConfirmPassword,\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(Button, {\n      block: true,\n      bsSize: \"large\",\n      disabled: !this.handleValidated(),\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Change Password\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), !passwords_match && React.createElement(Alert, {\n      variant: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Your passwords must match\")));\n  }\n\n}\n\nexport default SetNewPassword;","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo-blog/src/containers/Account/SetNewPassword.js"],"names":["React","axios","Button","FormGroup","FormControl","Badge","Alert","LoaderSpinner","reset_password_url","set_new_password_url","SetNewPassword","Component","state","loading","error","password","confirm_password","passwords_match","handlePassword","e","target","value","setState","handleConfirmPassword","handleValidated","password_valid","length","confirm_password_valid","handleSubmit","event","preventDefault","uid","props","match","params","token","console","log","password_data","FormData","append","post","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  Button ,\n  FormGroup ,\n  FormControl ,\n  Badge ,\n  Alert ,\n\n} from \"react-bootstrap\";\nimport LoaderSpinner from '../Misc/LoaderSpinner'\n\nimport \"../../content/css/App.css\";\nimport {\n  reset_password_url ,\n  set_new_password_url ,\n  \n} from \"../../backend-urls.js\" ;\n\n\nclass SetNewPassword extends React.Component {\n  state = {\n    loading : false , //determines if the page is laoding\n    error : null , //holds the error that gets returned from the database\n    password : \"\" , //holds the password value\n    confirm_password : \"\" , //holds the confirm_password value\n    passwords_match : true , //if the passwords match\n\n  }\n\n  //sets the password into the state and determines if the two password fields match\n  handlePassword = (e) => {\n    if(this.state.confirm_password !== e.target.value){\n      this.setState({\n        passwords_match : false ,\n        password : e.target.value\n      })\n    }else{\n      this.setState({\n        passwords_match : true ,\n        password : e.target.value\n      })\n    }\n  }\n\n  //sets the confirm_password into the state and determines if the two password fields match\n  handleConfirmPassword = (e) => {\n    if(this.state.password !== e.target.value){\n      this.setState({\n        passwords_match : false ,\n        confirm_password : e.target.value\n      })\n    }else{\n      this.setState({\n        passwords_match : true ,\n        confirm_password : e.target.value\n      })\n    }\n  }\n\n\n  //does a simple validation of the user's input and returns true or false\n  handleValidated = () => {\n    var password_valid = this.state.password.length > 8\n    var confirm_password_valid = this.state.confirm_password.length > 8\n    var passwords_match = this.state.password_valid === this.state.confirm_password_valid\n    return password_valid && confirm_password_valid && passwords_match && this.state.passwords_match  ;\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    var uid = this.props.match.params.uid ;\n    var token = this.props.match.params.token;\n\n    console.log(uid + \" : \" +token)\n    // creates a new FormData object and adds all the form data to it\n    var password_data = new FormData();\n    password_data.append('password' , this.props.password) ;\n    password_data.append('confirm_password' , this.state.confirm_password) ;\n    password_data.append('uid' , uid) ;\n    password_data.append('token' , token) ;\n\n    axios\n      .post()\n    // const {email, username, password , confirm_password} = this.state;\n    // console.log(email) ;\n    // this.props.signup(username, email, password , confirm_password)\n  }\n\n\n\n  render(){\n    const {\n        loading ,\n        password ,\n        confirm_password ,\n        passwords_match ,\n\n    } = this.state\n\n    return(\n\n      <div className=\"account-form\">\n        <form>\n          <h5>Enter New Password </h5>\n\n            <FormGroup controlId=\"password\" bsSize=\"large\">\n              Password\n              <FormControl\n                required\n                value={password}\n                onChange={this.handlePassword}\n                type=\"password\"\n              />\n            </FormGroup>\n            <FormGroup controlId=\"confirm_password\" bsSize=\"large\">\n              Confirm Password\n              <FormControl\n                required\n                value={confirm_password}\n                onChange={this.handleConfirmPassword}\n                type=\"password\"\n              />\n            </FormGroup>\n\n            <Button block bsSize=\"large\" disabled={!this.handleValidated()} onClick={this.handleSubmit}>\n              Change Password\n            </Button>\n\n            <br/>\n\n            {\n              !passwords_match &&\n              <Alert variant=\"danger\">Your passwords must match</Alert>\n            }\n          </form>\n      </div>\n    )\n  }\n\n\n}\n\n\nexport default SetNewPassword ;\n"]},"metadata":{},"sourceType":"module"}