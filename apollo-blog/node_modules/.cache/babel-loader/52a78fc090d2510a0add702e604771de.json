{"ast":null,"code":"import isPlainObject from 'is-plain-object';\nimport { Text, Range, createEditor as createEditor$1, Node, Element } from 'slate';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\r\n * A weak map to hold anchor tokens.\r\n */\n\n\nvar ANCHOR = new WeakMap();\n/**\r\n * A weak map to hold focus tokens.\r\n */\n\nvar FOCUS = new WeakMap();\n/**\r\n * All tokens inherit from a single constructor for `instanceof` checking.\r\n */\n\nclass Token {}\n/**\r\n * Anchor tokens represent the selection's anchor point.\r\n */\n\n\nclass AnchorToken extends Token {\n  constructor() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    var {\n      offset,\n      path\n    } = props;\n    this.offset = offset;\n    this.path = path;\n  }\n\n}\n/**\r\n * Focus tokens represent the selection's focus point.\r\n */\n\n\nclass FocusToken extends Token {\n  constructor() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    var {\n      offset,\n      path\n    } = props;\n    this.offset = offset;\n    this.path = path;\n  }\n\n}\n/**\r\n * Add an anchor token to the end of a text node.\r\n */\n\n\nvar addAnchorToken = (text, token) => {\n  var offset = text.text.length;\n  ANCHOR.set(text, [offset, token]);\n};\n/**\r\n * Get the offset if a text node has an associated anchor token.\r\n */\n\n\nvar getAnchorOffset = text => {\n  return ANCHOR.get(text);\n};\n/**\r\n * Add a focus token to the end of a text node.\r\n */\n\n\nvar addFocusToken = (text, token) => {\n  var offset = text.text.length;\n  FOCUS.set(text, [offset, token]);\n};\n/**\r\n * Get the offset if a text node has an associated focus token.\r\n */\n\n\nvar getFocusOffset = text => {\n  return FOCUS.get(text);\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\r\n * Resolve the descedants of a node by normalizing the children that can be\r\n * passed into a hyperscript creator function.\r\n */\n\n\nvar STRINGS = new WeakSet();\n\nvar resolveDescendants = children => {\n  var nodes = [];\n\n  var addChild = child => {\n    if (child == null) {\n      return;\n    }\n\n    var prev = nodes[nodes.length - 1];\n\n    if (typeof child === 'string') {\n      var text = {\n        text: child\n      };\n      STRINGS.add(text);\n      child = text;\n    }\n\n    if (Text.isText(child)) {\n      var c = child; // HACK: fix typescript complaining\n\n      if (Text.isText(prev) && STRINGS.has(prev) && STRINGS.has(c) && Text.equals(prev, c, {\n        loose: true\n      })) {\n        prev.text += c.text;\n      } else {\n        nodes.push(c);\n      }\n    } else if (Element.isElement(child)) {\n      nodes.push(child);\n    } else if (child instanceof Token) {\n      var n = nodes[nodes.length - 1];\n\n      if (!Text.isText(n)) {\n        addChild('');\n        n = nodes[nodes.length - 1];\n      }\n\n      if (child instanceof AnchorToken) {\n        addAnchorToken(n, child);\n      } else if (child instanceof FocusToken) {\n        addFocusToken(n, child);\n      }\n    } else {\n      throw new Error(\"Unexpected hyperscript child object: \".concat(child));\n    }\n  };\n\n  for (var child of children.flat(Infinity)) {\n    addChild(child);\n  }\n\n  return nodes;\n};\n/**\r\n * Create an anchor token.\r\n */\n\n\nfunction createAnchor(tagName, attributes, children) {\n  return new AnchorToken(attributes);\n}\n/**\r\n * Create an anchor and a focus token.\r\n */\n\n\nfunction createCursor(tagName, attributes, children) {\n  return [new AnchorToken(attributes), new FocusToken(attributes)];\n}\n/**\r\n * Create an `Element` object.\r\n */\n\n\nfunction createElement(tagName, attributes, children) {\n  return _objectSpread({}, attributes, {\n    children: resolveDescendants(children)\n  });\n}\n/**\r\n * Create a focus token.\r\n */\n\n\nfunction createFocus(tagName, attributes, children) {\n  return new FocusToken(attributes);\n}\n/**\r\n * Create a fragment.\r\n */\n\n\nfunction createFragment(tagName, attributes, children) {\n  return resolveDescendants(children);\n}\n/**\r\n * Create a `Selection` object.\r\n */\n\n\nfunction createSelection(tagName, attributes, children) {\n  var anchor = children.find(c => c instanceof AnchorToken);\n  var focus = children.find(c => c instanceof FocusToken);\n\n  if (!anchor || !anchor.offset || !anchor.path) {\n    throw new Error(\"The <selection> hyperscript tag must have an <anchor> tag as a child with `path` and `offset` attributes defined.\");\n  }\n\n  if (!focus || !focus.offset || !focus.path) {\n    throw new Error(\"The <selection> hyperscript tag must have a <focus> tag as a child with `path` and `offset` attributes defined.\");\n  }\n\n  return _objectSpread({\n    anchor: {\n      offset: anchor.offset,\n      path: anchor.path\n    },\n    focus: {\n      offset: focus.offset,\n      path: focus.path\n    }\n  }, attributes);\n}\n/**\r\n * Create a `Text` object.\r\n */\n\n\nfunction createText(tagName, attributes, children) {\n  var nodes = resolveDescendants(children);\n\n  if (nodes.length > 1) {\n    throw new Error(\"The <text> hyperscript tag must only contain a single node's worth of children.\");\n  }\n\n  var [node] = nodes;\n\n  if (node == null) {\n    node = {\n      text: ''\n    };\n  }\n\n  if (!Text.isText(node)) {\n    throw new Error(\"\\n    The <text> hyperscript tag can only contain text content as children.\");\n  } // COMPAT: If they used the <text> tag we want to guarantee that it won't be\n  // merge with other string children.\n\n\n  STRINGS.delete(node);\n  Object.assign(node, attributes);\n  return node;\n}\n/**\r\n * Create a top-level `Editor` object.\r\n */\n\n\nfunction createEditor(tagName, attributes, children) {\n  var otherChildren = [];\n  var selectionChild;\n\n  for (var child of children) {\n    if (Range.isRange(child)) {\n      selectionChild = child;\n    } else {\n      otherChildren.push(child);\n    }\n  }\n\n  var descendants = resolveDescendants(otherChildren);\n  var selection = {};\n  var editor = createEditor$1();\n  Object.assign(editor, attributes);\n  editor.children = descendants; // Search the document's texts to see if any of them have tokens associated\n  // that need incorporated into the selection.\n\n  for (var [node, path] of Node.texts(editor)) {\n    var anchor = getAnchorOffset(node);\n    var focus = getFocusOffset(node);\n\n    if (anchor != null) {\n      var [offset] = anchor;\n      selection.anchor = {\n        path,\n        offset\n      };\n    }\n\n    if (focus != null) {\n      var [_offset] = focus;\n      selection.focus = {\n        path,\n        offset: _offset\n      };\n    }\n  }\n\n  if (selection.anchor && !selection.focus) {\n    throw new Error(\"Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<anchor />`. For collapsed selections, use `<cursor />` instead.\");\n  }\n\n  if (!selection.anchor && selection.focus) {\n    throw new Error(\"Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<focus />`. For collapsed selections, use `<cursor />` instead.\");\n  }\n\n  if (selectionChild != null) {\n    editor.selection = selectionChild;\n  } else if (Range.isRange(selection)) {\n    editor.selection = selection;\n  }\n\n  return editor;\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\r\n * The default creators for Slate objects.\r\n */\n\n\nvar DEFAULT_CREATORS = {\n  anchor: createAnchor,\n  cursor: createCursor,\n  editor: createEditor,\n  element: createElement,\n  focus: createFocus,\n  fragment: createFragment,\n  selection: createSelection,\n  text: createText\n};\n/**\r\n * Create a Slate hyperscript function with `options`.\r\n */\n\nvar createHyperscript = function createHyperscript() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var {\n    elements = {}\n  } = options;\n  var elementCreators = normalizeElements(elements);\n\n  var creators = _objectSpread$1({}, DEFAULT_CREATORS, {}, elementCreators, {}, options.creators);\n\n  var jsx = createFactory(creators);\n  return jsx;\n};\n/**\r\n * Create a Slate hyperscript function with `options`.\r\n */\n\n\nvar createFactory = creators => {\n  var jsx = function jsx(tagName, attributes) {\n    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      children[_key - 2] = arguments[_key];\n    }\n\n    var creator = creators[tagName];\n\n    if (!creator) {\n      throw new Error(\"No hyperscript creator found for tag: <\".concat(tagName, \">\"));\n    }\n\n    if (attributes == null) {\n      attributes = {};\n    }\n\n    if (!isPlainObject(attributes)) {\n      children = [attributes].concat(children);\n      attributes = {};\n    }\n\n    children = children.filter(child => Boolean(child)).flat();\n    var ret = creator(tagName, attributes, children);\n    return ret;\n  };\n\n  return jsx;\n};\n/**\r\n * Normalize a dictionary of element shorthands into creator functions.\r\n */\n\n\nvar normalizeElements = elements => {\n  var creators = {};\n\n  var _loop = function _loop(tagName) {\n    var props = elements[tagName];\n\n    if (typeof props !== 'object') {\n      throw new Error(\"Properties specified for a hyperscript shorthand should be an object, but for the custom element <\".concat(tagName, \">  tag you passed: \").concat(props));\n    }\n\n    creators[tagName] = (tagName, attributes, children) => {\n      return createElement('element', _objectSpread$1({}, props, {}, attributes), children);\n    };\n  };\n\n  for (var tagName in elements) {\n    _loop(tagName);\n  }\n\n  return creators;\n};\n/**\r\n * The default hyperscript factory that ships with Slate, without custom tags.\r\n */\n\n\nvar jsx = createHyperscript();\nexport { createHyperscript, jsx };","map":{"version":3,"sources":["../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/tokens.ts","../src/creators.ts","../src/hyperscript.ts","../src/index.ts"],"names":["ANCHOR","FOCUS","Token","AnchorToken","constructor","props","path","FocusToken","addAnchorToken","offset","text","getAnchorOffset","addFocusToken","getFocusOffset","STRINGS","resolveDescendants","children","nodes","addChild","child","prev","Text","c","loose","Element","n","createAnchor","tagName","attributes","createCursor","createElement","createFocus","createFragment","createSelection","anchor","focus","createText","node","Object","createEditor","otherChildren","Range","selectionChild","descendants","selection","editor","makeEditor","Node","DEFAULT_CREATORS","cursor","element","fragment","createHyperscript","options","elements","elementCreators","normalizeElements","creators","jsx","createFactory","creator","isPlainObject","Boolean","ret"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { Node, Path, Text } from 'slate'\n\n/**\n * A weak map to hold anchor tokens.\n */\n\nconst ANCHOR: WeakMap<Node, [number, AnchorToken]> = new WeakMap()\n\n/**\n * A weak map to hold focus tokens.\n */\n\nconst FOCUS: WeakMap<Node, [number, FocusToken]> = new WeakMap()\n\n/**\n * All tokens inherit from a single constructor for `instanceof` checking.\n */\n\nexport class Token {}\n\n/**\n * Anchor tokens represent the selection's anchor point.\n */\n\nexport class AnchorToken extends Token {\n  offset?: number\n  path?: Path\n\n  constructor(\n    props: {\n      offset?: number\n      path?: Path\n    } = {}\n  ) {\n    super()\n    const { offset, path } = props\n    this.offset = offset\n    this.path = path\n  }\n}\n\n/**\n * Focus tokens represent the selection's focus point.\n */\n\nexport class FocusToken extends Token {\n  offset?: number\n  path?: Path\n\n  constructor(\n    props: {\n      offset?: number\n      path?: Path\n    } = {}\n  ) {\n    super()\n    const { offset, path } = props\n    this.offset = offset\n    this.path = path\n  }\n}\n\n/**\n * Add an anchor token to the end of a text node.\n */\n\nexport const addAnchorToken = (text: Text, token: AnchorToken) => {\n  const offset = text.text.length\n  ANCHOR.set(text, [offset, token])\n}\n\n/**\n * Get the offset if a text node has an associated anchor token.\n */\n\nexport const getAnchorOffset = (\n  text: Text\n): [number, AnchorToken] | undefined => {\n  return ANCHOR.get(text)\n}\n\n/**\n * Add a focus token to the end of a text node.\n */\n\nexport const addFocusToken = (text: Text, token: FocusToken) => {\n  const offset = text.text.length\n  FOCUS.set(text, [offset, token])\n}\n\n/**\n * Get the offset if a text node has an associated focus token.\n */\n\nexport const getFocusOffset = (\n  text: Text\n): [number, FocusToken] | undefined => {\n  return FOCUS.get(text)\n}\n","import {\n  Element,\n  Descendant,\n  Node,\n  Range,\n  Text,\n  Editor,\n  createEditor as makeEditor,\n} from 'slate'\nimport {\n  AnchorToken,\n  FocusToken,\n  Token,\n  addAnchorToken,\n  addFocusToken,\n  getAnchorOffset,\n  getFocusOffset,\n} from './tokens'\n\n/**\n * Resolve the descedants of a node by normalizing the children that can be\n * passed into a hyperscript creator function.\n */\n\nconst STRINGS: WeakSet<Text> = new WeakSet()\n\nconst resolveDescendants = (children: any[]): Descendant[] => {\n  const nodes: Node[] = []\n\n  const addChild = (child: Node | Token): void => {\n    if (child == null) {\n      return\n    }\n\n    const prev = nodes[nodes.length - 1]\n\n    if (typeof child === 'string') {\n      const text = { text: child }\n      STRINGS.add(text)\n      child = text\n    }\n\n    if (Text.isText(child)) {\n      const c = child // HACK: fix typescript complaining\n\n      if (\n        Text.isText(prev) &&\n        STRINGS.has(prev) &&\n        STRINGS.has(c) &&\n        Text.equals(prev, c, { loose: true })\n      ) {\n        prev.text += c.text\n      } else {\n        nodes.push(c)\n      }\n    } else if (Element.isElement(child)) {\n      nodes.push(child)\n    } else if (child instanceof Token) {\n      let n = nodes[nodes.length - 1]\n\n      if (!Text.isText(n)) {\n        addChild('')\n        n = nodes[nodes.length - 1] as Text\n      }\n\n      if (child instanceof AnchorToken) {\n        addAnchorToken(n, child)\n      } else if (child instanceof FocusToken) {\n        addFocusToken(n, child)\n      }\n    } else {\n      throw new Error(`Unexpected hyperscript child object: ${child}`)\n    }\n  }\n\n  for (const child of children.flat(Infinity)) {\n    addChild(child)\n  }\n\n  return nodes\n}\n\n/**\n * Create an anchor token.\n */\n\nexport function createAnchor(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): AnchorToken {\n  return new AnchorToken(attributes)\n}\n\n/**\n * Create an anchor and a focus token.\n */\n\nexport function createCursor(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): Token[] {\n  return [new AnchorToken(attributes), new FocusToken(attributes)]\n}\n\n/**\n * Create an `Element` object.\n */\n\nexport function createElement(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): Element {\n  return { ...attributes, children: resolveDescendants(children) }\n}\n\n/**\n * Create a focus token.\n */\n\nexport function createFocus(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): FocusToken {\n  return new FocusToken(attributes)\n}\n\n/**\n * Create a fragment.\n */\n\nexport function createFragment(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): Descendant[] {\n  return resolveDescendants(children)\n}\n\n/**\n * Create a `Selection` object.\n */\n\nexport function createSelection(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): Range {\n  const anchor: AnchorToken = children.find(c => c instanceof AnchorToken)\n  const focus: FocusToken = children.find(c => c instanceof FocusToken)\n\n  if (!anchor || !anchor.offset || !anchor.path) {\n    throw new Error(\n      `The <selection> hyperscript tag must have an <anchor> tag as a child with \\`path\\` and \\`offset\\` attributes defined.`\n    )\n  }\n\n  if (!focus || !focus.offset || !focus.path) {\n    throw new Error(\n      `The <selection> hyperscript tag must have a <focus> tag as a child with \\`path\\` and \\`offset\\` attributes defined.`\n    )\n  }\n\n  return {\n    anchor: {\n      offset: anchor.offset,\n      path: anchor.path,\n    },\n    focus: {\n      offset: focus.offset,\n      path: focus.path,\n    },\n    ...attributes,\n  }\n}\n\n/**\n * Create a `Text` object.\n */\n\nexport function createText(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): Text {\n  const nodes = resolveDescendants(children)\n\n  if (nodes.length > 1) {\n    throw new Error(\n      `The <text> hyperscript tag must only contain a single node's worth of children.`\n    )\n  }\n\n  let [node] = nodes\n\n  if (node == null) {\n    node = { text: '' }\n  }\n\n  if (!Text.isText(node)) {\n    throw new Error(`\n    The <text> hyperscript tag can only contain text content as children.`)\n  }\n\n  // COMPAT: If they used the <text> tag we want to guarantee that it won't be\n  // merge with other string children.\n  STRINGS.delete(node)\n\n  Object.assign(node, attributes)\n  return node\n}\n\n/**\n * Create a top-level `Editor` object.\n */\n\nexport function createEditor(\n  tagName: string,\n  attributes: { [key: string]: any },\n  children: any[]\n): Editor {\n  const otherChildren: any[] = []\n  let selectionChild: Range | undefined\n\n  for (const child of children) {\n    if (Range.isRange(child)) {\n      selectionChild = child\n    } else {\n      otherChildren.push(child)\n    }\n  }\n\n  const descendants = resolveDescendants(otherChildren)\n  const selection: Partial<Range> = {}\n  const editor = makeEditor()\n  Object.assign(editor, attributes)\n  editor.children = descendants\n\n  // Search the document's texts to see if any of them have tokens associated\n  // that need incorporated into the selection.\n  for (const [node, path] of Node.texts(editor)) {\n    const anchor = getAnchorOffset(node)\n    const focus = getFocusOffset(node)\n\n    if (anchor != null) {\n      const [offset] = anchor\n      selection.anchor = { path, offset }\n    }\n\n    if (focus != null) {\n      const [offset] = focus\n      selection.focus = { path, offset }\n    }\n  }\n\n  if (selection.anchor && !selection.focus) {\n    throw new Error(\n      `Slate hyperscript ranges must have both \\`<anchor />\\` and \\`<focus />\\` defined if one is defined, but you only defined \\`<anchor />\\`. For collapsed selections, use \\`<cursor />\\` instead.`\n    )\n  }\n\n  if (!selection.anchor && selection.focus) {\n    throw new Error(\n      `Slate hyperscript ranges must have both \\`<anchor />\\` and \\`<focus />\\` defined if one is defined, but you only defined \\`<focus />\\`. For collapsed selections, use \\`<cursor />\\` instead.`\n    )\n  }\n\n  if (selectionChild != null) {\n    editor.selection = selectionChild\n  } else if (Range.isRange(selection)) {\n    editor.selection = selection\n  }\n\n  return editor\n}\n","import isPlainObject from 'is-plain-object'\nimport { Element } from 'slate'\nimport {\n  createAnchor,\n  createCursor,\n  createEditor,\n  createElement,\n  createFocus,\n  createFragment,\n  createSelection,\n  createText,\n} from './creators'\n\n/**\n * The default creators for Slate objects.\n */\n\nconst DEFAULT_CREATORS = {\n  anchor: createAnchor,\n  cursor: createCursor,\n  editor: createEditor,\n  element: createElement,\n  focus: createFocus,\n  fragment: createFragment,\n  selection: createSelection,\n  text: createText,\n}\n\n/**\n * `HyperscriptCreators` are dictionaries of `HyperscriptCreator` functions\n * keyed by tag name.\n */\n\ntype HyperscriptCreators<T = any> = Record<\n  string,\n  (tagName: string, attributes: { [key: string]: any }, children: any[]) => T\n>\n\n/**\n * `HyperscriptShorthands` are dictionaries of properties applied to specific\n * kind of object, keyed by tag name. They allow you to easily define custom\n * hyperscript tags for your domain.\n */\n\ntype HyperscriptShorthands = Record<string, Record<string, any>>\n\n/**\n * Create a Slate hyperscript function with `options`.\n */\n\nconst createHyperscript = (\n  options: {\n    creators?: HyperscriptCreators\n    elements?: HyperscriptShorthands\n  } = {}\n) => {\n  const { elements = {} } = options\n  const elementCreators = normalizeElements(elements)\n  const creators = {\n    ...DEFAULT_CREATORS,\n    ...elementCreators,\n    ...options.creators,\n  }\n\n  const jsx = createFactory(creators)\n  return jsx\n}\n\n/**\n * Create a Slate hyperscript function with `options`.\n */\n\nconst createFactory = <T extends HyperscriptCreators>(creators: T) => {\n  const jsx = <S extends keyof T & string>(\n    tagName: S,\n    attributes?: Object,\n    ...children: any[]\n  ): ReturnType<T[S]> => {\n    const creator = creators[tagName]\n\n    if (!creator) {\n      throw new Error(`No hyperscript creator found for tag: <${tagName}>`)\n    }\n\n    if (attributes == null) {\n      attributes = {}\n    }\n\n    if (!isPlainObject(attributes)) {\n      children = [attributes].concat(children)\n      attributes = {}\n    }\n\n    children = children.filter(child => Boolean(child)).flat()\n    const ret = creator(tagName, attributes, children)\n    return ret\n  }\n\n  return jsx\n}\n\n/**\n * Normalize a dictionary of element shorthands into creator functions.\n */\n\nconst normalizeElements = (elements: HyperscriptShorthands) => {\n  const creators: HyperscriptCreators<Element> = {}\n\n  for (const tagName in elements) {\n    const props = elements[tagName]\n\n    if (typeof props !== 'object') {\n      throw new Error(\n        `Properties specified for a hyperscript shorthand should be an object, but for the custom element <${tagName}>  tag you passed: ${props}`\n      )\n    }\n\n    creators[tagName] = (\n      tagName: string,\n      attributes: { [key: string]: any },\n      children: any[]\n    ) => {\n      return createElement('element', { ...props, ...attributes }, children)\n    }\n  }\n\n  return creators\n}\n\nexport { createHyperscript, HyperscriptCreators, HyperscriptShorthands }\n","import {\n  createHyperscript,\n  HyperscriptCreators,\n  HyperscriptShorthands,\n} from './hyperscript'\n\n/**\n * The default hyperscript factory that ships with Slate, without custom tags.\n */\n\nconst jsx = createHyperscript()\n\nexport { jsx, createHyperscript, HyperscriptCreators, HyperscriptShorthands }\n"]},"metadata":{},"sourceType":"module"}