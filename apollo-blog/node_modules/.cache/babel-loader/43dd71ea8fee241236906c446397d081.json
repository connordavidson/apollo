{"ast":null,"code":"/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n// tslint:disable:no-console\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nvar trace = function () {\n  var e = new Error('dummy');\n  return e.stack.replace(/^[^(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@').split('\\n');\n};\n\nvar Logger =\n/** @class */\nfunction () {\n  function Logger() {}\n  /**\n   * Logs a warning. Warnings are things that are exceptional, but easily to recover from.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.warn.apply(console, __spread(['Warning:'], args));\n  };\n  /**\n   * Logs a debug message. Debug messages are things that help developers debugging things.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, __spread(['Debug:'], args));\n  };\n  /**\n   * Logs an info. Infos are things that might be interesting for someone who needs to take a closer look.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, __spread(['Info:'], args));\n  };\n  /**\n   * Logs an error. Error are things that are exceptional, but can be recovered from.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.error.apply(console, __spread(['Error:'], args));\n    console.error('Trace:', trace());\n  };\n  /**\n   * Logs a fatal error. Fatal errors are things that are exceptional and can not be recovered from.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.fatal = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.error.apply(console, __spread(['Fatal:'], args));\n    console.error('Trace:', trace());\n    throw new Error(args.join(' '));\n  };\n  /**\n   * Logs a message.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, __spread(['Fatal:'], args));\n    console.log('Trace:', trace());\n  };\n\n  return Logger;\n}();\n\nexport { Logger };\nvar instance = new Logger();\nexport default instance;","map":{"version":3,"sources":["../../../src/service/logger/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n// tslint:disable:no-console\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar trace = function () {\n    var e = new Error('dummy');\n    return e.stack\n        .replace(/^[^(]+?[\\n$]/gm, '')\n        .replace(/^\\s+at\\s+/gm, '')\n        .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@')\n        .split('\\n');\n};\nvar Logger = /** @class */ (function () {\n    function Logger() {\n    }\n    /**\n     * Logs a warning. Warnings are things that are exceptional, but easily to recover from.\n     */\n    // tslint:disable-next-line:no-any\n    Logger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.warn.apply(console, __spread(['Warning:'], args));\n    };\n    /**\n     * Logs a debug message. Debug messages are things that help developers debugging things.\n     */\n    // tslint:disable-next-line:no-any\n    Logger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.log.apply(console, __spread(['Debug:'], args));\n    };\n    /**\n     * Logs an info. Infos are things that might be interesting for someone who needs to take a closer look.\n     */\n    // tslint:disable-next-line:no-any\n    Logger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.log.apply(console, __spread(['Info:'], args));\n    };\n    /**\n     * Logs an error. Error are things that are exceptional, but can be recovered from.\n     */\n    // tslint:disable-next-line:no-any\n    Logger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.error.apply(console, __spread(['Error:'], args));\n        console.error('Trace:', trace());\n    };\n    /**\n     * Logs a fatal error. Fatal errors are things that are exceptional and can not be recovered from.\n     */\n    // tslint:disable-next-line:no-any\n    Logger.prototype.fatal = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.error.apply(console, __spread(['Fatal:'], args));\n        console.error('Trace:', trace());\n        throw new Error(args.join(' '));\n    };\n    /**\n     * Logs a message.\n     */\n    // tslint:disable-next-line:no-any\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.log.apply(console, __spread(['Fatal:'], args));\n        console.log('Trace:', trace());\n    };\n    return Logger;\n}());\nexport { Logger };\nvar instance = new Logger();\nexport default instance;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}