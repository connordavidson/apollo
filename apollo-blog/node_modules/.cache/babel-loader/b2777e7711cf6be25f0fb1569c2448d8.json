{"ast":null,"code":"/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar MAX_CELLS_PER_ROW = 12;\n/**\n * Sum up cell sizes: Σ(cell[size]).\n */\n\nexport var sumSizes = function (cells) {\n  if (cells === void 0) {\n    cells = [];\n  }\n\n  return cells.reduce( // tslint:disable-next-line:no-any\n  function (_a, _b) {\n    var _c = _a.size,\n        p = _c === void 0 ? 99 : _c,\n        a = _a.inline;\n    var _d = _b.size,\n        c = _d === void 0 ? 99 : _d,\n        b = _b.inline;\n    return {\n      size: (a ? 0 : 1) * p + (b ? 0 : 1) * c\n    };\n  }, {\n    size: 0\n  }).size;\n};\n/**\n * Updates each cell's size boundaries.\n */\n\nexport var computeBounds = function (cells) {\n  if (cells === void 0) {\n    cells = [];\n  }\n\n  return cells.map(function (c, k) {\n    return __assign(__assign({}, c), {\n      bounds: {\n        left: k > 0 ? cells[k - 1].size + c.size - 1 : 0,\n        right: k === cells.length - 1 ? 0 : c.size - 1 + cells[k + 1].size\n      }\n    });\n  });\n};\n/**\n * Computes if a cell is resizable.\n */\n\nexport var computeResizeable = function (cells) {\n  if (cells === void 0) {\n    cells = [];\n  }\n\n  return cells.map(function (c, k) {\n    return __assign(__assign({}, c), {\n      resizable: cells.length > 1 && k !== cells.length - 1\n    });\n  });\n};\n/**\n * Computes sizes an inline element was found.\n */\n\nexport var computeInlines = function (cells) {\n  if (cells === void 0) {\n    cells = [];\n  }\n\n  if (cells.length !== 2 || !cells[0].inline) {\n    return cells.map(function (c) {\n      return __assign(__assign({}, c), {\n        inline: null,\n        hasInlineNeighbour: null\n      });\n    });\n  }\n\n  var inline = cells[0].inline;\n  return [__assign(__assign({}, cells[0]), {\n    resizable: true,\n    size: cells[0].size || Math.round(MAX_CELLS_PER_ROW / 2),\n    bounds: {\n      left: inline === 'left' ? 0 : MAX_CELLS_PER_ROW - 1,\n      right: inline === 'right' ? 0 : MAX_CELLS_PER_ROW - 1\n    }\n  }), __assign(__assign({}, cells[1]), {\n    bounds: {\n      left: 0,\n      right: 0\n    },\n    size: 12,\n    hasInlineNeighbour: cells[0].id\n  })];\n};\n/**\n * Resize cells.\n */\n\nexport var resizeCells = function (cells, _a) {\n  if (cells === void 0) {\n    cells = [];\n  }\n\n  var id = _a.id,\n      size = _a.size;\n  var prev = 0;\n  return cells.map(function (c) {\n    if (prev > 0) {\n      var ret = __assign(__assign({}, c), {\n        size: c.size + prev - size\n      });\n\n      prev = 0;\n      return ret;\n    } else if (id === c.id) {\n      if (!c.inline) {\n        prev = c.size;\n      }\n\n      return __assign(__assign({}, c), {\n        size: size\n      });\n    }\n\n    return c;\n  });\n};\n/**\n * Balance cell sizes.\n *\n * @param {[...cell]} cells\n * @return {[...cell]}\n */\n\nexport var computeSizes = function (cells) {\n  if (cells === void 0) {\n    cells = [];\n  }\n\n  var total = sumSizes(cells);\n\n  if (total === MAX_CELLS_PER_ROW) {\n    return cells;\n  }\n\n  var count = cells.length;\n  var sizePerCell = Math.floor(MAX_CELLS_PER_ROW / count);\n  var spaceLeft = MAX_CELLS_PER_ROW - sizePerCell * (count - 1);\n  return cells.map(function (c, k) {\n    return __assign(__assign({}, c), {\n      size: k === count - 1 ? spaceLeft : sizePerCell\n    });\n  });\n};","map":{"version":3,"sources":["../../../../src/reducer/editable/helper/sizing.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar MAX_CELLS_PER_ROW = 12;\n/**\n * Sum up cell sizes: Σ(cell[size]).\n */\nexport var sumSizes = function (cells) {\n    if (cells === void 0) { cells = []; }\n    return cells.reduce(\n    // tslint:disable-next-line:no-any\n    function (_a, _b) {\n        var _c = _a.size, p = _c === void 0 ? 99 : _c, a = _a.inline;\n        var _d = _b.size, c = _d === void 0 ? 99 : _d, b = _b.inline;\n        return ({\n            size: (a ? 0 : 1) * p + (b ? 0 : 1) * c,\n        });\n    }, { size: 0 }).size;\n};\n/**\n * Updates each cell's size boundaries.\n */\nexport var computeBounds = function (cells) {\n    if (cells === void 0) { cells = []; }\n    return cells.map(function (c, k) { return (__assign(__assign({}, c), { bounds: {\n            left: k > 0 ? cells[k - 1].size + c.size - 1 : 0,\n            right: k === cells.length - 1 ? 0 : c.size - 1 + cells[k + 1].size,\n        } })); });\n};\n/**\n * Computes if a cell is resizable.\n */\nexport var computeResizeable = function (cells) {\n    if (cells === void 0) { cells = []; }\n    return cells.map(function (c, k) { return (__assign(__assign({}, c), { resizable: cells.length > 1 && k !== cells.length - 1 })); });\n};\n/**\n * Computes sizes an inline element was found.\n */\nexport var computeInlines = function (cells) {\n    if (cells === void 0) { cells = []; }\n    if (cells.length !== 2 || !cells[0].inline) {\n        return cells.map(function (c) { return (__assign(__assign({}, c), { inline: null, hasInlineNeighbour: null })); });\n    }\n    var inline = cells[0].inline;\n    return [\n        __assign(__assign({}, cells[0]), { resizable: true, size: cells[0].size || Math.round(MAX_CELLS_PER_ROW / 2), bounds: {\n                left: inline === 'left' ? 0 : MAX_CELLS_PER_ROW - 1,\n                right: inline === 'right' ? 0 : MAX_CELLS_PER_ROW - 1,\n            } }),\n        __assign(__assign({}, cells[1]), { bounds: { left: 0, right: 0 }, size: 12, hasInlineNeighbour: cells[0].id }),\n    ];\n};\n/**\n * Resize cells.\n */\nexport var resizeCells = function (cells, _a) {\n    if (cells === void 0) { cells = []; }\n    var id = _a.id, size = _a.size;\n    var prev = 0;\n    return cells.map(function (c) {\n        if (prev > 0) {\n            var ret = __assign(__assign({}, c), { size: c.size + prev - size });\n            prev = 0;\n            return ret;\n        }\n        else if (id === c.id) {\n            if (!c.inline) {\n                prev = c.size;\n            }\n            return __assign(__assign({}, c), { size: size });\n        }\n        return c;\n    });\n};\n/**\n * Balance cell sizes.\n *\n * @param {[...cell]} cells\n * @return {[...cell]}\n */\nexport var computeSizes = function (cells) {\n    if (cells === void 0) { cells = []; }\n    var total = sumSizes(cells);\n    if (total === MAX_CELLS_PER_ROW) {\n        return cells;\n    }\n    var count = cells.length;\n    var sizePerCell = Math.floor(MAX_CELLS_PER_ROW / count);\n    var spaceLeft = MAX_CELLS_PER_ROW - sizePerCell * (count - 1);\n    return cells.map(function (c, k) { return (__assign(__assign({}, c), { size: k === count - 1 ? spaceLeft : sizePerCell })); });\n};\n//# sourceMappingURL=sizing.js.map"]},"metadata":{},"sourceType":"module"}