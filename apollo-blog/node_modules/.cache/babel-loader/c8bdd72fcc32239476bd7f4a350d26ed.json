{"ast":null,"code":"import throttle from 'lodash.throttle';\nimport { createNativeCellReplacement, isNativeHTMLElementDrag } from '../../../helper/nativeDragHelpers';\nimport { delay } from '../../../helper/throttle';\nimport { computeAndDispatchHover, computeAndDispatchInsert } from '../../../service/hover/input';\nimport logger from '../../../service/logger';\nvar last = {\n  hover: '',\n  drag: ''\n};\n\nvar clear = function (hover, drag) {\n  if (hover.id === last.hover && drag === last.drag) {\n    return;\n  }\n\n  last = {\n    hover: hover.id,\n    drag: drag\n  };\n  hover.clearHover(drag);\n};\n\nexport var target = {\n  hover: throttle(function (hover, monitor, component) {\n    // tslint:disable-next-line:no-any\n    var drag = monitor.getItem();\n\n    if (!drag) {\n      // item undefined, happens when throttle triggers after drop\n      return;\n    }\n\n    if (isNativeHTMLElementDrag(monitor)) {\n      drag = createNativeCellReplacement();\n    }\n\n    if (!drag) {\n      return;\n    } else if (drag.id === hover.id) {\n      clear(hover, drag.id);\n      return;\n    } else if (!monitor.isOver({\n      shallow: true\n    })) {\n      return;\n    } else if (hover.ancestors.indexOf(drag.id) > -1) {\n      // If hovering over a child of itself\n      clear(hover, drag.id);\n      return;\n    } else if (!hover.id) {\n      // If hovering over something that isn't a cell or hasn't an id, do nothing. Should be an edge case\n      logger.warn('Canceled cell.drop.target.hover: no id given.', hover, drag);\n      return;\n    }\n\n    computeAndDispatchHover( // tslint:disable-next-line:no-any\n    hover, drag, monitor, component, '10x10-no-inline');\n  }, delay, {\n    leading: false\n  }),\n  canDrop: function (_a, monitor) {\n    var id = _a.id,\n        ancestors = _a.ancestors;\n    var item = monitor.getItem();\n    return item.id !== id || ancestors.indexOf(item.id) === -1;\n  },\n  // tslint:disable-next-line:no-any\n  drop: function (hover, monitor, component) {\n    var drag = monitor.getItem();\n\n    if (isNativeHTMLElementDrag(monitor)) {\n      var plugins = component.props.config.plugins;\n      drag = plugins.createNativePlugin(hover, monitor, component);\n    }\n\n    if (monitor.didDrop() || !monitor.isOver({\n      shallow: true\n    })) {\n      // If the item drop occurred deeper down the tree, don't do anything\n      return;\n    } else if (hover.ancestors.indexOf(drag.id) > -1) {\n      // If hovering over a child of itself\n      hover.cancelCellDrag(drag.id);\n      return;\n    } else if (drag.id === hover.id) {\n      hover.cancelCellDrag(drag.id);\n      return;\n    }\n\n    computeAndDispatchInsert( // tslint:disable-next-line:no-any\n    hover, drag, monitor, component, '10x10-no-inline');\n  }\n};\nexport var connect = function (_connect, monitor) {\n  return {\n    connectDropTarget: _connect.dropTarget(),\n    isOverCurrent: monitor.isOver({\n      shallow: true\n    })\n  };\n};","map":{"version":3,"sources":["../../../../src/components/Row/Droppable/dnd.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import throttle from 'lodash.throttle';\nimport { createNativeCellReplacement, isNativeHTMLElementDrag } from '../../../helper/nativeDragHelpers';\nimport { delay } from '../../../helper/throttle';\nimport { computeAndDispatchHover, computeAndDispatchInsert } from '../../../service/hover/input';\nimport logger from '../../../service/logger';\nvar last = {\n    hover: '',\n    drag: '',\n};\nvar clear = function (hover, drag) {\n    if (hover.id === last.hover && drag === last.drag) {\n        return;\n    }\n    last = { hover: hover.id, drag: drag };\n    hover.clearHover(drag);\n};\nexport var target = {\n    hover: throttle(function (hover, monitor, component) {\n        // tslint:disable-next-line:no-any\n        var drag = monitor.getItem();\n        if (!drag) {\n            // item undefined, happens when throttle triggers after drop\n            return;\n        }\n        if (isNativeHTMLElementDrag(monitor)) {\n            drag = createNativeCellReplacement();\n        }\n        if (!drag) {\n            return;\n        }\n        else if (drag.id === hover.id) {\n            clear(hover, drag.id);\n            return;\n        }\n        else if (!monitor.isOver({ shallow: true })) {\n            return;\n        }\n        else if (hover.ancestors.indexOf(drag.id) > -1) {\n            // If hovering over a child of itself\n            clear(hover, drag.id);\n            return;\n        }\n        else if (!hover.id) {\n            // If hovering over something that isn't a cell or hasn't an id, do nothing. Should be an edge case\n            logger.warn('Canceled cell.drop.target.hover: no id given.', hover, drag);\n            return;\n        }\n        computeAndDispatchHover(\n        // tslint:disable-next-line:no-any\n        hover, drag, monitor, component, '10x10-no-inline');\n    }, delay, { leading: false }),\n    canDrop: function (_a, monitor) {\n        var id = _a.id, ancestors = _a.ancestors;\n        var item = monitor.getItem();\n        return item.id !== id || ancestors.indexOf(item.id) === -1;\n    },\n    // tslint:disable-next-line:no-any\n    drop: function (hover, monitor, component) {\n        var drag = monitor.getItem();\n        if (isNativeHTMLElementDrag(monitor)) {\n            var plugins = component.props.config.plugins;\n            drag = plugins.createNativePlugin(hover, monitor, component);\n        }\n        if (monitor.didDrop() || !monitor.isOver({ shallow: true })) {\n            // If the item drop occurred deeper down the tree, don't do anything\n            return;\n        }\n        else if (hover.ancestors.indexOf(drag.id) > -1) {\n            // If hovering over a child of itself\n            hover.cancelCellDrag(drag.id);\n            return;\n        }\n        else if (drag.id === hover.id) {\n            hover.cancelCellDrag(drag.id);\n            return;\n        }\n        computeAndDispatchInsert(\n        // tslint:disable-next-line:no-any\n        hover, drag, monitor, component, '10x10-no-inline');\n    },\n};\nexport var connect = function (_connect, monitor) { return ({\n    connectDropTarget: _connect.dropTarget(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n}); };\n//# sourceMappingURL=dnd.js.map"]},"metadata":{},"sourceType":"module"}