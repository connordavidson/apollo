{"ast":null,"code":"var _jsxFileName = \"/Users/connordavidson/Desktop/apollo_blog/apollo-blog/src/containers/Account/Signup.js\";\nimport React, { useState } from \"react\";\nimport { Button, FormGroup, FormControl, Badge } from \"react-bootstrap\";\nimport \"../../content/css/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { authSignup } from \"../../store/actions/auth\";\n\nclass Signup extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: null,\n      //for whne the page is loading\n      error: null,\n      //holds any error with submitting the form\n      email: \"\",\n      //holds the email value\n      username: \"\",\n      //holds the email value\n      password: \"\",\n      //holds the password value\n      confirm_password: \"\" //holds the confirm_password value\n\n    };\n\n    this.handleEmail = e => {\n      this.setState({\n        email: e.target.value\n      });\n    };\n\n    this.handleUsername = e => {\n      this.setState({\n        username: e.target.value\n      });\n    };\n\n    this.handlePassword = e => {\n      this.setState({\n        password: e.target.value\n      });\n    };\n\n    this.handleConfirmPassword = e => {\n      this.setState({\n        confirm_password: e.target.value\n      });\n    };\n\n    this.confirmPasswords = () => {};\n\n    this.handleValidated = () => {\n      var email_valid = email.length > 0;\n      var username_valid = username.length > 0;\n      var password_valid = password.length > 8;\n      var confirm_password_valid = confirm_password.length > 8;\n      var passwords_match = password_valid === confirm_password_valid;\n      return email.length > 0 && username.length > 0 && password.length > 8 && confirm_password.length > 8;\n    };\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const {\n      username,\n      password\n    } = this.state;\n    this.props.signup(email, username, password, confirm_password);\n  }\n\n  render() {\n    const {\n      email,\n      username,\n      password,\n      confirm_password\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"account-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Signup \"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(FormGroup, {\n      controlId: \"email\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Email\", React.createElement(FormControl, {\n      required: true,\n      autoFocus: true,\n      type: \"email\",\n      value: email,\n      onChange: this.handleEmail,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      controlId: \"email\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Username\", React.createElement(FormControl, {\n      required: true,\n      value: username,\n      onChange: this.handleUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      controlId: \"password\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Password\", React.createElement(FormControl, {\n      required: true,\n      value: password,\n      onChange: this.handlePassword,\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      controlId: \"confirm_password\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Confirm Password\", React.createElement(FormControl, {\n      required: true,\n      value: confirm_password,\n      onChange: this.handleConfirmPassword,\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(Button, {\n      block: true,\n      bsSize: \"large\",\n      disabled: !validateForm(),\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Signup\"), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \" Already have an account? \", React.createElement(NavLink, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Login \"), \" \")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signup: (email, username, password1, password2) => dispatch(authLogin(email, username, password1, password2)) // mergeCartOnLogin: () => dispatch(mergeCartOnLogin()),\n\n  };\n};\n\nexport default connect(mapDispatchToProps)(Signup);","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo_blog/apollo-blog/src/containers/Account/Signup.js"],"names":["React","useState","Button","FormGroup","FormControl","Badge","NavLink","authSignup","Signup","Component","state","loading","error","email","username","password","confirm_password","handleEmail","e","setState","target","value","handleUsername","handlePassword","handleConfirmPassword","confirmPasswords","handleValidated","email_valid","length","username_valid","password_valid","confirm_password_valid","passwords_match","handleSubmit","event","preventDefault","props","signup","render","validateForm","mapDispatchToProps","dispatch","password1","password2","authLogin","connect"],"mappings":"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","sourcesContent":["\nimport React, { useState } from \"react\";\nimport {\n  Button ,\n  FormGroup ,\n  FormControl ,\n  Badge ,\n\n} from \"react-bootstrap\";\nimport \"../../content/css/App.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { authSignup } from \"../../store/actions/auth\";\n\nclass  Signup extends React.Component  {\n  state = {\n    loading: null , //for whne the page is loading\n    error: null , //holds any error with submitting the form\n    email : \"\" , //holds the email value\n    username : \"\" , //holds the email value\n    password : \"\" , //holds the password value\n    confirm_password : \"\" , //holds the confirm_password value\n\n  }\n\n  handleEmail = (e) => {\n    this.setState({\n      email : e.target.value\n    })\n  }\n\n  handleUsername = (e) => {\n    this.setState({\n      username : e.target.value\n    })\n  }\n\n  handlePassword = (e) => {\n    this.setState({\n      password : e.target.value\n    })\n  }\n\n  handleConfirmPassword = (e) => {\n    this.setState({\n      confirm_password : e.target.value\n    })\n  }\n\n  confirmPasswords = () => {\n    \n  }\n\n  handleValidated = () => {\n    var email_valid = email.length > 0\n    var username_valid = username.length > 0\n    var password_valid = password.length > 8\n    var confirm_password_valid = confirm_password.length > 8\n    var passwords_match = password_valid === confirm_password_valid\n    return email.length > 0 && username.length > 0 && password.length > 8 && confirm_password.length > 8 ;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const {username, password} = this.state;\n    this.props.signup(email, username, password , confirm_password)\n  }\n\n  render(){\n    const {\n      email ,\n      username ,\n\n      password ,\n      confirm_password ,\n\n    } = this.state ;\n    return (\n      <div className=\"account-form\">\n\n        <form onSubmit={this.handleSubmit}>\n          <h3>Signup </h3>\n          <hr />\n          <FormGroup controlId=\"email\" bsSize=\"large\">\n            Email\n            <FormControl\n              required\n              autoFocus\n              type=\"email\"\n              value={email}\n              onChange={this.handleEmail}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"email\" bsSize=\"large\">\n            Username\n            <FormControl\n              required\n              value={username}\n              onChange={this.handleUsername}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"password\" bsSize=\"large\">\n            Password\n            <FormControl\n              required\n              value={password}\n              onChange={this.handlePassword}\n              type=\"password\"\n            />\n          </FormGroup>\n          <FormGroup controlId=\"confirm_password\" bsSize=\"large\">\n            Confirm Password\n            <FormControl\n              required\n              value={confirm_password}\n              onChange={this.handleConfirmPassword}\n              type=\"password\"\n            />\n          </FormGroup>\n          <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\n            Signup\n          </Button>\n          <Badge> Already have an account? <NavLink to=\"/login\">Login </NavLink> </Badge>\n        </form>\n      </div>\n    );\n  }\n\n}\n\n\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signup: (email, username, password1 , password2) => dispatch(authLogin(email, username, password1 , password2)),\n    // mergeCartOnLogin: () => dispatch(mergeCartOnLogin()),\n\n  };\n};\n\nexport default\n  connect(\n\n    mapDispatchToProps\n  )(Signup) ;\n"]},"metadata":{},"sourceType":"module"}