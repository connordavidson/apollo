{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport { signup_url, login_url } from '../../backend-urls'; // import {\n//   mergeCartOnLogin,\n//   removeCartOnLogout,\n// } from \"./cart\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, username, user_id) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username: username,\n    user_id: user_id\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(login_url, {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const user_id = res.data.user_id;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"user_id\", user_id);\n      localStorage.setItem(\"username\", username);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(token, username, user_id));\n      dispatch(checkAuthTimeout(10000)); //merges the cart when the user logs in. mergeCartOnLogin is located in actions/cart.js\n      // dispatch( mergeCartOnLogin(token) )\n    }).catch(err => {\n      // console.log(err.response.data.non_field_errors)\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(signup_url, {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(token, username, false));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n}; //added username to the authSuccess part and in the parameters of the function on 11/5/19\n\nexport const authCheckState = username => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    const username = localStorage.getItem(\"username\");\n    const user_id = localStorage.getItem(\"user_id\");\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token, username, user_id));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    //removes the user token, expiration date, staff status, and username from local storage\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationDate\");\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"staff\");\n    localStorage.removeItem(\"user_id\");\n    dispatch(logout());\n  };\n}; //deprecated (from other apollo code)\n\nexport const logoutRemoveCart = () => {\n  const token = localStorage.getItem('token'); //removes the token and expiration date from local storage\n\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  console.log('TOKEN: ', token);\n  return dispatch => {\n    //calls removeCartOnLogout() from actions/cart.js\n    // dispatch( removeCartOnLogout(token) )\n    dispatch(logout());\n  };\n};","map":{"version":3,"sources":["/Users/connordavidson/Desktop/apollo-blog/src/store/actions/auth.js"],"names":["axios","actionTypes","signup_url","login_url","authStart","type","AUTH_START","authSuccess","token","username","user_id","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","password","post","then","res","data","key","expirationDate","Date","getTime","localStorage","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined","logoutUser","removeItem","logoutRemoveCart","console","log"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport {\n    signup_url ,\n    login_url ,\n\n} from '../../backend-urls' ;\n// import {\n//   mergeCartOnLogin,\n//   removeCartOnLogout,\n// } from \"./cart\";\n\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (token , username , user_id) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username : username,\n    user_id : user_id\n  };\n};\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\n\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios\n      .post(login_url, {\n        username: username,\n        password: password\n      })\n      .then(res => {\n        const token = res.data.key;\n        const user_id = res.data.user_id;\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"user_id\", user_id);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token , username , user_id));\n        dispatch(checkAuthTimeout(10000));\n\n        //merges the cart when the user logs in. mergeCartOnLogin is located in actions/cart.js\n        // dispatch( mergeCartOnLogin(token) )\n\n      })\n      .catch(err => {\n        // console.log(err.response.data.non_field_errors)\n        dispatch(authFail(err));\n      });\n  };\n};\n\n\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios\n      .post(signup_url, {\n        username: username,\n        email: email,\n        password1: password1,\n        password2: password2\n      })\n      .then(res => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token , username , false));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\n//added username to the authSuccess part and in the parameters of the function on 11/5/19\nexport const authCheckState = (username) => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    const username = localStorage.getItem(\"username\");\n    const user_id = localStorage.getItem(\"user_id\") ;\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token , username , user_id));\n        dispatch(\n          checkAuthTimeout(\n            (expirationDate.getTime() - new Date().getTime()) / 1000\n          )\n        );\n      }\n    }\n  };\n};\n\n\n\n\nexport const logoutUser = () => {\n    return dispatch => {\n      //removes the user token, expiration date, staff status, and username from local storage\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expirationDate\");\n      localStorage.removeItem(\"username\");\n      localStorage.removeItem(\"staff\");\n      localStorage.removeItem(\"user_id\");\n      dispatch( logout() )\n    }\n}\n\n\n\n\n//deprecated (from other apollo code)\nexport const logoutRemoveCart = () => {\n  const token = localStorage.getItem('token')\n  //removes the token and expiration date from local storage\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n\n  console.log('TOKEN: ', token)\n  return dispatch => {\n    //calls removeCartOnLogout() from actions/cart.js\n    // dispatch( removeCartOnLogout(token) )\n    dispatch( logout() )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}