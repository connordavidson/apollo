{"ast":null,"code":"import isPlainObject from 'is-plain-object';\nimport { createDraft, finishDraft, isDraft, produce } from 'immer';\nimport { reverse } from 'esrever';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DIRTY_PATHS = new WeakMap();\nvar FLUSHING = new WeakMap();\nvar NORMALIZING = new WeakMap();\nvar PATH_REFS = new WeakMap();\nvar POINT_REFS = new WeakMap();\nvar RANGE_REFS = new WeakMap();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\r\n * Create a new Slate `Editor` object.\r\n */\n\n\nvar createEditor = () => {\n  var editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n    apply: op => {\n      for (var ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op);\n      }\n\n      for (var _ref of Editor.pointRefs(editor)) {\n        PointRef.transform(_ref, op);\n      }\n\n      for (var _ref2 of Editor.rangeRefs(editor)) {\n        RangeRef.transform(_ref2, op);\n      }\n\n      var set = new Set();\n      var dirtyPaths = [];\n\n      var add = path => {\n        if (path) {\n          var key = path.join(',');\n\n          if (!set.has(key)) {\n            set.add(key);\n            dirtyPaths.push(path);\n          }\n        }\n      };\n\n      var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];\n      var newDirtyPaths = getDirtyPaths(op);\n\n      for (var path of oldDirtyPaths) {\n        var newPath = Path.transform(path, op);\n        add(newPath);\n      }\n\n      for (var _path of newDirtyPaths) {\n        add(_path);\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths);\n      Editor.transform(editor, op);\n      editor.operations.push(op);\n      Editor.normalize(editor); // Clear any formats applied to the cursor if the selection changes.\n\n      if (op.type === 'set_selection') {\n        editor.marks = null;\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true);\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false);\n          editor.onChange();\n          editor.operations = [];\n        });\n      }\n    },\n    addMark: (key, value) => {\n      var {\n        selection\n      } = editor;\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(editor, {\n            [key]: value\n          }, {\n            match: Text.isText,\n            split: true\n          });\n        } else {\n          var marks = _objectSpread({}, Editor.marks(editor) || {}, {\n            [key]: value\n          });\n\n          editor.marks = marks;\n          editor.onChange();\n        }\n      }\n    },\n    deleteBackward: unit => {\n      var {\n        selection\n      } = editor;\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, {\n          unit,\n          reverse: true\n        });\n      }\n    },\n    deleteForward: unit => {\n      var {\n        selection\n      } = editor;\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, {\n          unit\n        });\n      }\n    },\n    deleteFragment: () => {\n      var {\n        selection\n      } = editor;\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor);\n      }\n    },\n    insertBreak: () => {\n      Transforms.splitNodes(editor, {\n        always: true\n      });\n    },\n    insertFragment: fragment => {\n      Transforms.insertFragment(editor, fragment);\n    },\n    insertNode: node => {\n      Transforms.insertNodes(editor, node);\n    },\n    insertText: text => {\n      var {\n        selection,\n        marks\n      } = editor;\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          var inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest'\n          });\n\n          if (inline) {\n            var [, inlinePath] = inline;\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              var point = Editor.after(editor, inlinePath);\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point\n              });\n            }\n          }\n        }\n\n        if (marks) {\n          var node = _objectSpread({\n            text\n          }, marks);\n\n          Transforms.insertNodes(editor, node);\n        } else {\n          Transforms.insertText(editor, text);\n        }\n\n        editor.marks = null;\n      }\n    },\n    normalizeNode: entry => {\n      var [node, path] = entry; // There are no core normalizations for text nodes.\n\n      if (Text.isText(node)) {\n        return;\n      } // Ensure that block and inline nodes have at least one text child.\n\n\n      if (Element.isElement(node) && node.children.length === 0) {\n        var child = {\n          text: ''\n        };\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true\n        });\n        return;\n      } // Determine whether the node should have block or inline children.\n\n\n      var shouldHaveInlines = Editor.isEditor(node) ? false : Element.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0])); // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n\n      var n = 0;\n\n      for (var i = 0; i < node.children.length; i++, n++) {\n        var _child = node.children[i];\n        var prev = node.children[i - 1];\n        var isLast = i === node.children.length - 1;\n        var isInlineOrText = Text.isText(_child) || Element.isElement(_child) && editor.isInline(_child); // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n),\n            voids: true\n          });\n          n--;\n        } else if (Element.isElement(_child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(_child)) {\n            if (prev == null || !Text.isText(prev)) {\n              var newChild = {\n                text: ''\n              };\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true\n              });\n              n++;\n            } else if (isLast) {\n              var _newChild = {\n                text: ''\n              };\n              Transforms.insertNodes(editor, _newChild, {\n                at: path.concat(n + 1),\n                voids: true\n              });\n              n++;\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(_child, prev, {\n              loose: true\n            })) {\n              Transforms.mergeNodes(editor, {\n                at: path.concat(n),\n                voids: true\n              });\n              n--;\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true\n              });\n              n--;\n            } else if (isLast && _child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true\n              });\n              n--;\n            }\n          }\n        }\n      }\n    },\n    removeMark: key => {\n      var {\n        selection\n      } = editor;\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true\n          });\n        } else {\n          var marks = _objectSpread({}, Editor.marks(editor) || {});\n\n          delete marks[key];\n          editor.marks = marks;\n          editor.onChange();\n        }\n      }\n    }\n  };\n  return editor;\n};\n/**\r\n * Get the \"dirty\" paths generated from an operation.\r\n */\n\n\nvar getDirtyPaths = op => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node':\n      {\n        var {\n          path\n        } = op;\n        return Path.levels(path);\n      }\n\n    case 'insert_node':\n      {\n        var {\n          node,\n          path: _path2\n        } = op;\n        var levels = Path.levels(_path2);\n        var descendants = Text.isText(node) ? [] : Array.from(Node.nodes(node), _ref3 => {\n          var [, p] = _ref3;\n          return _path2.concat(p);\n        });\n        return [...levels, ...descendants];\n      }\n\n    case 'merge_node':\n      {\n        var {\n          path: _path3\n        } = op;\n        var ancestors = Path.ancestors(_path3);\n        var previousPath = Path.previous(_path3);\n        return [...ancestors, previousPath];\n      }\n\n    case 'move_node':\n      {\n        var {\n          path: _path4,\n          newPath\n        } = op;\n\n        if (Path.equals(_path4, newPath)) {\n          return [];\n        }\n\n        var oldAncestors = [];\n        var newAncestors = [];\n\n        for (var ancestor of Path.ancestors(_path4)) {\n          var p = Path.transform(ancestor, op);\n          oldAncestors.push(p);\n        }\n\n        for (var _ancestor of Path.ancestors(newPath)) {\n          var _p = Path.transform(_ancestor, op);\n\n          newAncestors.push(_p);\n        }\n\n        return [...oldAncestors, ...newAncestors];\n      }\n\n    case 'remove_node':\n      {\n        var {\n          path: _path5\n        } = op;\n\n        var _ancestors = Path.ancestors(_path5);\n\n        return [..._ancestors];\n      }\n\n    case 'split_node':\n      {\n        var {\n          path: _path6\n        } = op;\n\n        var _levels = Path.levels(_path6);\n\n        var nextPath = Path.next(_path6);\n        return [..._levels, nextPath];\n      }\n\n    default:\n      {\n        return [];\n      }\n  }\n};\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n/**\r\n * Constants for string distance checking.\r\n */\n\n\nvar SPACE = /\\s/;\nvar PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\nvar CHAMELEON = /['\\u2018\\u2019]/;\nvar SURROGATE_START = 0xd800;\nvar SURROGATE_END = 0xdfff;\nvar ZERO_WIDTH_JOINER = 0x200d;\n/**\r\n * Get the distance to the end of the first character in a string of text.\r\n */\n\nvar getCharacterDistance = text => {\n  var offset = 0; // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n\n  var prev = null;\n  var charCode = text.charCodeAt(0);\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      var modifier = isModifier(charCode, text, offset); // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n\n      if (prev === 'SURR' || prev === 'BMP') {\n        break;\n      }\n\n      offset += 2;\n      prev = modifier ? 'MOD' : 'SURR';\n      charCode = text.charCodeAt(offset); // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n\n      continue;\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1;\n      prev = 'ZWJ';\n      charCode = text.charCodeAt(offset);\n      continue;\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break;\n      }\n\n      offset += 1;\n      prev = 'BMP';\n      charCode = text.charCodeAt(offset);\n      continue;\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break;\n      }\n\n      offset += 1;\n      prev = 'VAR';\n      charCode = text.charCodeAt(offset);\n      continue;\n    } // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n\n\n    if (prev === 'MOD') {\n      offset += 1;\n      break;\n    } // If while loop ever gets here, we're done (e.g latin chars).\n\n\n    break;\n  }\n\n  return offset || 1;\n};\n/**\r\n * Get the distance to the end of the first word in a string of text.\r\n */\n\n\nvar getWordDistance = text => {\n  var length = 0;\n  var i = 0;\n  var started = false;\n  var char;\n\n  while (char = text.charAt(i)) {\n    var l = getCharacterDistance(char);\n    char = text.slice(i, i + l);\n    var rest = text.slice(i + l);\n\n    if (isWordCharacter(char, rest)) {\n      started = true;\n      length += l;\n    } else if (!started) {\n      length += l;\n    } else {\n      break;\n    }\n\n    i += l;\n  }\n\n  return length;\n};\n/**\r\n * Check if a character is a word character. The `remaining` argument is used\r\n * because sometimes you must read subsequent characters to truly determine it.\r\n */\n\n\nvar isWordCharacter = (char, remaining) => {\n  if (SPACE.test(char)) {\n    return false;\n  } // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n\n\n  if (CHAMELEON.test(char)) {\n    var next = remaining.charAt(0);\n    var length = getCharacterDistance(next);\n    next = remaining.slice(0, length);\n    var rest = remaining.slice(length);\n\n    if (isWordCharacter(next, rest)) {\n      return true;\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false;\n  }\n\n  return true;\n};\n/**\r\n * Determines if `code` is a surrogate\r\n */\n\n\nvar isSurrogate = code => SURROGATE_START <= code && code <= SURROGATE_END;\n/**\r\n * Does `code` form Modifier with next one.\r\n *\r\n * https://emojipedia.org/modifiers/\r\n */\n\n\nvar isModifier = (code, text, offset) => {\n  if (code === 0xd83c) {\n    var next = text.charCodeAt(offset + 1);\n    return next <= 0xdfff && next >= 0xdffb;\n  }\n\n  return false;\n};\n/**\r\n * Is `code` a Variation Selector.\r\n *\r\n * https://codepoints.net/variation_selectors\r\n */\n\n\nvar isVariationSelector = code => {\n  return code <= 0xfe0f && code >= 0xfe00;\n};\n/**\r\n * Is `code` one of the BMP codes used in emoji sequences.\r\n *\r\n * https://emojipedia.org/emoji-zwj-sequences/\r\n */\n\n\nvar isBMPEmoji = code => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return code === 0x2764 || // heart (❤)\n  code === 0x2642 || // male (♂)\n  code === 0x2640 || // female (♀)\n  code === 0x2620 || // scull (☠)\n  code === 0x2695 || // medical (⚕)\n  code === 0x2708 || // plane (✈️)\n  code === 0x25ef // large circle (◯)\n  ;\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Editor = {\n  /**\r\n   * Get the ancestor above a location in the document.\r\n   */\n  above(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match\n    } = options;\n\n    if (!at) {\n      return;\n    }\n\n    var path = Editor.path(editor, at);\n    var reverse = mode === 'lowest';\n\n    for (var [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p];\n      }\n    }\n  },\n\n  /**\r\n   * Add a custom property to the leaf text nodes in the current selection.\r\n   *\r\n   * If the selection is currently collapsed, the marks will be added to the\r\n   * `editor.marks` property instead, and applied when text is inserted next.\r\n   */\n  addMark(editor, key, value) {\n    editor.addMark(key, value);\n  },\n\n  /**\r\n   * Get the point after a location.\r\n   */\n  after(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var anchor = Editor.point(editor, at, {\n      edge: 'end'\n    });\n    var focus = Editor.end(editor, []);\n    var range = {\n      anchor,\n      focus\n    };\n    var {\n      distance = 1\n    } = options;\n    var d = 0;\n    var target;\n\n    for (var p of Editor.positions(editor, _objectSpread$1({}, options, {\n      at: range\n    }))) {\n      if (d > distance) {\n        break;\n      }\n\n      if (d !== 0) {\n        target = p;\n      }\n\n      d++;\n    }\n\n    return target;\n  },\n\n  /**\r\n   * Get the point before a location.\r\n   */\n  before(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var anchor = Editor.start(editor, []);\n    var focus = Editor.point(editor, at, {\n      edge: 'start'\n    });\n    var range = {\n      anchor,\n      focus\n    };\n    var {\n      distance = 1\n    } = options;\n    var d = 0;\n    var target;\n\n    for (var p of Editor.positions(editor, _objectSpread$1({}, options, {\n      at: range,\n      reverse: true\n    }))) {\n      if (d > distance) {\n        break;\n      }\n\n      if (d !== 0) {\n        target = p;\n      }\n\n      d++;\n    }\n\n    return target;\n  },\n\n  /**\r\n   * Delete content in the editor backward from the current selection.\r\n   */\n  deleteBackward(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      unit = 'character'\n    } = options;\n    editor.deleteBackward(unit);\n  },\n\n  /**\r\n   * Delete content in the editor forward from the current selection.\r\n   */\n  deleteForward(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      unit = 'character'\n    } = options;\n    editor.deleteForward(unit);\n  },\n\n  /**\r\n   * Delete the content in the current selection.\r\n   */\n  deleteFragment(editor) {\n    editor.deleteFragment();\n  },\n\n  /**\r\n   * Get the start and end points of a location.\r\n   */\n  edges(editor, at) {\n    return [Editor.start(editor, at), Editor.end(editor, at)];\n  },\n\n  /**\r\n   * Get the end point of a location.\r\n   */\n  end(editor, at) {\n    return Editor.point(editor, at, {\n      edge: 'end'\n    });\n  },\n\n  /**\r\n   * Get the first node at a location.\r\n   */\n  first(editor, at) {\n    var path = Editor.path(editor, at, {\n      edge: 'start'\n    });\n    return Editor.node(editor, path);\n  },\n\n  /**\r\n   * Get the fragment at a location.\r\n   */\n  fragment(editor, at) {\n    var range = Editor.range(editor, at);\n    var fragment = Node.fragment(editor, range);\n    return fragment;\n  },\n\n  /**\r\n   * Check if a node has block children.\r\n   */\n  hasBlocks(editor, element) {\n    return element.children.some(n => Editor.isBlock(editor, n));\n  },\n\n  /**\r\n   * Check if a node has inline and text children.\r\n   */\n  hasInlines(editor, element) {\n    return element.children.some(n => Text.isText(n) || Editor.isInline(editor, n));\n  },\n\n  /**\r\n   * Check if a node has text children.\r\n   */\n  hasTexts(editor, element) {\n    return element.children.every(n => Text.isText(n));\n  },\n\n  /**\r\n   * Insert a block break at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertBreak(editor) {\n    editor.insertBreak();\n  },\n\n  /**\r\n   * Insert a fragment at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertFragment(editor, fragment) {\n    editor.insertFragment(fragment);\n  },\n\n  /**\r\n   * Insert a node at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertNode(editor, node) {\n    editor.insertNode(node);\n  },\n\n  /**\r\n   * Insert text at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertText(editor, text) {\n    editor.insertText(text);\n  },\n\n  /**\r\n   * Check if a value is a block `Element` object.\r\n   */\n  isBlock(editor, value) {\n    return Element.isElement(value) && !editor.isInline(value);\n  },\n\n  /**\r\n   * Check if a value is an `Editor` object.\r\n   */\n  isEditor(value) {\n    return isPlainObject(value) && typeof value.addMark === 'function' && typeof value.apply === 'function' && typeof value.deleteBackward === 'function' && typeof value.deleteForward === 'function' && typeof value.deleteFragment === 'function' && typeof value.insertBreak === 'function' && typeof value.insertFragment === 'function' && typeof value.insertNode === 'function' && typeof value.insertText === 'function' && typeof value.isInline === 'function' && typeof value.isVoid === 'function' && typeof value.normalizeNode === 'function' && typeof value.onChange === 'function' && typeof value.removeMark === 'function' && (value.marks === null || isPlainObject(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node.isNodeList(value.children) && Operation.isOperationList(value.operations);\n  },\n\n  /**\r\n   * Check if a point is the end point of a location.\r\n   */\n  isEnd(editor, point, at) {\n    var end = Editor.end(editor, at);\n    return Point.equals(point, end);\n  },\n\n  /**\r\n   * Check if a point is an edge of a location.\r\n   */\n  isEdge(editor, point, at) {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);\n  },\n\n  /**\r\n   * Check if an element is empty, accounting for void nodes.\r\n   */\n  isEmpty(editor, element) {\n    var {\n      children\n    } = element;\n    var [first] = children;\n    return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === '' && !editor.isVoid(element);\n  },\n\n  /**\r\n   * Check if a value is an inline `Element` object.\r\n   */\n  isInline(editor, value) {\n    return Element.isElement(value) && editor.isInline(value);\n  },\n\n  /**\r\n   * Check if the editor is currently normalizing after each operation.\r\n   */\n  isNormalizing(editor) {\n    var isNormalizing = NORMALIZING.get(editor);\n    return isNormalizing === undefined ? true : isNormalizing;\n  },\n\n  /**\r\n   * Check if a point is the start point of a location.\r\n   */\n  isStart(editor, point, at) {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false;\n    }\n\n    var start = Editor.start(editor, at);\n    return Point.equals(point, start);\n  },\n\n  /**\r\n   * Check if a value is a void `Element` object.\r\n   */\n  isVoid(editor, value) {\n    return Element.isElement(value) && editor.isVoid(value);\n  },\n\n  /**\r\n   * Get the last node at a location.\r\n   */\n  last(editor, at) {\n    var path = Editor.path(editor, at, {\n      edge: 'end'\n    });\n    return Editor.node(editor, path);\n  },\n\n  /**\r\n   * Get the leaf text node at a location.\r\n   */\n  leaf(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var node = Node.leaf(editor, path);\n    return [node, path];\n  },\n\n  /**\r\n   * Iterate through all of the levels at a location.\r\n   */\n  *levels(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      at = editor.selection,\n      reverse = false,\n      voids = false\n    } = options;\n    var {\n      match\n    } = options;\n\n    if (match == null) {\n      match = () => true;\n    }\n\n    if (!at) {\n      return;\n    }\n\n    var levels = [];\n    var path = Editor.path(editor, at);\n\n    for (var [n, p] of Node.levels(editor, path)) {\n      if (!match(n)) {\n        continue;\n      }\n\n      levels.push([n, p]);\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break;\n      }\n    }\n\n    if (reverse) {\n      levels.reverse();\n    }\n\n    yield* levels;\n  },\n\n  /**\r\n   * Get the marks that would be added to text at the current selection.\r\n   */\n  marks(editor) {\n    var {\n      marks,\n      selection\n    } = editor;\n\n    if (!selection) {\n      return null;\n    }\n\n    if (marks) {\n      return marks;\n    }\n\n    if (Range.isExpanded(selection)) {\n      var [match] = Editor.nodes(editor, {\n        match: Text.isText\n      });\n\n      if (match) {\n        var [_node] = match;\n\n        var _rest = _objectWithoutProperties(_node, [\"text\"]);\n\n        return _rest;\n      } else {\n        return {};\n      }\n    }\n\n    var {\n      anchor\n    } = selection;\n    var {\n      path\n    } = anchor;\n    var [node] = Editor.leaf(editor, path);\n\n    if (anchor.offset === 0) {\n      var prev = Editor.previous(editor, {\n        at: path,\n        match: Text.isText\n      });\n      var block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n)\n      });\n\n      if (prev && block) {\n        var [prevNode, prevPath] = prev;\n        var [, blockPath] = block;\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode;\n        }\n      }\n    }\n\n    var rest = _objectWithoutProperties(node, [\"text\"]);\n\n    return rest;\n  },\n\n  /**\r\n   * Get the matching node in the branch of the document after a location.\r\n   */\n  next(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      mode = 'lowest',\n      voids = false\n    } = options;\n    var {\n      match,\n      at = editor.selection\n    } = options;\n\n    if (!at) {\n      return;\n    }\n\n    var [, from] = Editor.last(editor, at);\n    var [, to] = Editor.last(editor, []);\n    var span = [from, to];\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(\"Cannot get the next node from the root node!\");\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        var [parent] = Editor.parent(editor, at);\n\n        match = n => parent.children.includes(n);\n      } else {\n        match = () => true;\n      }\n    }\n\n    var [, next] = Editor.nodes(editor, {\n      at: span,\n      match,\n      mode,\n      voids\n    });\n    return next;\n  },\n\n  /**\r\n   * Get the node at a location.\r\n   */\n  node(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var node = Node.get(editor, path);\n    return [node, path];\n  },\n\n  /**\r\n   * Iterate through all of the nodes in the Editor.\r\n   */\n  *nodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false\n    } = options;\n    var {\n      match\n    } = options;\n\n    if (!match) {\n      match = () => true;\n    }\n\n    if (!at) {\n      return;\n    }\n\n    var from;\n    var to;\n\n    if (Span.isSpan(at)) {\n      from = at[0];\n      to = at[1];\n    } else {\n      var first = Editor.path(editor, at, {\n        edge: 'start'\n      });\n      var last = Editor.path(editor, at, {\n        edge: 'end'\n      });\n      from = reverse ? last : first;\n      to = reverse ? first : last;\n    }\n\n    var iterable = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: _ref => {\n        var [n] = _ref;\n        return voids ? false : Editor.isVoid(editor, n);\n      }\n    });\n    var matches = [];\n    var hit;\n\n    for (var [node, path] of iterable) {\n      var isLower = hit && Path.compare(path, hit[1]) === 0; // In highest mode any node lower than the last hit is not a match.\n\n      if (mode === 'highest' && isLower) {\n        continue;\n      }\n\n      if (!match(node)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return;\n        } else {\n          continue;\n        }\n      } // If there's a match and it's lower than the last, update the hit.\n\n\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path];\n        continue;\n      } // In lowest mode we emit the last hit, once it's guaranteed lowest.\n\n\n      var emit = mode === 'lowest' ? hit : [node, path];\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit);\n        } else {\n          yield emit;\n        }\n      }\n\n      hit = [node, path];\n    } // Since lowest is always emitting one behind, catch up at the end.\n\n\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit);\n      } else {\n        yield hit;\n      }\n    } // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n\n\n    if (universal) {\n      yield* matches;\n    }\n  },\n\n  /**\r\n   * Normalize any dirty objects in the editor.\r\n   */\n  normalize(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      force = false\n    } = options;\n\n    var getDirtyPaths = editor => {\n      return DIRTY_PATHS.get(editor) || [];\n    };\n\n    if (!Editor.isNormalizing(editor)) {\n      return;\n    }\n\n    if (force) {\n      var allPaths = Array.from(Node.nodes(editor), _ref2 => {\n        var [, p] = _ref2;\n        return p;\n      });\n      DIRTY_PATHS.set(editor, allPaths);\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return;\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      var max = getDirtyPaths(editor).length * 42; // HACK: better way?\n\n      var m = 0;\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(\"\\n            Could not completely normalize the editor after \".concat(max, \" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\\n          \"));\n        }\n\n        var path = getDirtyPaths(editor).pop();\n        var entry = Editor.node(editor, path);\n        editor.normalizeNode(entry);\n        m++;\n      }\n    });\n  },\n\n  /**\r\n   * Get the parent node of a location.\r\n   */\n  parent(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var parentPath = Path.parent(path);\n    var entry = Editor.node(editor, parentPath);\n    return entry;\n  },\n\n  /**\r\n   * Get the path of a location.\r\n   */\n  path(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      depth,\n      edge\n    } = options;\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        var [, firstPath] = Node.first(editor, at);\n        at = firstPath;\n      } else if (edge === 'end') {\n        var [, lastPath] = Node.last(editor, at);\n        at = lastPath;\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at);\n      } else if (edge === 'end') {\n        at = Range.end(at);\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path);\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path;\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth);\n    }\n\n    return at;\n  },\n\n  /**\r\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\r\n   * operations are applied to the editor.\r\n   */\n  pathRef(editor, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      affinity = 'forward'\n    } = options;\n    var ref = {\n      current: path,\n      affinity,\n\n      unref() {\n        var {\n          current\n        } = ref;\n        var pathRefs = Editor.pathRefs(editor);\n        pathRefs.delete(ref);\n        ref.current = null;\n        return current;\n      }\n\n    };\n    var refs = Editor.pathRefs(editor);\n    refs.add(ref);\n    return ref;\n  },\n\n  /**\r\n   * Get the set of currently tracked path refs of the editor.\r\n   */\n  pathRefs(editor) {\n    var refs = PATH_REFS.get(editor);\n\n    if (!refs) {\n      refs = new Set();\n      PATH_REFS.set(editor, refs);\n    }\n\n    return refs;\n  },\n\n  /**\r\n   * Get the start or end point of a location.\r\n   */\n  point(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      edge = 'start'\n    } = options;\n\n    if (Path.isPath(at)) {\n      var path;\n\n      if (edge === 'end') {\n        var [, lastPath] = Node.last(editor, at);\n        path = lastPath;\n      } else {\n        var [, firstPath] = Node.first(editor, at);\n        path = firstPath;\n      }\n\n      var node = Node.get(editor, path);\n\n      if (!Text.isText(node)) {\n        throw new Error(\"Cannot get the \".concat(edge, \" point in the node at path [\").concat(at, \"] because it has no \").concat(edge, \" text node.\"));\n      }\n\n      return {\n        path,\n        offset: edge === 'end' ? node.text.length : 0\n      };\n    }\n\n    if (Range.isRange(at)) {\n      var [start, end] = Range.edges(at);\n      return edge === 'start' ? start : end;\n    }\n\n    return at;\n  },\n\n  /**\r\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\r\n   * operations are applied to the editor.\r\n   */\n  pointRef(editor, point) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      affinity = 'forward'\n    } = options;\n    var ref = {\n      current: point,\n      affinity,\n\n      unref() {\n        var {\n          current\n        } = ref;\n        var pointRefs = Editor.pointRefs(editor);\n        pointRefs.delete(ref);\n        ref.current = null;\n        return current;\n      }\n\n    };\n    var refs = Editor.pointRefs(editor);\n    refs.add(ref);\n    return ref;\n  },\n\n  /**\r\n   * Get the set of currently tracked point refs of the editor.\r\n   */\n  pointRefs(editor) {\n    var refs = POINT_REFS.get(editor);\n\n    if (!refs) {\n      refs = new Set();\n      POINT_REFS.set(editor, refs);\n    }\n\n    return refs;\n  },\n\n  /**\r\n   * Iterate through all of the positions in the document where a `Point` can be\r\n   * placed.\r\n   *\r\n   * By default it will move forward by individual offsets at a time,  but you\r\n   * can pass the `unit: 'character'` option to moved forward one character, word,\r\n   * or line at at time.\r\n   *\r\n   * Note: void nodes are treated as a single point, and iteration will not\r\n   * happen inside their content.\r\n   */\n  *positions(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      at = editor.selection,\n      unit = 'offset',\n      reverse: reverse$1 = false\n    } = options;\n\n    if (!at) {\n      return;\n    }\n\n    var range = Editor.range(editor, at);\n    var [start, end] = Range.edges(range);\n    var first = reverse$1 ? end : start;\n    var string = '';\n    var available = 0;\n    var offset = 0;\n    var distance = null;\n    var isNewBlock = false;\n\n    var advance = () => {\n      if (distance == null) {\n        if (unit === 'character') {\n          distance = getCharacterDistance(string);\n        } else if (unit === 'word') {\n          distance = getWordDistance(string);\n        } else if (unit === 'line' || unit === 'block') {\n          distance = string.length;\n        } else {\n          distance = 1;\n        }\n\n        string = string.slice(distance);\n      } // Add or substract the offset.\n\n\n      offset = reverse$1 ? offset - distance : offset + distance; // Subtract the distance traveled from the available text.\n\n      available = available - distance; // If the available had room to spare, reset the distance so that it will\n      // advance again next time. Otherwise, set it to the overflow amount.\n\n      distance = available >= 0 ? null : 0 - available;\n    };\n\n    for (var [node, path] of Editor.nodes(editor, {\n      at,\n      reverse: reverse$1\n    })) {\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, since we don't want to iterate over\n        // their content. We instead always just yield their first point.\n        if (editor.isVoid(node)) {\n          yield Editor.start(editor, path);\n          continue;\n        }\n\n        if (editor.isInline(node)) {\n          continue;\n        }\n\n        if (Editor.hasInlines(editor, node)) {\n          var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);\n          var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);\n          var text = Editor.string(editor, {\n            anchor: s,\n            focus: e\n          });\n          string = reverse$1 ? reverse(text) : text;\n          isNewBlock = true;\n        }\n      }\n\n      if (Text.isText(node)) {\n        var isFirst = Path.equals(path, first.path);\n        available = node.text.length;\n        offset = reverse$1 ? available : 0;\n\n        if (isFirst) {\n          available = reverse$1 ? first.offset : available - first.offset;\n          offset = first.offset;\n        }\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield {\n            path,\n            offset\n          };\n        }\n\n        while (true) {\n          // If there's no more string, continue to the next block.\n          if (string === '') {\n            break;\n          } else {\n            advance();\n          } // If the available space hasn't overflow, we have another point to\n          // yield in the current text node.\n\n\n          if (available >= 0) {\n            yield {\n              path,\n              offset\n            };\n          } else {\n            break;\n          }\n        }\n\n        isNewBlock = false;\n      }\n    }\n  },\n\n  /**\r\n   * Get the matching node in the branch of the document before a location.\r\n   */\n  previous(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      mode = 'lowest',\n      voids = false\n    } = options;\n    var {\n      match,\n      at = editor.selection\n    } = options;\n\n    if (!at) {\n      return;\n    }\n\n    var [, from] = Editor.first(editor, at);\n    var [, to] = Editor.first(editor, []);\n    var span = [from, to];\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(\"Cannot get the previous node from the root node!\");\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        var [parent] = Editor.parent(editor, at);\n\n        match = n => parent.children.includes(n);\n      } else {\n        match = () => true;\n      }\n    }\n\n    var [, previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids\n    });\n    return previous;\n  },\n\n  /**\r\n   * Get a range of a location.\r\n   */\n  range(editor, at, to) {\n    if (Range.isRange(at) && !to) {\n      return at;\n    }\n\n    var start = Editor.start(editor, at);\n    var end = Editor.end(editor, to || at);\n    return {\n      anchor: start,\n      focus: end\n    };\n  },\n\n  /**\r\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\r\n   * operations are applied to the editor.\r\n   */\n  rangeRef(editor, range) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      affinity = 'forward'\n    } = options;\n    var ref = {\n      current: range,\n      affinity,\n\n      unref() {\n        var {\n          current\n        } = ref;\n        var rangeRefs = Editor.rangeRefs(editor);\n        rangeRefs.delete(ref);\n        ref.current = null;\n        return current;\n      }\n\n    };\n    var refs = Editor.rangeRefs(editor);\n    refs.add(ref);\n    return ref;\n  },\n\n  /**\r\n   * Get the set of currently tracked range refs of the editor.\r\n   */\n  rangeRefs(editor) {\n    var refs = RANGE_REFS.get(editor);\n\n    if (!refs) {\n      refs = new Set();\n      RANGE_REFS.set(editor, refs);\n    }\n\n    return refs;\n  },\n\n  /**\r\n   * Remove a custom property from all of the leaf text nodes in the current\r\n   * selection.\r\n   *\r\n   * If the selection is currently collapsed, the removal will be stored on\r\n   * `editor.marks` and applied to the text inserted next.\r\n   */\n  removeMark(editor, key) {\n    editor.removeMark(key);\n  },\n\n  /**\r\n   * Get the start point of a location.\r\n   */\n  start(editor, at) {\n    return Editor.point(editor, at, {\n      edge: 'start'\n    });\n  },\n\n  /**\r\n   * Get the text string content of a location.\r\n   *\r\n   * Note: the text of void nodes is presumed to be an empty string, regardless\r\n   * of what their actual content is.\r\n   */\n  string(editor, at) {\n    var range = Editor.range(editor, at);\n    var [start, end] = Range.edges(range);\n    var text = '';\n\n    for (var [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText\n    })) {\n      var t = node.text;\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset);\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset);\n      }\n\n      text += t;\n    }\n\n    return text;\n  },\n\n  /**\r\n   * Transform the editor by an operation.\r\n   */\n  transform(editor, op) {\n    editor.children = createDraft(editor.children);\n    var selection = editor.selection && createDraft(editor.selection);\n\n    switch (op.type) {\n      case 'insert_node':\n        {\n          var {\n            path,\n            node\n          } = op;\n          var parent = Node.parent(editor, path);\n          var index = path[path.length - 1];\n          parent.children.splice(index, 0, node);\n\n          if (selection) {\n            for (var [point, key] of Range.points(selection)) {\n              selection[key] = Point.transform(point, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'insert_text':\n        {\n          var {\n            path: _path,\n            offset,\n            text\n          } = op;\n\n          var _node2 = Node.leaf(editor, _path);\n\n          var before = _node2.text.slice(0, offset);\n\n          var after = _node2.text.slice(offset);\n\n          _node2.text = before + text + after;\n\n          if (selection) {\n            for (var [_point, _key] of Range.points(selection)) {\n              selection[_key] = Point.transform(_point, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'merge_node':\n        {\n          var {\n            path: _path2\n          } = op;\n\n          var _node3 = Node.get(editor, _path2);\n\n          var prevPath = Path.previous(_path2);\n          var prev = Node.get(editor, prevPath);\n\n          var _parent = Node.parent(editor, _path2);\n\n          var _index = _path2[_path2.length - 1];\n\n          if (Text.isText(_node3) && Text.isText(prev)) {\n            prev.text += _node3.text;\n          } else if (!Text.isText(_node3) && !Text.isText(prev)) {\n            prev.children.push(..._node3.children);\n          } else {\n            throw new Error(\"Cannot apply a \\\"merge_node\\\" operation at path [\".concat(_path2, \"] to nodes of different interaces: \").concat(_node3, \" \").concat(prev));\n          }\n\n          _parent.children.splice(_index, 1);\n\n          if (selection) {\n            for (var [_point2, _key2] of Range.points(selection)) {\n              selection[_key2] = Point.transform(_point2, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'move_node':\n        {\n          var {\n            path: _path3,\n            newPath\n          } = op;\n\n          if (Path.isAncestor(_path3, newPath)) {\n            throw new Error(\"Cannot move a path [\".concat(_path3, \"] to new path [\").concat(newPath, \"] because the destination is inside itself.\"));\n          }\n\n          var _node4 = Node.get(editor, _path3);\n\n          var _parent2 = Node.parent(editor, _path3);\n\n          var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to\n          // the same snapshot in time, there's a mismatch. After either\n          // removing the original position, the second step's path can be out\n          // of date. So instead of using the `op.newPath` directly, we\n          // transform `op.path` to ascertain what the `newPath` would be after\n          // the operation was applied.\n\n          _parent2.children.splice(_index2, 1);\n\n          var truePath = Path.transform(_path3, op);\n          var newParent = Node.get(editor, Path.parent(truePath));\n          var newIndex = truePath[truePath.length - 1];\n          newParent.children.splice(newIndex, 0, _node4);\n\n          if (selection) {\n            for (var [_point3, _key3] of Range.points(selection)) {\n              selection[_key3] = Point.transform(_point3, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'remove_node':\n        {\n          var {\n            path: _path4\n          } = op;\n          var _index3 = _path4[_path4.length - 1];\n\n          var _parent3 = Node.parent(editor, _path4);\n\n          _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the\n          // node that was removed we need to update the range or remove it.\n\n\n          if (selection) {\n            for (var [_point4, _key4] of Range.points(selection)) {\n              var result = Point.transform(_point4, op);\n\n              if (selection != null && result != null) {\n                selection[_key4] = result;\n              } else {\n                var _prev = void 0;\n\n                var next = void 0;\n\n                for (var [n, p] of Node.texts(editor)) {\n                  if (Path.compare(p, _path4) === -1) {\n                    _prev = [n, p];\n                  } else {\n                    next = [n, p];\n                    break;\n                  }\n                }\n\n                if (_prev) {\n                  _point4.path = _prev[1];\n                  _point4.offset = _prev[0].text.length;\n                } else if (next) {\n                  _point4.path = next[1];\n                  _point4.offset = 0;\n                } else {\n                  selection = null;\n                }\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 'remove_text':\n        {\n          var {\n            path: _path5,\n            offset: _offset,\n            text: _text2\n          } = op;\n\n          var _node5 = Node.leaf(editor, _path5);\n\n          var _before = _node5.text.slice(0, _offset);\n\n          var _after = _node5.text.slice(_offset + _text2.length);\n\n          _node5.text = _before + _after;\n\n          if (selection) {\n            for (var [_point5, _key5] of Range.points(selection)) {\n              selection[_key5] = Point.transform(_point5, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'set_node':\n        {\n          var {\n            path: _path6,\n            newProperties\n          } = op;\n\n          if (_path6.length === 0) {\n            throw new Error(\"Cannot set properties on the root node!\");\n          }\n\n          var _node6 = Node.get(editor, _path6);\n\n          for (var _key6 in newProperties) {\n            if (_key6 === 'children' || _key6 === 'text') {\n              throw new Error(\"Cannot set the \\\"\".concat(_key6, \"\\\" property of nodes!\"));\n            }\n\n            var value = newProperties[_key6];\n\n            if (value == null) {\n              delete _node6[_key6];\n            } else {\n              _node6[_key6] = value;\n            }\n          }\n\n          break;\n        }\n\n      case 'set_selection':\n        {\n          var {\n            newProperties: _newProperties\n          } = op;\n\n          if (_newProperties == null) {\n            selection = _newProperties;\n          } else if (selection == null) {\n            if (!Range.isRange(_newProperties)) {\n              throw new Error(\"Cannot apply an incomplete \\\"set_selection\\\" operation properties \".concat(JSON.stringify(_newProperties), \" when there is no current selection.\"));\n            }\n\n            selection = _newProperties;\n          } else {\n            Object.assign(selection, _newProperties);\n          }\n\n          break;\n        }\n\n      case 'split_node':\n        {\n          var {\n            path: _path7,\n            position,\n            properties\n          } = op;\n\n          if (_path7.length === 0) {\n            throw new Error(\"Cannot apply a \\\"split_node\\\" operation at path [\".concat(_path7, \"] because the root node cannot be split.\"));\n          }\n\n          var _node7 = Node.get(editor, _path7);\n\n          var _parent4 = Node.parent(editor, _path7);\n\n          var _index4 = _path7[_path7.length - 1];\n          var newNode;\n\n          if (Text.isText(_node7)) {\n            var _before2 = _node7.text.slice(0, position);\n\n            var _after2 = _node7.text.slice(position);\n\n            _node7.text = _before2;\n            newNode = _objectSpread$1({}, _node7, {}, properties, {\n              text: _after2\n            });\n          } else {\n            var _before3 = _node7.children.slice(0, position);\n\n            var _after3 = _node7.children.slice(position);\n\n            _node7.children = _before3;\n            newNode = _objectSpread$1({}, _node7, {}, properties, {\n              children: _after3\n            });\n          }\n\n          _parent4.children.splice(_index4 + 1, 0, newNode);\n\n          if (selection) {\n            for (var [_point6, _key7] of Range.points(selection)) {\n              selection[_key7] = Point.transform(_point6, op);\n            }\n          }\n\n          break;\n        }\n    }\n\n    editor.children = finishDraft(editor.children);\n\n    if (selection) {\n      editor.selection = isDraft(selection) ? finishDraft(selection) : selection;\n    } else {\n      editor.selection = null;\n    }\n  },\n\n  /**\r\n   * Convert a range into a non-hanging one.\r\n   */\n  unhangRange(editor, range) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      voids = false\n    } = options;\n    var [start, end] = Range.edges(range); // PERF: exit early if we can guarantee that the range isn't hanging.\n\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range;\n    }\n\n    var endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n)\n    });\n    var blockPath = endBlock ? endBlock[1] : [];\n    var first = Editor.start(editor, []);\n    var before = {\n      anchor: first,\n      focus: end\n    };\n    var skip = true;\n\n    for (var [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids\n    })) {\n      if (skip) {\n        skip = false;\n        continue;\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = {\n          path,\n          offset: node.text.length\n        };\n        break;\n      }\n    }\n\n    return {\n      anchor: start,\n      focus: end\n    };\n  },\n\n  /**\r\n   * Match a void node in the current branch of the editor.\r\n   */\n  void(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Editor.above(editor, _objectSpread$1({}, options, {\n      match: n => Editor.isVoid(editor, n)\n    }));\n  },\n\n  /**\r\n   * Call a function, deferring normalization until after it completes.\r\n   */\n  withoutNormalizing(editor, fn) {\n    var value = Editor.isNormalizing(editor);\n    NORMALIZING.set(editor, false);\n    fn();\n    NORMALIZING.set(editor, value);\n    Editor.normalize(editor);\n  }\n\n};\nvar Element = {\n  /**\r\n   * Check if a value implements the `Element` interface.\r\n   */\n  isElement(value) {\n    return isPlainObject(value) && Node.isNodeList(value.children) && !Editor.isEditor(value);\n  },\n\n  /**\r\n   * Check if a value is an array of `Element` objects.\r\n   */\n  isElementList(value) {\n    return Array.isArray(value) && (value.length === 0 || Element.isElement(value[0]));\n  },\n\n  /**\r\n   * Check if an element matches set of properties.\r\n   *\r\n   * Note: this checks custom properties, and it does not ensure that any\r\n   * children are equivalent.\r\n   */\n  matches(element, props) {\n    for (var key in props) {\n      if (key === 'children') {\n        continue;\n      }\n\n      if (element[key] !== props[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n};\nvar Location = {\n  /**\r\n   * Check if a value implements the `Location` interface.\r\n   */\n  isLocation(value) {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);\n  }\n\n};\nvar Span = {\n  /**\r\n   * Check if a value implements the `Span` interface.\r\n   */\n  isSpan(value) {\n    return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);\n  }\n\n};\nvar Node = {\n  /**\r\n   * Get the node at a specific path, asserting that it's an ancestor node.\r\n   */\n  ancestor(root, path) {\n    var node = Node.get(root, path);\n\n    if (Text.isText(node)) {\n      throw new Error(\"Cannot get the ancestor node at path [\".concat(path, \"] because it refers to a text node instead: \").concat(node));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Return an iterable of all the ancestor nodes above a specific path.\r\n   *\r\n   * By default the order is bottom-up, from lowest to highest ancestor in\r\n   * the tree, but you can pass the `reverse: true` option to go top-down.\r\n   */\n  *ancestors(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    for (var p of Path.ancestors(path, options)) {\n      var n = Node.ancestor(root, p);\n      var entry = [n, p];\n      yield entry;\n    }\n  },\n\n  /**\r\n   * Get the child of a node at a specific index.\r\n   */\n  child(root, index) {\n    if (Text.isText(root)) {\n      throw new Error(\"Cannot get the child of a text node: \".concat(JSON.stringify(root)));\n    }\n\n    var c = root.children[index];\n\n    if (c == null) {\n      throw new Error(\"Cannot get child at index `\".concat(index, \"` in node: \").concat(JSON.stringify(root)));\n    }\n\n    return c;\n  },\n\n  /**\r\n   * Iterate over the children of a node at a specific path.\r\n   */\n  *children(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      reverse = false\n    } = options;\n    var ancestor = Node.ancestor(root, path);\n    var {\n      children\n    } = ancestor;\n    var index = reverse ? children.length - 1 : 0;\n\n    while (reverse ? index >= 0 : index < children.length) {\n      var child = Node.child(ancestor, index);\n      var childPath = path.concat(index);\n      yield [child, childPath];\n      index = reverse ? index - 1 : index + 1;\n    }\n  },\n\n  /**\r\n   * Get an entry for the common ancesetor node of two paths.\r\n   */\n  common(root, path, another) {\n    var p = Path.common(path, another);\n    var n = Node.get(root, p);\n    return [n, p];\n  },\n\n  /**\r\n   * Get the node at a specific path, asserting that it's a descendant node.\r\n   */\n  descendant(root, path) {\n    var node = Node.get(root, path);\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\"Cannot get the descendant node at path [\".concat(path, \"] because it refers to the root editor node instead: \").concat(node));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Return an iterable of all the descendant node entries inside a root node.\r\n   */\n  *descendants(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path];\n      }\n    }\n  },\n\n  /**\r\n   * Return an iterable of all the element nodes inside a root node. Each iteration\r\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\r\n   * root node is an element it will be included in the iteration as well.\r\n   */\n  *elements(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path];\n      }\n    }\n  },\n\n  /**\r\n   * Get the first node entry in a root node from a path.\r\n   */\n  first(root, path) {\n    var p = path.slice();\n    var n = Node.get(root, p);\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break;\n      } else {\n        n = n.children[0];\n        p.push(0);\n      }\n    }\n\n    return [n, p];\n  },\n\n  /**\r\n   * Get the sliced fragment represented by a range inside a root node.\r\n   */\n  fragment(root, range) {\n    if (Text.isText(root)) {\n      throw new Error(\"Cannot get a fragment starting from a root text node: \".concat(JSON.stringify(root)));\n    }\n\n    var newRoot = produce(root, r => {\n      var [start, end] = Range.edges(range);\n      var iterable = Node.nodes(r, {\n        reverse: true,\n        pass: _ref => {\n          var [, path] = _ref;\n          return !Range.includes(range, path);\n        }\n      });\n\n      for (var [, path] of iterable) {\n        if (!Range.includes(range, path)) {\n          var parent = Node.parent(r, path);\n          var index = path[path.length - 1];\n          parent.children.splice(index, 1);\n        }\n\n        if (Path.equals(path, end.path)) {\n          var leaf = Node.leaf(r, path);\n          leaf.text = leaf.text.slice(0, end.offset);\n        }\n\n        if (Path.equals(path, start.path)) {\n          var _leaf = Node.leaf(r, path);\n\n          _leaf.text = _leaf.text.slice(start.offset);\n        }\n      }\n\n      delete r.selection;\n    });\n    return newRoot.children;\n  },\n\n  /**\r\n   * Get the descendant node referred to by a specific path. If the path is an\r\n   * empty array, it refers to the root node itself.\r\n   */\n  get(root, path) {\n    var node = root;\n\n    for (var i = 0; i < path.length; i++) {\n      var p = path[i];\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\"Cannot find a descendant at path [\".concat(path, \"] in node: \").concat(JSON.stringify(root)));\n      }\n\n      node = node.children[p];\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Check if a descendant node exists at a specific path.\r\n   */\n  has(root, path) {\n    var node = root;\n\n    for (var i = 0; i < path.length; i++) {\n      var p = path[i];\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false;\n      }\n\n      node = node.children[p];\n    }\n\n    return true;\n  },\n\n  /**\r\n   * Check if a value implements the `Node` interface.\r\n   */\n  isNode(value) {\n    return Text.isText(value) || Element.isElement(value) || Editor.isEditor(value);\n  },\n\n  /**\r\n   * Check if a value is a list of `Node` objects.\r\n   */\n  isNodeList(value) {\n    return Array.isArray(value) && (value.length === 0 || Node.isNode(value[0]));\n  },\n\n  /**\r\n   * Get the lash node entry in a root node from a path.\r\n   */\n  last(root, path) {\n    var p = path.slice();\n    var n = Node.get(root, p);\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break;\n      } else {\n        var i = n.children.length - 1;\n        n = n.children[i];\n        p.push(i);\n      }\n    }\n\n    return [n, p];\n  },\n\n  /**\r\n   * Get the node at a specific path, ensuring it's a leaf text node.\r\n   */\n  leaf(root, path) {\n    var node = Node.get(root, path);\n\n    if (!Text.isText(node)) {\n      throw new Error(\"Cannot get the leaf node at path [\".concat(path, \"] because it refers to a non-leaf node: \").concat(node));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Return an iterable of the in a branch of the tree, from a specific path.\r\n   *\r\n   * By default the order is top-down, from lowest to highest node in the tree,\r\n   * but you can pass the `reverse: true` option to go bottom-up.\r\n   */\n  *levels(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    for (var p of Path.levels(path, options)) {\n      var n = Node.get(root, p);\n      yield [n, p];\n    }\n  },\n\n  /**\r\n   * Check if a node matches a set of props.\r\n   */\n  matches(node, props) {\n    return Element.isElement(node) && Element.matches(node, props) || Text.isText(node) && Text.matches(node, props);\n  },\n\n  /**\r\n   * Return an iterable of all the node entries of a root node. Each entry is\r\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\r\n   * position inside the root node.\r\n   */\n  *nodes(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      pass,\n      reverse = false\n    } = options;\n    var {\n      from = [],\n      to\n    } = options;\n    var visited = new Set();\n    var p = [];\n    var n = root;\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break;\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p];\n      } // If we're allowed to go downward and we haven't decsended yet, do.\n\n\n      if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([n, p]) === false)) {\n        visited.add(n);\n        var nextIndex = reverse ? n.children.length - 1 : 0;\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length];\n        }\n\n        p = p.concat(nextIndex);\n        n = Node.get(root, p);\n        continue;\n      } // If we're at the root and we can't go down, we're done.\n\n\n      if (p.length === 0) {\n        break;\n      } // If we're going forward...\n\n\n      if (!reverse) {\n        var newPath = Path.next(p);\n\n        if (Node.has(root, newPath)) {\n          p = newPath;\n          n = Node.get(root, p);\n          continue;\n        }\n      } // If we're going backward...\n\n\n      if (reverse && p[p.length - 1] !== 0) {\n        var _newPath = Path.previous(p);\n\n        p = _newPath;\n        n = Node.get(root, p);\n        continue;\n      } // Otherwise we're going upward...\n\n\n      p = Path.parent(p);\n      n = Node.get(root, p);\n      visited.add(n);\n    }\n  },\n\n  /**\r\n   * Get the parent of a node at a specific path.\r\n   */\n  parent(root, path) {\n    var parentPath = Path.parent(path);\n    var p = Node.get(root, parentPath);\n\n    if (Text.isText(p)) {\n      throw new Error(\"Cannot get the parent of path [\".concat(path, \"] because it does not exist in the root.\"));\n    }\n\n    return p;\n  },\n\n  /**\r\n   * Get the concatenated text string of a node's content.\r\n   *\r\n   * Note that this will not include spaces or line breaks between block nodes.\r\n   * It is not a user-facing string, but a string for performing offset-related\r\n   * computations for a node.\r\n   */\n  string(node) {\n    if (Text.isText(node)) {\n      return node.text;\n    } else {\n      return node.children.map(Node.string).join('');\n    }\n  },\n\n  /**\r\n   * Return an iterable of all leaf text nodes in a root node.\r\n   */\n  *texts(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path];\n      }\n    }\n  }\n\n};\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Operation = {\n  /**\r\n   * Check of a value is a `NodeOperation` object.\r\n   */\n  isNodeOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_node');\n  },\n\n  /**\r\n   * Check of a value is an `Operation` object.\r\n   */\n  isOperation(value) {\n    if (!isPlainObject(value)) {\n      return false;\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node);\n\n      case 'insert_text':\n        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n\n      case 'merge_node':\n        return typeof value.position === 'number' && (typeof value.target === 'number' || value.target === null) && Path.isPath(value.path) && isPlainObject(value.properties);\n\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath);\n\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node);\n\n      case 'remove_text':\n        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n\n      case 'set_node':\n        return Path.isPath(value.path) && isPlainObject(value.properties) && isPlainObject(value.newProperties);\n\n      case 'set_selection':\n        return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject(value.properties) && isPlainObject(value.newProperties);\n\n      case 'split_node':\n        return Path.isPath(value.path) && typeof value.position === 'number' && (typeof value.target === 'number' || value.target === null) && isPlainObject(value.properties);\n\n      default:\n        return false;\n    }\n  },\n\n  /**\r\n   * Check if a value is a list of `Operation` objects.\r\n   */\n  isOperationList(value) {\n    return Array.isArray(value) && (value.length === 0 || Operation.isOperation(value[0]));\n  },\n\n  /**\r\n   * Check of a value is a `SelectionOperation` object.\r\n   */\n  isSelectionOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_selection');\n  },\n\n  /**\r\n   * Check of a value is a `TextOperation` object.\r\n   */\n  isTextOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_text');\n  },\n\n  /**\r\n   * Invert an operation, returning a new operation that will exactly undo the\r\n   * original when applied.\r\n   */\n  inverse(op) {\n    switch (op.type) {\n      case 'insert_node':\n        {\n          return _objectSpread$2({}, op, {\n            type: 'remove_node'\n          });\n        }\n\n      case 'insert_text':\n        {\n          return _objectSpread$2({}, op, {\n            type: 'remove_text'\n          });\n        }\n\n      case 'merge_node':\n        {\n          return _objectSpread$2({}, op, {\n            type: 'split_node',\n            path: Path.previous(op.path)\n          });\n        }\n\n      case 'move_node':\n        {\n          var {\n            newPath,\n            path\n          } = op; // PERF: in this case the move operation is a no-op anyways.\n\n          if (Path.equals(newPath, path)) {\n            return op;\n          } // We need to get the original path here, but sometimes the `newPath`\n          // is a younger sibling of (or ends before) the original, and this\n          // accounts for it.\n\n\n          var inversePath = Path.transform(path, op);\n          var inverseNewPath = Path.transform(Path.next(path), op);\n          return _objectSpread$2({}, op, {\n            path: inversePath,\n            newPath: inverseNewPath\n          });\n        }\n\n      case 'remove_node':\n        {\n          return _objectSpread$2({}, op, {\n            type: 'insert_node'\n          });\n        }\n\n      case 'remove_text':\n        {\n          return _objectSpread$2({}, op, {\n            type: 'insert_text'\n          });\n        }\n\n      case 'set_node':\n        {\n          var {\n            properties,\n            newProperties\n          } = op;\n          return _objectSpread$2({}, op, {\n            properties: newProperties,\n            newProperties: properties\n          });\n        }\n\n      case 'set_selection':\n        {\n          var {\n            properties: _properties,\n            newProperties: _newProperties\n          } = op;\n\n          if (_properties == null) {\n            return _objectSpread$2({}, op, {\n              properties: _newProperties,\n              newProperties: null\n            });\n          } else if (_newProperties == null) {\n            return _objectSpread$2({}, op, {\n              properties: null,\n              newProperties: _properties\n            });\n          } else {\n            return _objectSpread$2({}, op, {\n              properties: _newProperties,\n              newProperties: _properties\n            });\n          }\n        }\n\n      case 'split_node':\n        {\n          return _objectSpread$2({}, op, {\n            type: 'merge_node',\n            path: Path.next(op.path)\n          });\n        }\n    }\n  }\n\n};\nvar Path = {\n  /**\r\n   * Get a list of ancestor paths for a given path.\r\n   *\r\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\r\n   * `reverse: true` option is passed, they are reversed.\r\n   */\n  ancestors(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var paths = Path.levels(path, options);\n\n    if (reverse) {\n      paths = paths.slice(1);\n    } else {\n      paths = paths.slice(0, -1);\n    }\n\n    return paths;\n  },\n\n  /**\r\n   * Get the common ancestor path of two paths.\r\n   */\n  common(path, another) {\n    var common = [];\n\n    for (var i = 0; i < path.length && i < another.length; i++) {\n      var av = path[i];\n      var bv = another[i];\n\n      if (av !== bv) {\n        break;\n      }\n\n      common.push(av);\n    }\n\n    return common;\n  },\n\n  /**\r\n   * Compare a path to another, returning an integer indicating whether the path\r\n   * was before, at, or after the other.\r\n   *\r\n   * Note: Two paths of unequal length can still receive a `0` result if one is\r\n   * directly above or below the other. If you want exact matching, use\r\n   * [[Path.equals]] instead.\r\n   */\n  compare(path, another) {\n    var min = Math.min(path.length, another.length);\n\n    for (var i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1;\n      if (path[i] > another[i]) return 1;\n    }\n\n    return 0;\n  },\n\n  /**\r\n   * Check if a path ends after one of the indexes in another.\r\n   */\n  endsAfter(path, another) {\n    var i = path.length - 1;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    var av = path[i];\n    var bv = another[i];\n    return Path.equals(as, bs) && av > bv;\n  },\n\n  /**\r\n   * Check if a path ends at one of the indexes in another.\r\n   */\n  endsAt(path, another) {\n    var i = path.length;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    return Path.equals(as, bs);\n  },\n\n  /**\r\n   * Check if a path ends before one of the indexes in another.\r\n   */\n  endsBefore(path, another) {\n    var i = path.length - 1;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    var av = path[i];\n    var bv = another[i];\n    return Path.equals(as, bs) && av < bv;\n  },\n\n  /**\r\n   * Check if a path is exactly equal to another.\r\n   */\n  equals(path, another) {\n    return path.length === another.length && path.every((n, i) => n === another[i]);\n  },\n\n  /**\r\n   * Check if a path is after another.\r\n   */\n  isAfter(path, another) {\n    return Path.compare(path, another) === 1;\n  },\n\n  /**\r\n   * Check if a path is an ancestor of another.\r\n   */\n  isAncestor(path, another) {\n    return path.length < another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is before another.\r\n   */\n  isBefore(path, another) {\n    return Path.compare(path, another) === -1;\n  },\n\n  /**\r\n   * Check if a path is a child of another.\r\n   */\n  isChild(path, another) {\n    return path.length === another.length + 1 && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is equal to or an ancestor of another.\r\n   */\n  isCommon(path, another) {\n    return path.length <= another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is a descendant of another.\r\n   */\n  isDescendant(path, another) {\n    return path.length > another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is the parent of another.\r\n   */\n  isParent(path, another) {\n    return path.length + 1 === another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check is a value implements the `Path` interface.\r\n   */\n  isPath(value) {\n    return Array.isArray(value) && (value.length === 0 || typeof value[0] === 'number');\n  },\n\n  /**\r\n   * Check if a path is a sibling of another.\r\n   */\n  isSibling(path, another) {\n    if (path.length !== another.length) {\n      return false;\n    }\n\n    var as = path.slice(0, -1);\n    var bs = another.slice(0, -1);\n    var al = path[path.length - 1];\n    var bl = another[another.length - 1];\n    return al !== bl && Path.equals(as, bs);\n  },\n\n  /**\r\n   * Get a list of paths at every level down to a path. Note: this is the same\r\n   * as `Path.ancestors`, but including the path itself.\r\n   *\r\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\r\n   * true` option is passed, they are reversed.\r\n   */\n  levels(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var list = [];\n\n    for (var i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i));\n    }\n\n    if (reverse) {\n      list.reverse();\n    }\n\n    return list;\n  },\n\n  /**\r\n   * Given a path, get the path to the next sibling node.\r\n   */\n  next(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the next path of a root path [\".concat(path, \"], because it has no next index.\"));\n    }\n\n    var last = path[path.length - 1];\n    return path.slice(0, -1).concat(last + 1);\n  },\n\n  /**\r\n   * Given a path, return a new path referring to the parent node above it.\r\n   */\n  parent(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the parent path of the root path [\".concat(path, \"].\"));\n    }\n\n    return path.slice(0, -1);\n  },\n\n  /**\r\n   * Given a path, get the path to the previous sibling node.\r\n   */\n  previous(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the previous path of a root path [\".concat(path, \"], because it has no previous index.\"));\n    }\n\n    var last = path[path.length - 1];\n\n    if (last <= 0) {\n      throw new Error(\"Cannot get the previous path of a first child path [\".concat(path, \"] because it would result in a negative index.\"));\n    }\n\n    return path.slice(0, -1).concat(last - 1);\n  },\n\n  /**\r\n   * Get a path relative to an ancestor.\r\n   */\n  relative(path, ancestor) {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\"Cannot get the relative path of [\".concat(path, \"] inside ancestor [\").concat(ancestor, \"], because it is not above or equal to the path.\"));\n    }\n\n    return path.slice(ancestor.length);\n  },\n\n  /**\r\n   * Transform a path by an operation.\r\n   */\n  transform(path, operation) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return produce(path, p => {\n      var {\n        affinity = 'forward'\n      } = options; // PERF: Exit early if the operation is guaranteed not to have an effect.\n\n      if (path.length === 0) {\n        return;\n      }\n\n      switch (operation.type) {\n        case 'insert_node':\n          {\n            var {\n              path: op\n            } = operation;\n\n            if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) {\n              p[op.length - 1] += 1;\n            }\n\n            break;\n          }\n\n        case 'remove_node':\n          {\n            var {\n              path: _op\n            } = operation;\n\n            if (Path.equals(_op, p) || Path.isAncestor(_op, p)) {\n              return null;\n            } else if (Path.endsBefore(_op, p)) {\n              p[_op.length - 1] -= 1;\n            }\n\n            break;\n          }\n\n        case 'merge_node':\n          {\n            var {\n              path: _op2,\n              position\n            } = operation;\n\n            if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) {\n              p[_op2.length - 1] -= 1;\n            } else if (Path.isAncestor(_op2, p)) {\n              p[_op2.length - 1] -= 1;\n              p[_op2.length] += position;\n            }\n\n            break;\n          }\n\n        case 'split_node':\n          {\n            var {\n              path: _op3,\n              position: _position\n            } = operation;\n\n            if (Path.equals(_op3, p)) {\n              if (affinity === 'forward') {\n                p[p.length - 1] += 1;\n              } else if (affinity === 'backward') ;else {\n                return null;\n              }\n            } else if (Path.endsBefore(_op3, p)) {\n              p[_op3.length - 1] += 1;\n            } else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {\n              p[_op3.length - 1] += 1;\n              p[_op3.length] -= _position;\n            }\n\n            break;\n          }\n\n        case 'move_node':\n          {\n            var {\n              path: _op4,\n              newPath: onp\n            } = operation; // If the old and new path are the same, it's a no-op.\n\n            if (Path.equals(_op4, onp)) {\n              return;\n            }\n\n            if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {\n              var copy = onp.slice();\n\n              if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {\n                var i = Math.min(onp.length, _op4.length) - 1;\n                copy[i] -= 1;\n              }\n\n              return copy.concat(p.slice(_op4.length));\n            } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {\n              if (Path.endsBefore(_op4, p)) {\n                p[_op4.length - 1] -= 1;\n              }\n\n              p[onp.length - 1] += 1;\n            } else if (Path.endsBefore(_op4, p)) {\n              if (Path.equals(onp, p)) {\n                p[onp.length - 1] += 1;\n              }\n\n              p[_op4.length - 1] -= 1;\n            }\n\n            break;\n          }\n      }\n    });\n  }\n\n};\nvar PathRef = {\n  /**\r\n   * Transform the path ref's current value by an operation.\r\n   */\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n\n    if (current == null) {\n      return;\n    }\n\n    var path = Path.transform(current, op, {\n      affinity\n    });\n    ref.current = path;\n\n    if (path == null) {\n      ref.unref();\n    }\n  }\n\n};\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$3(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$3(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Point = {\n  /**\r\n   * Compare a point to another, returning an integer indicating whether the\r\n   * point was before, at, or after the other.\r\n   */\n  compare(point, another) {\n    var result = Path.compare(point.path, another.path);\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1;\n      if (point.offset > another.offset) return 1;\n      return 0;\n    }\n\n    return result;\n  },\n\n  /**\r\n   * Check if a point is after another.\r\n   */\n  isAfter(point, another) {\n    return Point.compare(point, another) === 1;\n  },\n\n  /**\r\n   * Check if a point is before another.\r\n   */\n  isBefore(point, another) {\n    return Point.compare(point, another) === -1;\n  },\n\n  /**\r\n   * Check if a point is exactly equal to another.\r\n   */\n  equals(point, another) {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return point.offset === another.offset && Path.equals(point.path, another.path);\n  },\n\n  /**\r\n   * Check if a value implements the `Point` interface.\r\n   */\n  isPoint(value) {\n    return isPlainObject(value) && typeof value.offset === 'number' && Path.isPath(value.path);\n  },\n\n  /**\r\n   * Transform a point by an operation.\r\n   */\n  transform(point, op) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return produce(point, p => {\n      var {\n        affinity = 'forward'\n      } = options;\n      var {\n        path,\n        offset\n      } = p;\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node':\n          {\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n\n        case 'insert_text':\n          {\n            if (Path.equals(op.path, path) && op.offset <= offset) {\n              p.offset += op.text.length;\n            }\n\n            break;\n          }\n\n        case 'merge_node':\n          {\n            if (Path.equals(op.path, path)) {\n              p.offset += op.position;\n            }\n\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n\n        case 'remove_text':\n          {\n            if (Path.equals(op.path, path) && op.offset <= offset) {\n              p.offset -= Math.min(offset - op.offset, op.text.length);\n            }\n\n            break;\n          }\n\n        case 'remove_node':\n          {\n            if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n              return null;\n            }\n\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n\n        case 'split_node':\n          {\n            if (Path.equals(op.path, path)) {\n              if (op.position === offset && affinity == null) {\n                return null;\n              } else if (op.position < offset || op.position === offset && affinity === 'forward') {\n                p.offset -= op.position;\n                p.path = Path.transform(path, op, _objectSpread$3({}, options, {\n                  affinity: 'forward'\n                }));\n              }\n            } else {\n              p.path = Path.transform(path, op, options);\n            }\n\n            break;\n          }\n      }\n    });\n  }\n\n};\nvar PointRef = {\n  /**\r\n   * Transform the point ref's current value by an operation.\r\n   */\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n\n    if (current == null) {\n      return;\n    }\n\n    var point = Point.transform(current, op, {\n      affinity\n    });\n    ref.current = point;\n\n    if (point == null) {\n      ref.unref();\n    }\n  }\n\n};\n\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$4(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$4(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Range = {\n  /**\r\n   * Get the start and end points of a range, in the order in which they appear\r\n   * in the document.\r\n   */\n  edges(range) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var {\n      anchor,\n      focus\n    } = range;\n    return Range.isBackward(range) === reverse ? [anchor, focus] : [focus, anchor];\n  },\n\n  /**\r\n   * Get the end point of a range.\r\n   */\n  end(range) {\n    var [, end] = Range.edges(range);\n    return end;\n  },\n\n  /**\r\n   * Check if a range is exactly equal to another.\r\n   */\n  equals(range, another) {\n    return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);\n  },\n\n  /**\r\n   * Check if a range includes a path, a point or part of another range.\r\n   */\n  includes(range, target) {\n    if (Range.isRange(target)) {\n      if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) {\n        return true;\n      }\n\n      var [rs, re] = Range.edges(range);\n      var [ts, te] = Range.edges(target);\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te);\n    }\n\n    var [start, end] = Range.edges(range);\n    var isAfterStart = false;\n    var isBeforeEnd = false;\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0;\n      isBeforeEnd = Point.compare(target, end) <= 0;\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0;\n      isBeforeEnd = Path.compare(target, end.path) <= 0;\n    }\n\n    return isAfterStart && isBeforeEnd;\n  },\n\n  /**\r\n   * Get the intersection of a range with another.\r\n   */\n  intersection(range, another) {\n    var rest = _objectWithoutProperties(range, [\"anchor\", \"focus\"]);\n\n    var [s1, e1] = Range.edges(range);\n    var [s2, e2] = Range.edges(another);\n    var start = Point.isBefore(s1, s2) ? s2 : s1;\n    var end = Point.isBefore(e1, e2) ? e1 : e2;\n\n    if (Point.isBefore(end, start)) {\n      return null;\n    } else {\n      return _objectSpread$4({\n        anchor: start,\n        focus: end\n      }, rest);\n    }\n  },\n\n  /**\r\n   * Check if a range is backward, meaning that its anchor point appears in the\r\n   * document _after_ its focus point.\r\n   */\n  isBackward(range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Point.isAfter(anchor, focus);\n  },\n\n  /**\r\n   * Check if a range is collapsed, meaning that both its anchor and focus\r\n   * points refer to the exact same position in the document.\r\n   */\n  isCollapsed(range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Point.equals(anchor, focus);\n  },\n\n  /**\r\n   * Check if a range is expanded.\r\n   *\r\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\r\n   */\n  isExpanded(range) {\n    return !Range.isCollapsed(range);\n  },\n\n  /**\r\n   * Check if a range is forward.\r\n   *\r\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\r\n   */\n  isForward(range) {\n    return !Range.isBackward(range);\n  },\n\n  /**\r\n   * Check if a value implements the [[Range]] interface.\r\n   */\n  isRange(value) {\n    return isPlainObject(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);\n  },\n\n  /**\r\n   * Iterate through all of the point entries in a range.\r\n   */\n  *points(range) {\n    yield [range.anchor, 'anchor'];\n    yield [range.focus, 'focus'];\n  },\n\n  /**\r\n   * Get the start point of a range.\r\n   */\n  start(range) {\n    var [start] = Range.edges(range);\n    return start;\n  },\n\n  /**\r\n   * Transform a range by an operation.\r\n   */\n  transform(range, op, options) {\n    var {\n      affinity = 'inward'\n    } = options;\n    var affinityAnchor;\n    var affinityFocus;\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward';\n        affinityFocus = 'backward';\n      } else {\n        affinityAnchor = 'backward';\n        affinityFocus = 'forward';\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward';\n        affinityFocus = 'forward';\n      } else {\n        affinityAnchor = 'forward';\n        affinityFocus = 'backward';\n      }\n    } else {\n      affinityAnchor = affinity;\n      affinityFocus = affinity;\n    }\n\n    return produce(range, r => {\n      var anchor = Point.transform(r.anchor, op, {\n        affinity: affinityAnchor\n      });\n      var focus = Point.transform(r.focus, op, {\n        affinity: affinityFocus\n      });\n\n      if (!anchor || !focus) {\n        return null;\n      }\n\n      r.anchor = anchor;\n      r.focus = focus;\n    });\n  }\n\n};\nvar RangeRef = {\n  /**\r\n   * Transform the range ref's current value by an operation.\r\n   */\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n\n    if (current == null) {\n      return;\n    }\n\n    var path = Range.transform(current, op, {\n      affinity\n    });\n    ref.current = path;\n\n    if (path == null) {\n      ref.unref();\n    }\n  }\n\n};\n\nfunction ownKeys$5(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$5(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$5(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$5(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Text = {\n  /**\r\n   * Check if two text nodes are equal.\r\n   */\n  equals(text, another) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      loose = false\n    } = options;\n\n    for (var key in text) {\n      if (loose && key === 'text') {\n        continue;\n      }\n\n      if (text[key] !== another[key]) {\n        return false;\n      }\n    }\n\n    for (var _key in another) {\n      if (loose && _key === 'text') {\n        continue;\n      }\n\n      if (text[_key] !== another[_key]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\r\n   * Check if a value implements the `Text` interface.\r\n   */\n  isText(value) {\n    return isPlainObject(value) && typeof value.text === 'string';\n  },\n\n  /**\r\n   * Check if a value is a list of `Text` objects.\r\n   */\n  isTextList(value) {\n    return Array.isArray(value) && (value.length === 0 || Text.isText(value[0]));\n  },\n\n  /**\r\n   * Check if an text matches set of properties.\r\n   *\r\n   * Note: this is for matching custom properties, and it does not ensure that\r\n   * the `text` property are two nodes equal.\r\n   */\n  matches(text, props) {\n    for (var key in props) {\n      if (key === 'text') {\n        continue;\n      }\n\n      if (text[key] !== props[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\r\n   * Get the leaves for a text node given decorations.\r\n   */\n  decorations(node, decorations) {\n    var leaves = [_objectSpread$5({}, node)];\n\n    for (var dec of decorations) {\n      var rest = _objectWithoutProperties(dec, [\"anchor\", \"focus\"]);\n\n      var [start, end] = Range.edges(dec);\n      var next = [];\n      var o = 0;\n\n      for (var leaf of leaves) {\n        var {\n          length\n        } = leaf.text;\n        var offset = o;\n        o += length; // If the range encompases the entire leaf, add the range.\n\n        if (start.offset <= offset && end.offset >= offset + length) {\n          Object.assign(leaf, rest);\n          next.push(leaf);\n          continue;\n        } // If the range starts after the leaf, or ends before it, continue.\n\n\n        if (start.offset > offset + length || end.offset < offset || end.offset === offset && offset !== 0) {\n          next.push(leaf);\n          continue;\n        } // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n\n\n        var middle = leaf;\n        var before = void 0;\n        var after = void 0;\n\n        if (end.offset < offset + length) {\n          var off = end.offset - offset;\n          after = _objectSpread$5({}, middle, {\n            text: middle.text.slice(off)\n          });\n          middle = _objectSpread$5({}, middle, {\n            text: middle.text.slice(0, off)\n          });\n        }\n\n        if (start.offset > offset) {\n          var _off = start.offset - offset;\n\n          before = _objectSpread$5({}, middle, {\n            text: middle.text.slice(0, _off)\n          });\n          middle = _objectSpread$5({}, middle, {\n            text: middle.text.slice(_off)\n          });\n        }\n\n        Object.assign(middle, rest);\n\n        if (before) {\n          next.push(before);\n        }\n\n        next.push(middle);\n\n        if (after) {\n          next.push(after);\n        }\n      }\n\n      leaves = next;\n    }\n\n    return leaves;\n  }\n\n};\n\nfunction ownKeys$6(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$6(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$6(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$6(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar GeneralTransforms = {\n  /**\r\n   * Transform the editor by an operation.\r\n   */\n  transform(editor, op) {\n    editor.children = createDraft(editor.children);\n    var selection = editor.selection && createDraft(editor.selection);\n\n    switch (op.type) {\n      case 'insert_node':\n        {\n          var {\n            path,\n            node\n          } = op;\n          var parent = Node.parent(editor, path);\n          var index = path[path.length - 1];\n          parent.children.splice(index, 0, node);\n\n          if (selection) {\n            for (var [point, key] of Range.points(selection)) {\n              selection[key] = Point.transform(point, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'insert_text':\n        {\n          var {\n            path: _path,\n            offset,\n            text\n          } = op;\n\n          var _node = Node.leaf(editor, _path);\n\n          var before = _node.text.slice(0, offset);\n\n          var after = _node.text.slice(offset);\n\n          _node.text = before + text + after;\n\n          if (selection) {\n            for (var [_point, _key] of Range.points(selection)) {\n              selection[_key] = Point.transform(_point, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'merge_node':\n        {\n          var {\n            path: _path2\n          } = op;\n\n          var _node2 = Node.get(editor, _path2);\n\n          var prevPath = Path.previous(_path2);\n          var prev = Node.get(editor, prevPath);\n\n          var _parent = Node.parent(editor, _path2);\n\n          var _index = _path2[_path2.length - 1];\n\n          if (Text.isText(_node2) && Text.isText(prev)) {\n            prev.text += _node2.text;\n          } else if (!Text.isText(_node2) && !Text.isText(prev)) {\n            prev.children.push(..._node2.children);\n          } else {\n            throw new Error(\"Cannot apply a \\\"merge_node\\\" operation at path [\".concat(_path2, \"] to nodes of different interaces: \").concat(_node2, \" \").concat(prev));\n          }\n\n          _parent.children.splice(_index, 1);\n\n          if (selection) {\n            for (var [_point2, _key2] of Range.points(selection)) {\n              selection[_key2] = Point.transform(_point2, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'move_node':\n        {\n          var {\n            path: _path3,\n            newPath\n          } = op;\n\n          if (Path.isAncestor(_path3, newPath)) {\n            throw new Error(\"Cannot move a path [\".concat(_path3, \"] to new path [\").concat(newPath, \"] because the destination is inside itself.\"));\n          }\n\n          var _node3 = Node.get(editor, _path3);\n\n          var _parent2 = Node.parent(editor, _path3);\n\n          var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to\n          // the same snapshot in time, there's a mismatch. After either\n          // removing the original position, the second step's path can be out\n          // of date. So instead of using the `op.newPath` directly, we\n          // transform `op.path` to ascertain what the `newPath` would be after\n          // the operation was applied.\n\n          _parent2.children.splice(_index2, 1);\n\n          var truePath = Path.transform(_path3, op);\n          var newParent = Node.get(editor, Path.parent(truePath));\n          var newIndex = truePath[truePath.length - 1];\n          newParent.children.splice(newIndex, 0, _node3);\n\n          if (selection) {\n            for (var [_point3, _key3] of Range.points(selection)) {\n              selection[_key3] = Point.transform(_point3, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'remove_node':\n        {\n          var {\n            path: _path4\n          } = op;\n          var _index3 = _path4[_path4.length - 1];\n\n          var _parent3 = Node.parent(editor, _path4);\n\n          _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the\n          // node that was removed we need to update the range or remove it.\n\n\n          if (selection) {\n            for (var [_point4, _key4] of Range.points(selection)) {\n              var result = Point.transform(_point4, op);\n\n              if (selection != null && result != null) {\n                selection[_key4] = result;\n              } else {\n                var _prev = void 0;\n\n                var next = void 0;\n\n                for (var [n, p] of Node.texts(editor)) {\n                  if (Path.compare(p, _path4) === -1) {\n                    _prev = [n, p];\n                  } else {\n                    next = [n, p];\n                    break;\n                  }\n                }\n\n                if (_prev) {\n                  _point4.path = _prev[1];\n                  _point4.offset = _prev[0].text.length;\n                } else if (next) {\n                  _point4.path = next[1];\n                  _point4.offset = 0;\n                } else {\n                  selection = null;\n                }\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 'remove_text':\n        {\n          var {\n            path: _path5,\n            offset: _offset,\n            text: _text\n          } = op;\n\n          var _node4 = Node.leaf(editor, _path5);\n\n          var _before = _node4.text.slice(0, _offset);\n\n          var _after = _node4.text.slice(_offset + _text.length);\n\n          _node4.text = _before + _after;\n\n          if (selection) {\n            for (var [_point5, _key5] of Range.points(selection)) {\n              selection[_key5] = Point.transform(_point5, op);\n            }\n          }\n\n          break;\n        }\n\n      case 'set_node':\n        {\n          var {\n            path: _path6,\n            newProperties\n          } = op;\n\n          if (_path6.length === 0) {\n            throw new Error(\"Cannot set properties on the root node!\");\n          }\n\n          var _node5 = Node.get(editor, _path6);\n\n          for (var _key6 in newProperties) {\n            if (_key6 === 'children' || _key6 === 'text') {\n              throw new Error(\"Cannot set the \\\"\".concat(_key6, \"\\\" property of nodes!\"));\n            }\n\n            var value = newProperties[_key6];\n\n            if (value == null) {\n              delete _node5[_key6];\n            } else {\n              _node5[_key6] = value;\n            }\n          }\n\n          break;\n        }\n\n      case 'set_selection':\n        {\n          var {\n            newProperties: _newProperties\n          } = op;\n\n          if (_newProperties == null) {\n            selection = _newProperties;\n          } else if (selection == null) {\n            if (!Range.isRange(_newProperties)) {\n              throw new Error(\"Cannot apply an incomplete \\\"set_selection\\\" operation properties \".concat(JSON.stringify(_newProperties), \" when there is no current selection.\"));\n            }\n\n            selection = _newProperties;\n          } else {\n            Object.assign(selection, _newProperties);\n          }\n\n          break;\n        }\n\n      case 'split_node':\n        {\n          var {\n            path: _path7,\n            position,\n            properties\n          } = op;\n\n          if (_path7.length === 0) {\n            throw new Error(\"Cannot apply a \\\"split_node\\\" operation at path [\".concat(_path7, \"] because the root node cannot be split.\"));\n          }\n\n          var _node6 = Node.get(editor, _path7);\n\n          var _parent4 = Node.parent(editor, _path7);\n\n          var _index4 = _path7[_path7.length - 1];\n          var newNode;\n\n          if (Text.isText(_node6)) {\n            var _before2 = _node6.text.slice(0, position);\n\n            var _after2 = _node6.text.slice(position);\n\n            _node6.text = _before2;\n            newNode = _objectSpread$6({}, _node6, {}, properties, {\n              text: _after2\n            });\n          } else {\n            var _before3 = _node6.children.slice(0, position);\n\n            var _after3 = _node6.children.slice(position);\n\n            _node6.children = _before3;\n            newNode = _objectSpread$6({}, _node6, {}, properties, {\n              children: _after3\n            });\n          }\n\n          _parent4.children.splice(_index4 + 1, 0, newNode);\n\n          if (selection) {\n            for (var [_point6, _key7] of Range.points(selection)) {\n              selection[_key7] = Point.transform(_point6, op);\n            }\n          }\n\n          break;\n        }\n    }\n\n    editor.children = finishDraft(editor.children);\n\n    if (selection) {\n      editor.selection = isDraft(selection) ? finishDraft(selection) : selection;\n    } else {\n      editor.selection = null;\n    }\n  }\n\n};\n\nfunction ownKeys$7(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$7(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$7(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$7(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar NodeTransforms = {\n  /**\r\n   * Insert nodes at a specific location in the Editor.\r\n   */\n  insertNodes(editor, nodes) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        hanging = false,\n        voids = false,\n        mode = 'lowest'\n      } = options;\n      var {\n        at,\n        match,\n        select\n      } = options;\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes];\n      }\n\n      if (nodes.length === 0) {\n        return;\n      }\n\n      var [node] = nodes; // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection;\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, []);\n        } else {\n          at = [0];\n        }\n\n        select = true;\n      }\n\n      if (select == null) {\n        select = false;\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at);\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var [, end] = Range.edges(at);\n          var pointRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at\n          });\n          at = pointRef.unref();\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n);\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n);\n          } else {\n            match = n => Editor.isBlock(editor, n);\n          }\n        }\n\n        var [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids\n        });\n\n        if (entry) {\n          var [, _matchPath] = entry;\n          var pathRef = Editor.pathRef(editor, _matchPath);\n          var isAtEnd = Editor.isEnd(editor, at, _matchPath);\n          Transforms.splitNodes(editor, {\n            at,\n            match,\n            mode,\n            voids\n          });\n          var path = pathRef.unref();\n          at = isAtEnd ? Path.next(path) : path;\n        } else {\n          return;\n        }\n      }\n\n      var parentPath = Path.parent(at);\n      var index = at[at.length - 1];\n\n      if (!voids && Editor.void(editor, {\n        at: parentPath\n      })) {\n        return;\n      }\n\n      for (var _node of nodes) {\n        var _path = parentPath.concat(index);\n\n        index++;\n        editor.apply({\n          type: 'insert_node',\n          path: _path,\n          node: _node\n        });\n      }\n\n      if (select) {\n        var point = Editor.end(editor, at);\n\n        if (point) {\n          Transforms.select(editor, point);\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Lift nodes at a specific location upwards in the document tree, splitting\r\n   * their parent in two if necessary.\r\n   */\n  liftNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false\n      } = options;\n      var {\n        match\n      } = options;\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (!at) {\n        return;\n      }\n\n      var matches = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(matches, _ref => {\n        var [, p] = _ref;\n        return Editor.pathRef(editor, p);\n      });\n\n      for (var pathRef of pathRefs) {\n        var path = pathRef.unref();\n\n        if (path.length < 2) {\n          throw new Error(\"Cannot lift node at a path [\".concat(path, \"] because it has a depth of less than `2`.\"));\n        }\n\n        var [parent, parentPath] = Editor.node(editor, Path.parent(path));\n        var index = path[path.length - 1];\n        var {\n          length\n        } = parent.children;\n\n        if (length === 1) {\n          var toPath = Path.next(parentPath);\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: toPath,\n            voids\n          });\n          Transforms.removeNodes(editor, {\n            at: parentPath,\n            voids\n          });\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: parentPath,\n            voids\n          });\n        } else if (index === length - 1) {\n          var _toPath = Path.next(parentPath);\n\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: _toPath,\n            voids\n          });\n        } else {\n          var splitPath = Path.next(path);\n\n          var _toPath2 = Path.next(parentPath);\n\n          Transforms.splitNodes(editor, {\n            at: splitPath,\n            voids\n          });\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: _toPath2,\n            voids\n          });\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Merge a node at a location with the previous node of the same depth,\r\n   * removing any empty containing nodes after the merge if necessary.\r\n   */\n  mergeNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        match,\n        at = editor.selection\n      } = options;\n      var {\n        hanging = false,\n        voids = false,\n        mode = 'lowest'\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          var [parent] = Editor.parent(editor, at);\n\n          match = n => parent.children.includes(n);\n        } else {\n          match = n => Editor.isBlock(editor, n);\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at);\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var [, end] = Range.edges(at);\n          var pointRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at\n          });\n          at = pointRef.unref();\n\n          if (options.at == null) {\n            Transforms.select(editor, at);\n          }\n        }\n      }\n\n      var [current] = Editor.nodes(editor, {\n        at,\n        match,\n        voids,\n        mode\n      });\n      var prev = Editor.previous(editor, {\n        at,\n        match,\n        voids,\n        mode\n      });\n\n      if (!current || !prev) {\n        return;\n      }\n\n      var [node, path] = current;\n      var [prevNode, prevPath] = prev;\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return;\n      }\n\n      var newPath = Path.next(prevPath);\n      var commonPath = Path.common(path, prevPath);\n      var isPreviousSibling = Path.isSibling(path, prevPath);\n      var levels = Array.from(Editor.levels(editor, {\n        at: path\n      }), _ref2 => {\n        var [n] = _ref2;\n        return n;\n      }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n\n      var emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n => levels.includes(n) && Element.isElement(n) && n.children.length === 1\n      });\n      var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);\n      var properties;\n      var position; // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        var rest = _objectWithoutProperties(node, [\"text\"]);\n\n        position = prevNode.text.length;\n        properties = rest;\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        var rest = _objectWithoutProperties(node, [\"children\"]);\n\n        position = prevNode.children.length;\n        properties = rest;\n      } else {\n        throw new Error(\"Cannot merge the node at path [\".concat(path, \"] with the previous sibling because it is not the same kind: \").concat(JSON.stringify(node), \" \").concat(JSON.stringify(prevNode)));\n      } // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n\n\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, {\n          at: path,\n          to: newPath,\n          voids\n        });\n      } // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n\n\n      if (emptyRef) {\n        Transforms.removeNodes(editor, {\n          at: emptyRef.current,\n          voids\n        });\n      } // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n\n\n      if (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === '') {\n        Transforms.removeNodes(editor, {\n          at: prevPath,\n          voids\n        });\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          target: null,\n          properties\n        });\n      }\n\n      if (emptyRef) {\n        emptyRef.unref();\n      }\n    });\n  },\n\n  /**\r\n   * Move the nodes at a location to a new location.\r\n   */\n  moveNodes(editor, options) {\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false\n      } = options;\n      var {\n        match\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      var toRef = Editor.pathRef(editor, to);\n      var targets = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(targets, _ref3 => {\n        var [, p] = _ref3;\n        return Editor.pathRef(editor, p);\n      });\n\n      for (var pathRef of pathRefs) {\n        var path = pathRef.unref();\n        var newPath = toRef.current;\n\n        if (path.length !== 0) {\n          editor.apply({\n            type: 'move_node',\n            path,\n            newPath\n          });\n        }\n      }\n\n      toRef.unref();\n    });\n  },\n\n  /**\r\n   * Remove the nodes at a specific location in the document.\r\n   */\n  removeNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        hanging = false,\n        voids = false,\n        mode = 'lowest'\n      } = options;\n      var {\n        at = editor.selection,\n        match\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at);\n      }\n\n      var depths = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(depths, _ref4 => {\n        var [, p] = _ref4;\n        return Editor.pathRef(editor, p);\n      });\n\n      for (var pathRef of pathRefs) {\n        var path = pathRef.unref();\n\n        if (path) {\n          var [node] = Editor.node(editor, path);\n          editor.apply({\n            type: 'remove_node',\n            path,\n            node\n          });\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Set new properties on the nodes at a location.\r\n   */\n  setNodes(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        match,\n        at = editor.selection\n      } = options;\n      var {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at);\n      }\n\n      if (split && Range.isRange(at)) {\n        var rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward'\n        });\n        var [start, end] = Range.edges(at);\n        var splitMode = mode === 'lowest' ? 'lowest' : 'highest';\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids\n        });\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids\n        });\n        at = rangeRef.unref();\n\n        if (options.at == null) {\n          Transforms.select(editor, at);\n        }\n      }\n\n      for (var [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      })) {\n        var properties = {};\n        var newProperties = {}; // You can't set properties on the editor node.\n\n        if (path.length === 0) {\n          continue;\n        }\n\n        for (var k in props) {\n          if (k === 'children' || k === 'text') {\n            continue;\n          }\n\n          if (props[k] !== node[k]) {\n            properties[k] = node[k];\n            newProperties[k] = props[k];\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties\n          });\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Split the nodes at a specific location.\r\n   */\n  splitNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        mode = 'lowest',\n        voids = false\n      } = options;\n      var {\n        match,\n        at = editor.selection,\n        height = 0,\n        always = false\n      } = options;\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n);\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at);\n      } // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n\n\n      if (Path.isPath(at)) {\n        var path = at;\n        var point = Editor.point(editor, path);\n        var [parent] = Editor.parent(editor, path);\n\n        match = n => n === parent;\n\n        height = point.path.length - path.length + 1;\n        at = point;\n        always = true;\n      }\n\n      if (!at) {\n        return;\n      }\n\n      var beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward'\n      });\n      var [highest] = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n\n      if (!highest) {\n        return;\n      }\n\n      var voidMatch = Editor.void(editor, {\n        at,\n        mode: 'highest'\n      });\n      var nudge = 0;\n\n      if (!voids && voidMatch) {\n        var [voidNode, voidPath] = voidMatch;\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          var after = Editor.after(editor, voidPath);\n\n          if (!after) {\n            var text = {\n              text: ''\n            };\n            var afterPath = Path.next(voidPath);\n            Transforms.insertNodes(editor, text, {\n              at: afterPath,\n              voids\n            });\n            after = Editor.point(editor, afterPath);\n          }\n\n          at = after;\n          always = true;\n        }\n\n        var siblingHeight = at.path.length - voidPath.length;\n        height = siblingHeight + 1;\n        always = true;\n      }\n\n      var afterRef = Editor.pointRef(editor, at);\n      var depth = at.path.length - height;\n      var [, highestPath] = highest;\n      var lowestPath = at.path.slice(0, depth);\n      var position = height === 0 ? at.offset : at.path[depth] + nudge;\n      var target = null;\n\n      for (var [node, _path2] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids\n      })) {\n        var split = false;\n\n        if (_path2.length < highestPath.length || _path2.length === 0 || !voids && Editor.isVoid(editor, node)) {\n          break;\n        }\n\n        var _point = beforeRef.current;\n        var isEnd = Editor.isEnd(editor, _point, _path2);\n\n        if (always || !beforeRef || !Editor.isEdge(editor, _point, _path2)) {\n          split = true;\n\n          var properties = _objectWithoutProperties(node, [\"text\", \"children\"]);\n\n          editor.apply({\n            type: 'split_node',\n            path: _path2,\n            position,\n            target,\n            properties\n          });\n        }\n\n        target = position;\n        position = _path2[_path2.length - 1] + (split || isEnd ? 1 : 0);\n      }\n\n      if (options.at == null) {\n        var _point2 = afterRef.current || Editor.end(editor, []);\n\n        Transforms.select(editor, _point2);\n      }\n\n      beforeRef.unref();\n      afterRef.unref();\n    });\n  },\n\n  /**\r\n   * Unset properties on the nodes at a location.\r\n   */\n  unsetNodes(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!Array.isArray(props)) {\n      props = [props];\n    }\n\n    var obj = {};\n\n    for (var key of props) {\n      obj[key] = null;\n    }\n\n    Transforms.setNodes(editor, obj, options);\n  },\n\n  /**\r\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\r\n   * necessary to ensure that only the content in the range is unwrapped.\r\n   */\n  unwrapNodes(editor, options) {\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        mode = 'lowest',\n        split = false,\n        voids = false\n      } = options;\n      var {\n        at = editor.selection,\n        match\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at);\n      }\n\n      var rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;\n      var matches = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(matches, _ref5 => {\n        var [, p] = _ref5;\n        return Editor.pathRef(editor, p);\n      });\n\n      var _loop = function _loop(pathRef) {\n        var path = pathRef.unref();\n        var [node] = Editor.node(editor, path);\n        var range = Editor.range(editor, path);\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current, range);\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => node.children.includes(n),\n          voids\n        });\n      };\n\n      for (var pathRef of pathRefs) {\n        _loop(pathRef);\n      }\n\n      if (rangeRef) {\n        rangeRef.unref();\n      }\n    });\n  },\n\n  /**\r\n   * Wrap the nodes at a location in a new container node, splitting the edges\r\n   * of the range first to ensure that only the content in the range is wrapped.\r\n   */\n  wrapNodes(editor, element) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        mode = 'lowest',\n        split = false,\n        voids = false\n      } = options;\n      var {\n        match,\n        at = editor.selection\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at);\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n);\n        } else {\n          match = n => Editor.isBlock(editor, n);\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        var [start, end] = Range.edges(at);\n        var rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward'\n        });\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          voids\n        });\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          voids\n        });\n        at = rangeRef.unref();\n\n        if (options.at == null) {\n          Transforms.select(editor, at);\n        }\n      }\n\n      var roots = Array.from(Editor.nodes(editor, {\n        at,\n        match: editor.isInline(element) ? n => Editor.isBlock(editor, n) : n => Editor.isEditor(n),\n        mode: 'highest',\n        voids\n      }));\n\n      for (var [, rootPath] of roots) {\n        var a = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;\n\n        if (!a) {\n          continue;\n        }\n\n        var matches = Array.from(Editor.nodes(editor, {\n          at: a,\n          match,\n          mode,\n          voids\n        }));\n\n        if (matches.length > 0) {\n          (function () {\n            var [first] = matches;\n            var last = matches[matches.length - 1];\n            var [, firstPath] = first;\n            var [, lastPath] = last;\n            var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);\n            var range = Editor.range(editor, firstPath, lastPath);\n            var [commonNode] = Editor.node(editor, commonPath);\n            var depth = commonPath.length + 1;\n            var wrapperPath = Path.next(lastPath.slice(0, depth));\n\n            var wrapper = _objectSpread$7({}, element, {\n              children: []\n            });\n\n            Transforms.insertNodes(editor, wrapper, {\n              at: wrapperPath,\n              voids\n            });\n            Transforms.moveNodes(editor, {\n              at: range,\n              match: n => commonNode.children.includes(n),\n              to: wrapperPath.concat(0),\n              voids\n            });\n          })();\n        }\n      }\n    });\n  }\n\n};\n/**\r\n * Convert a range into a point by deleting it's content.\r\n */\n\nvar deleteRange = (editor, range) => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor;\n  } else {\n    var [, end] = Range.edges(range);\n    var pointRef = Editor.pointRef(editor, end);\n    Transforms.delete(editor, {\n      at: range\n    });\n    return pointRef.unref();\n  }\n};\n\nvar matchPath = (editor, path) => {\n  var [node] = Editor.node(editor, path);\n  return n => n === node;\n};\n\nvar SelectionTransforms = {\n  /**\r\n   * Collapse the selection.\r\n   */\n  collapse(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      edge = 'anchor'\n    } = options;\n    var {\n      selection\n    } = editor;\n\n    if (!selection) {\n      return;\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor);\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus);\n    } else if (edge === 'start') {\n      var [start] = Range.edges(selection);\n      Transforms.select(editor, start);\n    } else if (edge === 'end') {\n      var [, end] = Range.edges(selection);\n      Transforms.select(editor, end);\n    }\n  },\n\n  /**\r\n   * Unset the selection.\r\n   */\n  deselect(editor) {\n    var {\n      selection\n    } = editor;\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null\n      });\n    }\n  },\n\n  /**\r\n   * Move the selection's point forward or backward.\r\n   */\n  move(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      selection\n    } = editor;\n    var {\n      distance = 1,\n      unit = 'character',\n      reverse = false\n    } = options;\n    var {\n      edge = null\n    } = options;\n\n    if (!selection) {\n      return;\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor';\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus';\n    }\n\n    var {\n      anchor,\n      focus\n    } = selection;\n    var opts = {\n      distance,\n      unit\n    };\n    var props = {};\n\n    if (edge == null || edge === 'anchor') {\n      var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);\n\n      if (point) {\n        props.anchor = point;\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);\n\n      if (_point) {\n        props.focus = _point;\n      }\n    }\n\n    Transforms.setSelection(editor, props);\n  },\n\n  /**\r\n   * Set the selection to a new value.\r\n   */\n  select(editor, target) {\n    var {\n      selection\n    } = editor;\n    target = Editor.range(editor, target);\n\n    if (selection) {\n      Transforms.setSelection(editor, target);\n      return;\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(JSON.stringify(target)));\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target\n    });\n  },\n\n  /**\r\n   * Set new properties on one of the selection's points.\r\n   */\n  setPoint(editor, props, options) {\n    var {\n      selection\n    } = editor;\n    var {\n      edge = 'both'\n    } = options;\n\n    if (!selection) {\n      return;\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor';\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus';\n    }\n\n    var {\n      anchor,\n      focus\n    } = selection;\n    var point = edge === 'anchor' ? anchor : focus;\n    var newPoint = Object.assign(point, props);\n\n    if (edge === 'anchor') {\n      Transforms.setSelection(editor, {\n        anchor: newPoint\n      });\n    } else {\n      Transforms.setSelection(editor, {\n        focus: newPoint\n      });\n    }\n  },\n\n  /**\r\n   * Set new properties on the selection.\r\n   */\n  setSelection(editor, props) {\n    var {\n      selection\n    } = editor;\n    var oldProps = {};\n    var newProps = {};\n\n    if (!selection) {\n      return;\n    }\n\n    for (var k in props) {\n      if (k === 'anchor' && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === 'focus' && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== 'anchor' && k !== 'focus' && props[k] !== selection[k]) {\n        oldProps[k] = selection[k];\n        newProps[k] = props[k];\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps\n      });\n    }\n  }\n\n};\nvar TextTransforms = {\n  /**\r\n   * Delete content in the editor.\r\n   */\n  delete(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false\n      } = options;\n      var {\n        at = editor.selection,\n        hanging = false\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor;\n      }\n\n      if (Point.isPoint(at)) {\n        var furthestVoid = Editor.void(editor, {\n          at,\n          mode: 'highest'\n        });\n\n        if (!voids && furthestVoid) {\n          var [, voidPath] = furthestVoid;\n          at = voidPath;\n        } else {\n          var opts = {\n            unit,\n            distance\n          };\n          var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);\n          at = {\n            anchor: at,\n            focus: target\n          };\n          hanging = true;\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, {\n          at,\n          voids\n        });\n        return;\n      }\n\n      if (Range.isCollapsed(at)) {\n        return;\n      }\n\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, {\n          voids\n        });\n      }\n\n      var [start, end] = Range.edges(at);\n      var startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids\n      });\n      var endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids\n      });\n      var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);\n      var isSingleText = Path.equals(start.path, end.path);\n      var startVoid = voids ? null : Editor.void(editor, {\n        at: start,\n        mode: 'highest'\n      });\n      var endVoid = voids ? null : Editor.void(editor, {\n        at: end,\n        mode: 'highest'\n      }); // If the start or end points are inside an inline void, nudge them out.\n\n      if (startVoid) {\n        var before = Editor.before(editor, start);\n\n        if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n          start = before;\n        }\n      }\n\n      if (endVoid) {\n        var after = Editor.after(editor, end);\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after;\n        }\n      } // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n\n\n      var matches = [];\n      var lastPath;\n\n      for (var entry of Editor.nodes(editor, {\n        at,\n        voids\n      })) {\n        var [node, path] = entry;\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue;\n        }\n\n        if (!voids && Editor.isVoid(editor, node) || !Path.isCommon(path, start.path) && !Path.isCommon(path, end.path)) {\n          matches.push(entry);\n          lastPath = path;\n        }\n      }\n\n      var pathRefs = Array.from(matches, _ref => {\n        var [, p] = _ref;\n        return Editor.pathRef(editor, p);\n      });\n      var startRef = Editor.pointRef(editor, start);\n      var endRef = Editor.pointRef(editor, end);\n\n      if (!isSingleText && !startVoid) {\n        var _point = startRef.current;\n        var [_node] = Editor.leaf(editor, _point);\n        var {\n          path: _path\n        } = _point;\n        var {\n          offset\n        } = start;\n\n        var text = _node.text.slice(offset);\n\n        editor.apply({\n          type: 'remove_text',\n          path: _path,\n          offset,\n          text\n        });\n      }\n\n      for (var pathRef of pathRefs) {\n        var _path2 = pathRef.unref();\n\n        Transforms.removeNodes(editor, {\n          at: _path2,\n          voids\n        });\n      }\n\n      if (!endVoid) {\n        var _point2 = endRef.current;\n        var [_node2] = Editor.leaf(editor, _point2);\n        var {\n          path: _path3\n        } = _point2;\n\n        var _offset = isSingleText ? start.offset : 0;\n\n        var _text = _node2.text.slice(_offset, end.offset);\n\n        editor.apply({\n          type: 'remove_text',\n          path: _path3,\n          offset: _offset,\n          text: _text\n        });\n      }\n\n      if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids\n        });\n      }\n\n      var point = endRef.unref() || startRef.unref();\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point);\n      }\n    });\n  },\n\n  /**\r\n   * Insert a fragment at a specific location in the editor.\r\n   */\n  insertFragment(editor, fragment) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        hanging = false,\n        voids = false\n      } = options;\n      var {\n        at = editor.selection\n      } = options;\n\n      if (!fragment.length) {\n        return;\n      }\n\n      if (!at) {\n        return;\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at);\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var [, end] = Range.edges(at);\n\n          if (!voids && Editor.void(editor, {\n            at: end\n          })) {\n            return;\n          }\n\n          var pointRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at\n          });\n          at = pointRef.unref();\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at);\n      }\n\n      if (!voids && Editor.void(editor, {\n        at\n      })) {\n        return;\n      } // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n\n\n      var inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n\n      if (inlineElementMatch) {\n        var [, _inlinePath] = inlineElementMatch;\n\n        if (Editor.isEnd(editor, at, _inlinePath)) {\n          var after = Editor.after(editor, _inlinePath);\n          at = after;\n        } else if (Editor.isStart(editor, at, _inlinePath)) {\n          var before = Editor.before(editor, _inlinePath);\n          at = before;\n        }\n      }\n\n      var blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids\n      });\n      var [, blockPath] = blockMatch;\n      var isBlockStart = Editor.isStart(editor, at, blockPath);\n      var isBlockEnd = Editor.isEnd(editor, at, blockPath);\n      var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;\n      var mergeEnd = !isBlockEnd;\n      var [, firstPath] = Node.first({\n        children: fragment\n      }, []);\n      var [, lastPath] = Node.last({\n        children: fragment\n      }, []);\n      var matches = [];\n\n      var matcher = _ref2 => {\n        var [n, p] = _ref2;\n\n        if (mergeStart && Path.isAncestor(p, firstPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n          return false;\n        }\n\n        if (mergeEnd && Path.isAncestor(p, lastPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n          return false;\n        }\n\n        return true;\n      };\n\n      for (var entry of Node.nodes({\n        children: fragment\n      }, {\n        pass: matcher\n      })) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry);\n        }\n      }\n\n      var starts = [];\n      var middles = [];\n      var ends = [];\n      var starting = true;\n      var hasBlocks = false;\n\n      for (var [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false;\n          hasBlocks = true;\n          middles.push(node);\n        } else if (starting) {\n          starts.push(node);\n        } else {\n          ends.push(node);\n        }\n      }\n\n      var [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n      var [, inlinePath] = inlineMatch;\n      var isInlineStart = Editor.isStart(editor, at, inlinePath);\n      var isInlineEnd = Editor.isEnd(editor, at, inlinePath);\n      var middleRef = Editor.pathRef(editor, isBlockEnd ? Path.next(blockPath) : blockPath);\n      var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);\n      Transforms.splitNodes(editor, {\n        at,\n        match: n => hasBlocks ? Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids\n      });\n      var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids\n      });\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n\n      if (!options.at) {\n        var path;\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current);\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current);\n        } else {\n          path = Path.previous(startRef.current);\n        }\n\n        var _end = Editor.end(editor, path);\n\n        Transforms.select(editor, _end);\n      }\n\n      startRef.unref();\n      middleRef.unref();\n      endRef.unref();\n    });\n  },\n\n  /**\r\n   * Insert a string of text in the Editor.\r\n   */\n  insertText(editor, text) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        voids = false\n      } = options;\n      var {\n        at = editor.selection\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at);\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var end = Range.end(at);\n\n          if (!voids && Editor.void(editor, {\n            at: end\n          })) {\n            return;\n          }\n\n          var pointRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at,\n            voids\n          });\n          at = pointRef.unref();\n          Transforms.setSelection(editor, {\n            anchor: at,\n            focus: at\n          });\n        }\n      }\n\n      if (!voids && Editor.void(editor, {\n        at\n      })) {\n        return;\n      }\n\n      var {\n        path,\n        offset\n      } = at;\n      editor.apply({\n        type: 'insert_text',\n        path,\n        offset,\n        text\n      });\n    });\n  }\n\n};\n\nfunction ownKeys$8(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$8(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$8(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$8(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Transforms = _objectSpread$8({}, GeneralTransforms, {}, NodeTransforms, {}, SelectionTransforms, {}, TextTransforms);\n\nexport { Editor, Element, Location, Node, Operation, Path, PathRef, Point, PointRef, Range, RangeRef, Span, Text, Transforms, createEditor };","map":{"version":3,"sources":["../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/utils/weak-maps.ts","../src/create-editor.ts","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../src/utils/string.ts","../src/interfaces/editor.ts","../src/interfaces/element.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts"],"names":["DIRTY_PATHS","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","editor","children","operations","selection","marks","isInline","isVoid","onChange","apply","op","Editor","PathRef","PointRef","RangeRef","set","dirtyPaths","add","path","key","oldDirtyPaths","newDirtyPaths","getDirtyPaths","newPath","Path","Promise","addMark","Range","Transforms","value","match","Text","split","deleteBackward","unit","reverse","deleteForward","deleteFragment","insertBreak","always","insertFragment","fragment","insertNode","node","insertText","text","inline","n","mode","point","anchor","focus","normalizeNode","entry","Element","child","at","voids","shouldHaveInlines","i","prev","isLast","isInlineOrText","newChild","loose","removeMark","levels","descendants","Node","ancestors","previousPath","oldAncestors","newAncestors","p","nextPath","objectWithoutPropertiesLoose","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","offset","charCode","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","length","started","char","l","rest","isWordCharacter","next","remaining","code","above","options","after","edge","range","distance","d","target","before","edges","end","first","hasBlocks","element","hasInlines","hasTexts","isBlock","isEditor","isPlainObject","Operation","isEnd","Point","isEdge","isEmpty","isNormalizing","isStart","start","last","leaf","isText","block","span","parent","universal","Span","from","to","iterable","pass","matches","isLower","hit","emit","normalize","force","allPaths","max","m","parentPath","depth","pathRef","affinity","ref","current","unref","pathRefs","refs","pointRef","pointRefs","string","available","isNewBlock","advance","e","s","reverseText","isFirst","previous","rangeRef","rangeRefs","t","transform","createDraft","index","prevPath","truePath","newParent","newIndex","result","newProperties","JSON","Object","properties","newNode","finishDraft","isDraft","unhangRange","endBlock","blockPath","skip","void","withoutNormalizing","fn","isElement","isElementList","Array","props","Location","isLocation","isSpan","ancestor","c","root","childPath","common","descendant","newRoot","produce","r","get","has","isNode","isNodeList","visited","nextIndex","isNodeOperation","isOperation","isOperationList","isSelectionOperation","isTextOperation","inverse","type","inversePath","inverseNewPath","paths","another","av","bv","compare","min","Math","endsAfter","as","bs","endsAt","endsBefore","equals","isAfter","isAncestor","isBefore","isChild","isCommon","isDescendant","isParent","isPath","isSibling","al","bl","list","relative","operation","position","onp","copy","isPoint","includes","isAfterStart","isBeforeEnd","intersection","isBackward","isCollapsed","isExpanded","isForward","isRange","affinityAnchor","affinityFocus","isTextList","decorations","leaves","o","middle","off","GeneralTransforms","NodeTransforms","insertNodes","hanging","select","nodes","isAtEnd","liftNodes","matchPath","toPath","splitPath","mergeNodes","commonPath","isPreviousSibling","emptyAncestor","emptyRef","prevNode","moveNodes","toRef","targets","removeNodes","depths","setNodes","splitMode","k","splitNodes","height","deleteRange","beforeRef","voidMatch","nudge","afterPath","siblingHeight","voidPath","afterRef","lowestPath","highestPath","unsetNodes","obj","unwrapNodes","wrapNodes","roots","a","wrapperPath","lastPath","wrapper","commonNode","SelectionTransforms","collapse","deselect","move","opts","setPoint","newPoint","setSelection","oldProps","newProps","TextTransforms","delete","furthestVoid","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","isInlineStart","isInlineEnd","middleRef"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Editor.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: () => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor)\n      }\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const child = node.children[i] as Descendant\n        const prev = node.children[i - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { createDraft, finishDraft, isDraft } from 'immer'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  Descendant,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface Editor {\n  children: Node[]\n  selection: Range | null\n  operations: Operation[]\n  marks: Record<string, any> | null\n  [key: string]: any\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: () => void\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport const Editor = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, { ...options, at: range })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(editor: Editor): void {\n    editor.deleteFragment()\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    return (\n      isPlainObject(value) &&\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    )\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Iterable<NodeEntry<T>> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Record<string, any> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.last(editor, at)\n    const [, to] = Editor.last(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Iterable<NodeEntry<T>> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const iterable = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of iterable) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ) {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const path = getDirtyPaths(editor).pop()!\n        const entry = Editor.node(editor, path)\n        editor.normalizeNode(entry)\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Iterate through all of the positions in the document where a `Point` can be\n   * placed.\n   *\n   * By default it will move forward by individual offsets at a time,  but you\n   * can pass the `unit: 'character'` option to moved forward one character, word,\n   * or line at at time.\n   *\n   * Note: void nodes are treated as a single point, and iteration will not\n   * happen inside their content.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n    } = {}\n  ): Iterable<Point> {\n    const { at = editor.selection, unit = 'offset', reverse = false } = options\n\n    if (!at) {\n      return\n    }\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let string = ''\n    let available = 0\n    let offset = 0\n    let distance: number | null = null\n    let isNewBlock = false\n\n    const advance = () => {\n      if (distance == null) {\n        if (unit === 'character') {\n          distance = getCharacterDistance(string)\n        } else if (unit === 'word') {\n          distance = getWordDistance(string)\n        } else if (unit === 'line' || unit === 'block') {\n          distance = string.length\n        } else {\n          distance = 1\n        }\n\n        string = string.slice(distance)\n      }\n\n      // Add or substract the offset.\n      offset = reverse ? offset - distance : offset + distance\n      // Subtract the distance traveled from the available text.\n      available = available - distance!\n      // If the available had room to spare, reset the distance so that it will\n      // advance again next time. Otherwise, set it to the overflow amount.\n      distance = available >= 0 ? null : 0 - available\n    }\n\n    for (const [node, path] of Editor.nodes(editor, { at, reverse })) {\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, since we don't want to iterate over\n        // their content. We instead always just yield their first point.\n        if (editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        if (editor.isInline(node)) {\n          continue\n        }\n\n        if (Editor.hasInlines(editor, node)) {\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          const text = Editor.string(editor, { anchor: s, focus: e })\n          string = reverse ? reverseText(text) : text\n          isNewBlock = true\n        }\n      }\n\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n        available = node.text.length\n        offset = reverse ? available : 0\n\n        if (isFirst) {\n          available = reverse ? first.offset : available - first.offset\n          offset = first.offset\n        }\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset }\n        }\n\n        while (true) {\n          // If there's no more string, continue to the next block.\n          if (string === '') {\n            break\n          } else {\n            advance()\n          }\n\n          // If the available space hasn't overflow, we have another point to\n          // yield in the current text node.\n          if (available >= 0) {\n            yield { path, offset }\n          } else {\n            break\n          }\n        }\n\n        isNewBlock = false\n      }\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.first(editor, at)\n    const [, to] = Editor.first(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: the text of void nodes is presumed to be an empty string, regardless\n   * of what their actual content is.\n   */\n\n  string(editor: Editor, at: Location): string {\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath))\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\ntype NodeMatch<T extends Node> =\n  | ((node: Node) => node is T)\n  | ((node: Node) => boolean)\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface Element {\n  children: Node[]\n  [key: string]: any\n}\n\nexport const Element = {\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Element.isElement(value[0]))\n    )\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport const Location = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport const Span = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Element, ElementEntry, Path, Range, Text } from '..'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type Node = Editor | Element | Text\n\nexport const Node = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry<Ancestor>> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry<Descendant>> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry<Descendant>> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return an iterable of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<ElementEntry> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce(root, r => {\n      const [start, end] = Range.edges(range)\n      const iterable = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of iterable) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      delete r.selection\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    return Array.isArray(value) && (value.length === 0 || Node.isNode(value[0]))\n  },\n\n  /**\n   * Get the lash node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) && Element.matches(node, props)) ||\n      (Text.isText(node) && Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return an iterable of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't decsended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return an iterable of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry<Text>> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n","import { Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type InsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n  [key: string]: any\n}\n\nexport type InsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: any\n}\n\nexport type MergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  target: number | null\n  properties: Partial<Node>\n  [key: string]: any\n}\n\nexport type MoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n  [key: string]: any\n}\n\nexport type RemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n  [key: string]: any\n}\n\nexport type RemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: any\n}\n\nexport type SetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n  [key: string]: any\n}\n\nexport type SetSelectionOperation =\n  | {\n      type: 'set_selection'\n      [key: string]: any\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: any\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: any\n      properties: Range\n      newProperties: null\n    }\n\nexport type SplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  target: number | null\n  properties: Partial<Node>\n  [key: string]: any\n}\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport const Operation = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          (typeof value.target === 'number' || value.target === null) &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          (typeof value.target === 'number' || value.target === null) &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Operation.isOperation(value[0]))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // We need to get the original path here, but sometimes the `newPath`\n        // is a younger sibling of (or ends before) the original, and this\n        // accounts for it.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport const Path = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              const i = Math.min(onp.length, op.length) - 1\n              copy[i] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport const PathRef = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface Point {\n  path: Path\n  offset: number\n  [key: string]: any\n}\n\nexport const Point = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport const PointRef = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface Range {\n  anchor: Point\n  focus: Point\n  [key: string]: any\n}\n\nexport const Range = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Iterable<PointEntry> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: { affinity: 'forward' | 'backward' | 'outward' | 'inward' | null }\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport const RangeRef = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { Range } from '..'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface Text {\n  text: string\n  [key: string]: any\n}\n\nexport const Text = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    for (const key in text) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    for (const key in another) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && (value.length === 0 || Text.isText(value[0]))\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= offset + length) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range starts after the leaf, or ends before it, continue.\n        if (\n          start.offset > offset + length ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < offset + length) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Transforms,\n} from '..'\n\nexport const GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath))\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n} from '..'\n\nexport const NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const [parent, parentPath] = Editor.node(editor, Path.parent(path))\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n =>\n          levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          target: null,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n      let target: number | null = null\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const { text, children, ...properties } = node\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            target,\n            properties,\n          })\n        }\n\n        target = position\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path)\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'highest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const [commonNode] = Editor.node(editor, commonPath)\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n => commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport const SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor) {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location) {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n    const newPoint = Object.assign(point, props)\n\n    if (edge === 'anchor') {\n      Transforms.setSelection(editor, { anchor: newPoint })\n    } else {\n      Transforms.setSelection(editor, { focus: newPoint })\n    }\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>) {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport const TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n"]},"metadata":{},"sourceType":"module"}