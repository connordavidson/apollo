{"ast":null,"code":"/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nimport { PositionEnum } from '../../const';\nexport var CELL_DRAG_HOVER = 'CELL_DRAG_HOVER';\nexport var CELL_DRAG = 'CELL_DRAG';\nexport var CELL_DRAG_CANCEL = 'CELL_DRAG_CANCEL';\nexport var CLEAR_CLEAR_HOVER = 'CLEAR_CLEAR_HOVER';\n/**\n * Creates a redux action for when a cell hovers another item.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHover(drag, hover, level, position))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @param {string} position Can be left, right, above, below.\n * @return {Action}\n */\n\nexport var cellHover = function (_a, _b, level, position) {\n  var drag = _a.id;\n  var hover = _b.id;\n\n  if (level === void 0) {\n    level = 0;\n  }\n\n  return {\n    type: CELL_DRAG_HOVER,\n    ts: new Date(),\n    drag: drag,\n    hover: hover,\n    level: level,\n    position: position\n  };\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the left.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverLeftOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\nexport var cellHoverLeftOf = function (drag, hover, level) {\n  return cellHover(drag, hover, level, PositionEnum.LEFT_OF);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the right.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverRightOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\nexport var cellHoverRightOf = function (drag, hover, level) {\n  return cellHover(drag, hover, level, PositionEnum.RIGHT_OF);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell above.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverAbove(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\nexport var cellHoverAbove = function (drag, hover, level) {\n  return cellHover(drag, hover, level, PositionEnum.ABOVE);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell below.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverBelow(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\nexport var cellHoverBelow = function (drag, hover, level) {\n  return cellHover(drag, hover, level, PositionEnum.BELOW);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the left, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineLeft(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\n\nexport var cellHoverInlineLeft = function (drag, hover) {\n  return cellHover(drag, hover, 0, PositionEnum.INLINE_LEFT);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the right, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineRight(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\n\nexport var cellHoverInlineRight = function (drag, hover) {\n  return cellHover(drag, hover, 0, PositionEnum.INLINE_RIGHT);\n};\n/**\n * Creates a redux action for when a cell is being dragged.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(dragCell(cell.id))\n *\n * @param {string} id The id of the cell that is being dragged.\n * @return {Action}\n */\n\nexport var dragCell = function (id) {\n  return {\n    type: CELL_DRAG,\n    ts: new Date(),\n    id: id\n  };\n};\n/**\n * Creates a redux action to clear hover state of all cells.\n *\n * @return {Action}\n */\n\nexport var clearHover = function () {\n  return {\n    type: CLEAR_CLEAR_HOVER,\n    ts: new Date()\n  };\n};\n/**\n * Creates a redux action for when cell dragging ends.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(cancelCellDrag(cell.id))\n *\n * @param {string} id\n * @return {Action}\n */\n\nexport var cancelCellDrag = function () {\n  return {\n    type: CELL_DRAG_CANCEL,\n    ts: new Date()\n  };\n};\nexport var dragActions = {\n  cancelCellDrag: cancelCellDrag,\n  clearHover: clearHover,\n  dragCell: dragCell,\n  cellHoverInlineRight: cellHoverInlineRight,\n  cellHoverInlineLeft: cellHoverInlineLeft,\n  cellHoverBelow: cellHoverBelow,\n  cellHoverAbove: cellHoverAbove,\n  cellHoverRightOf: cellHoverRightOf,\n  cellHoverLeftOf: cellHoverLeftOf,\n  cellHover: cellHover\n};","map":{"version":3,"sources":["../../../src/actions/cell/drag.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nimport { PositionEnum } from '../../const';\nexport var CELL_DRAG_HOVER = 'CELL_DRAG_HOVER';\nexport var CELL_DRAG = 'CELL_DRAG';\nexport var CELL_DRAG_CANCEL = 'CELL_DRAG_CANCEL';\nexport var CLEAR_CLEAR_HOVER = 'CLEAR_CLEAR_HOVER';\n/**\n * Creates a redux action for when a cell hovers another item.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHover(drag, hover, level, position))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @param {string} position Can be left, right, above, below.\n * @return {Action}\n */\nexport var cellHover = function (_a, _b, level, position) {\n    var drag = _a.id;\n    var hover = _b.id;\n    if (level === void 0) { level = 0; }\n    return ({\n        type: CELL_DRAG_HOVER,\n        ts: new Date(),\n        drag: drag,\n        hover: hover,\n        level: level,\n        position: position,\n    });\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the left.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverLeftOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport var cellHoverLeftOf = function (drag, hover, level) { return cellHover(drag, hover, level, PositionEnum.LEFT_OF); };\n/**\n * Creates a redux action for when a cell is hovering another cell on the right.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverRightOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport var cellHoverRightOf = function (drag, hover, level) { return cellHover(drag, hover, level, PositionEnum.RIGHT_OF); };\n/**\n * Creates a redux action for when a cell is hovering another cell above.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverAbove(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport var cellHoverAbove = function (drag, hover, level) {\n    return cellHover(drag, hover, level, PositionEnum.ABOVE);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell below.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverBelow(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport var cellHoverBelow = function (drag, hover, level) {\n    return cellHover(drag, hover, level, PositionEnum.BELOW);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the left, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineLeft(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\nexport var cellHoverInlineLeft = function (drag, hover) {\n    return cellHover(drag, hover, 0, PositionEnum.INLINE_LEFT);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the right, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineRight(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\nexport var cellHoverInlineRight = function (drag, hover) {\n    return cellHover(drag, hover, 0, PositionEnum.INLINE_RIGHT);\n};\n/**\n * Creates a redux action for when a cell is being dragged.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(dragCell(cell.id))\n *\n * @param {string} id The id of the cell that is being dragged.\n * @return {Action}\n */\nexport var dragCell = function (id) { return ({\n    type: CELL_DRAG,\n    ts: new Date(),\n    id: id,\n}); };\n/**\n * Creates a redux action to clear hover state of all cells.\n *\n * @return {Action}\n */\nexport var clearHover = function () { return ({\n    type: CLEAR_CLEAR_HOVER,\n    ts: new Date(),\n}); };\n/**\n * Creates a redux action for when cell dragging ends.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(cancelCellDrag(cell.id))\n *\n * @param {string} id\n * @return {Action}\n */\nexport var cancelCellDrag = function () { return ({\n    type: CELL_DRAG_CANCEL,\n    ts: new Date(),\n}); };\nexport var dragActions = {\n    cancelCellDrag: cancelCellDrag,\n    clearHover: clearHover,\n    dragCell: dragCell,\n    cellHoverInlineRight: cellHoverInlineRight,\n    cellHoverInlineLeft: cellHoverInlineLeft,\n    cellHoverBelow: cellHoverBelow,\n    cellHoverAbove: cellHoverAbove,\n    cellHoverRightOf: cellHoverRightOf,\n    cellHoverLeftOf: cellHoverLeftOf,\n    cellHover: cellHover,\n};\n//# sourceMappingURL=drag.js.map"]},"metadata":{},"sourceType":"module"}