{"ast":null,"code":"/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nvar computeOrder = function (_a) {\n  var rows = _a.rows,\n      cells = _a.cells,\n      _b = _a.content,\n      _c = (_b === void 0 ? {} : _b).plugin,\n      _d = (_c === void 0 ? {} : _c).name,\n      name = _d === void 0 ? '' : _d,\n      id = _a.id;\n  return __spread([[{\n    id: id,\n    isLeaf: Boolean(name)\n  }]], (rows || []).map(computeOrder), (cells || []).map(computeOrder)).reduce(function (p, n) {\n    return __spread(p, n);\n  }, []);\n}; // tslint:disable-next-line:no-any\n\n\nexport var cellOrder = function (os) {\n  return os.map(computeOrder) // tslint:disable-next-line:no-any\n  .reduce(function (p, n) {\n    return __spread(p, n);\n  }, []);\n};","map":{"version":3,"sources":["../../../../src/reducer/editable/helper/order.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAM,YAAY,GAAG,UAAC,EAAD,EAapB;MAZC,IAAA,GAAA,EAAA,CAAA,I;MACA,KAAA,GAAA,EAAA,CAAA,K;MACA,EAAA,GAAA,EAAA,CAAA,O;MAAW,EAAA,GAAA,CAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAA,EAAA,M;MAAU,EAAA,GAAA,CAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAA,EAAA,I;MAAA,IAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;MACrB,EAAA,GAAA,EAAA,CAAA,E;AAUA,SAAA,QAAA,CAAA,CACE,CACE;AACE,IAAA,EAAE,EAAA,EADJ;AAEE,IAAA,MAAM,EAAE,OAAO,CAAC,IAAD;AAFjB,GADF,CADF,CAAA,EAOK,CAAC,IAAI,IAAI,EAAT,EAAa,GAAb,CAAiB,YAAjB,CAPL,EAQK,CAAC,KAAK,IAAI,EAAV,EAAc,GAAd,CAAkB,YAAlB,CARL,CAAA,CAUE,MAVF,CAUS,UAAC,CAAD,EAAgB,CAAhB,EAA6B;AAAK,WAAA,QAAA,CAAI,CAAJ,EAAA,CAAA,CAAA;AAAY,GAVvD,EAUyD,EAVzD,CAAA;AAU4D,CAxB9D,C,CA0BA;;;AACA,OAAO,IAAM,SAAS,GAAG,UAAC,EAAD,EAAe;AACtC,SAAA,EAAE,CACC,GADH,CACO,YADP,EAEE;AAFF,GAGG,MAHH,CAGU,UAAC,CAAD,EAAgB,CAAhB,EAA6B;AAAK,WAAA,QAAA,CAAI,CAAJ,EAAA,CAAA,CAAA;AAAY,GAHxD,EAG0D,EAH1D,CAAA;AAG6D,CAJxD","sourceRoot":"","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar computeOrder = function (_a) {\n    var rows = _a.rows, cells = _a.cells, _b = _a.content, _c = (_b === void 0 ? {} : _b).plugin, _d = (_c === void 0 ? {} : _c).name, name = _d === void 0 ? '' : _d, id = _a.id;\n    return __spread([\n        [\n            {\n                id: id,\n                isLeaf: Boolean(name),\n            },\n        ]\n    ], (rows || []).map(computeOrder), (cells || []).map(computeOrder)).reduce(function (p, n) { return __spread(p, n); }, []);\n};\n// tslint:disable-next-line:no-any\nexport var cellOrder = function (os) {\n    return os\n        .map(computeOrder)\n        // tslint:disable-next-line:no-any\n        .reduce(function (p, n) { return __spread(p, n); }, []);\n};\n//# sourceMappingURL=order.js.map"]},"metadata":{},"sourceType":"module"}