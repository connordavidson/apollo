{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback } from 'react';\nimport { Transforms } from 'slate';\nimport { useSlate } from 'slate-react';\nimport { getCurrentNodeWithPlugin } from './useCurrentNodeWithPlugin';\nimport { removePlugin } from './useRemovePlugin';\nexport var addPlugin = function (editor, plugin, props) {\n  var _a = props || {},\n      passedData = _a.data,\n      text = _a.text;\n\n  var node = getCurrentNodeWithPlugin(editor, plugin);\n\n  if (text) {\n    editor.insertText(text);\n    Transforms.select(editor, {\n      anchor: editor.selection.anchor,\n      focus: __assign(__assign({}, editor.selection.focus), {\n        offset: editor.selection.focus.offset - text.length\n      })\n    });\n  }\n\n  var data = passedData || (plugin.getInitialData ? plugin.getInitialData() : null);\n  var isActive = Boolean(node);\n\n  if (isActive) {\n    // remove first and readd\n    removePlugin(editor, plugin);\n  } // add new\n\n\n  if (plugin.customAdd) {\n    plugin.customAdd(editor);\n  } else if (plugin.pluginType === 'component') {\n    if (plugin.object === 'mark') {\n      editor.addMark(plugin.type, data || true);\n    } else {\n      if (plugin.object === 'block' && plugin.replaceWithDefaultOnRemove) {\n        Transforms.setNodes(editor, {\n          type: plugin.type,\n          data: data\n        });\n      } else {\n        Transforms.wrapNodes(editor, {\n          type: plugin.type,\n          children: [],\n          data: data\n        }, {\n          split: true\n        });\n      }\n    }\n  } else if (plugin.pluginType === 'data') {\n    Transforms.setNodes(editor, {\n      data: data\n    });\n  }\n};\nexport default (function (plugin) {\n  var editor = useSlate();\n  return useCallback(function (props) {\n    return addPlugin(editor, plugin, props);\n  }, []);\n});","map":{"version":3,"sources":["../../src/hooks/useAddPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,WAAT,QAA4B,OAA5B;AACA,SAAS,UAAT,QAA2B,OAA3B;AACA,SAAsB,QAAtB,QAAsC,aAAtC;AAEA,SAAS,wBAAT,QAAyC,4BAAzC;AACA,SAAS,YAAT,QAA6B,mBAA7B;AAEA,OAAO,IAAM,SAAS,GAAG,UACvB,MADuB,EAEvB,MAFuB,EAGvB,KAHuB,EAGY;AAE7B,MAAA,EAAA,GAAA,KAAA,IAAA,EAAA;AAAA,MAAE,UAAA,GAAA,EAAA,CAAA,IAAF;AAAA,MAAoB,IAAA,GAAA,EAAA,CAAA,IAApB;;AACN,MAAM,IAAI,GAAG,wBAAwB,CAAC,MAAD,EAAS,MAAT,CAArC;;AACA,MAAI,IAAJ,EAAU;AACR,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AACA,IAAA,UAAU,CAAC,MAAX,CAAkB,MAAlB,EAA0B;AACxB,MAAA,MAAM,EAAE,MAAM,CAAC,SAAP,CAAiB,MADD;AAExB,MAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,MAAM,CAAC,SAAP,CAAiB,KADjB,CAAA,EACsB;AACzB,QAAA,MAAM,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAjB,CAAuB,MAAvB,GAAgC,IAAI,CAAC;AADpB,OADtB;AAFmB,KAA1B;AAOD;;AAED,MAAM,IAAI,GACR,UAAU,KAAK,MAAM,CAAC,cAAP,GAAwB,MAAM,CAAC,cAAP,EAAxB,GAAkD,IAAvD,CADZ;AAEA,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAD,CAAxB;;AAEA,MAAI,QAAJ,EAAc;AACZ;AACA,IAAA,YAAY,CAAC,MAAD,EAAS,MAAT,CAAZ;AACD,GAtBkC,CAuBnC;;;AACA,MAAI,MAAM,CAAC,SAAX,EAAsB;AACpB,IAAA,MAAM,CAAC,SAAP,CAAiB,MAAjB;AACD,GAFD,MAEO,IAAI,MAAM,CAAC,UAAP,KAAsB,WAA1B,EAAuC;AAC5C,QAAI,MAAM,CAAC,MAAP,KAAkB,MAAtB,EAA8B;AAC5B,MAAA,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,IAAtB,EAA4B,IAAI,IAAI,IAApC;AACD,KAFD,MAEO;AACL,UAAI,MAAM,CAAC,MAAP,KAAkB,OAAlB,IAA6B,MAAM,CAAC,0BAAxC,EAAoE;AAClE,QAAA,UAAU,CAAC,QAAX,CAAoB,MAApB,EAA4B;AAAE,UAAA,IAAI,EAAE,MAAM,CAAC,IAAf;AAAqB,UAAA,IAAI,EAAA;AAAzB,SAA5B;AACD,OAFD,MAEO;AACL,QAAA,UAAU,CAAC,SAAX,CACE,MADF,EAEE;AACE,UAAA,IAAI,EAAE,MAAM,CAAC,IADf;AAGE,UAAA,QAAQ,EAAE,EAHZ;AAIE,UAAA,IAAI,EAAA;AAJN,SAFF,EAQE;AAAE,UAAA,KAAK,EAAE;AAAT,SARF;AAUD;AACF;AACF,GAnBM,MAmBA,IAAI,MAAM,CAAC,UAAP,KAAsB,MAA1B,EAAkC;AACvC,IAAA,UAAU,CAAC,QAAX,CAAoB,MAApB,EAA4B;AAAE,MAAA,IAAI,EAAA;AAAN,KAA5B;AACD;AACF,CAnDM;AAqDP,gBAAe,UAAI,MAAJ,EAAoC;AACjD,MAAM,MAAM,GAAG,QAAQ,EAAvB;AACA,SAAO,WAAW,CAChB,UAAC,KAAD,EAAoC;AAAK,WAAA,SAAS,CAAC,MAAD,EAAS,MAAT,EAAT,KAAS,CAAT;AAAgC,GADzD,EAEhB,EAFgB,CAAlB;AAID,CAND","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useCallback } from 'react';\nimport { Transforms } from 'slate';\nimport { useSlate } from 'slate-react';\nimport { getCurrentNodeWithPlugin } from './useCurrentNodeWithPlugin';\nimport { removePlugin } from './useRemovePlugin';\nexport var addPlugin = function (editor, plugin, props) {\n    var _a = props || {}, passedData = _a.data, text = _a.text;\n    var node = getCurrentNodeWithPlugin(editor, plugin);\n    if (text) {\n        editor.insertText(text);\n        Transforms.select(editor, {\n            anchor: editor.selection.anchor,\n            focus: __assign(__assign({}, editor.selection.focus), { offset: editor.selection.focus.offset - text.length }),\n        });\n    }\n    var data = passedData || (plugin.getInitialData ? plugin.getInitialData() : null);\n    var isActive = Boolean(node);\n    if (isActive) {\n        // remove first and readd\n        removePlugin(editor, plugin);\n    }\n    // add new\n    if (plugin.customAdd) {\n        plugin.customAdd(editor);\n    }\n    else if (plugin.pluginType === 'component') {\n        if (plugin.object === 'mark') {\n            editor.addMark(plugin.type, data || true);\n        }\n        else {\n            if (plugin.object === 'block' && plugin.replaceWithDefaultOnRemove) {\n                Transforms.setNodes(editor, { type: plugin.type, data: data });\n            }\n            else {\n                Transforms.wrapNodes(editor, {\n                    type: plugin.type,\n                    children: [],\n                    data: data,\n                }, { split: true });\n            }\n        }\n    }\n    else if (plugin.pluginType === 'data') {\n        Transforms.setNodes(editor, { data: data });\n    }\n};\nexport default (function (plugin) {\n    var editor = useSlate();\n    return useCallback(function (props) { return addPlugin(editor, plugin, props); }, []);\n});\n//# sourceMappingURL=useAddPlugin.js.map"]},"metadata":{},"sourceType":"module"}